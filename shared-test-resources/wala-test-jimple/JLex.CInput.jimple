class JLex.CInput extends java.lang.Object
{
    private java.io.BufferedReader m_input;
    boolean m_eof_reached;
    boolean m_pushback_line;
    char[] m_line;
    int m_line_read;
    int m_line_index;
    int m_line_number;
    static final boolean EOF;
    static final boolean NOT_EOF;

    void <init>(java.io.Reader)
    {
        JLex.CInput r0;
        java.io.Reader r1;
        java.io.BufferedReader r2;
        boolean z0;

        r0 := @this: JLex.CInput;

        r1 := @parameter0: java.io.Reader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if null == r1 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        staticinvoke <JLex.CUtility: void ASSERT(boolean)>(z0);

        r2 = new java.io.BufferedReader;

        specialinvoke r2.<java.io.BufferedReader: void <init>(java.io.Reader)>(r1);

        r0.<JLex.CInput: java.io.BufferedReader m_input> = r2;

        r0.<JLex.CInput: char[] m_line> = null;

        r0.<JLex.CInput: int m_line_read> = 0;

        r0.<JLex.CInput: int m_line_index> = 0;

        r0.<JLex.CInput: boolean m_eof_reached> = 0;

        r0.<JLex.CInput: int m_line_number> = 0;

        r0.<JLex.CInput: boolean m_pushback_line> = 0;

        return;
    }

    boolean getLine() throws java.io.IOException
    {
        JLex.CInput r0;
        boolean z0, z1, z2, z3;
        java.lang.StringBuilder r2, r3, r4;
        java.lang.String r5, r11;
        char[] r6, r7, r8, r9;
        int i0, i1, i2, i4, i5, i6, i7, i9, i10;
        char c3, c8;
        java.io.BufferedReader r10;

        r0 := @this: JLex.CInput;

        z0 = r0.<JLex.CInput: boolean m_eof_reached>;

        if z0 == 0 goto label1;

        return 1;

     label1:
        z1 = r0.<JLex.CInput: boolean m_pushback_line>;

        if z1 == 0 goto label5;

        r0.<JLex.CInput: boolean m_pushback_line> = 0;

        i9 = 0;

     label2:
        i6 = r0.<JLex.CInput: int m_line_read>;

        if i9 >= i6 goto label4;

        r9 = r0.<JLex.CInput: char[] m_line>;

        c8 = r9[i9];

        z3 = staticinvoke <JLex.CUtility: boolean isspace(char)>(c8);

        if 0 != z3 goto label3;

        goto label4;

     label3:
        i9 = i9 + 1;

        goto label2;

     label4:
        i7 = r0.<JLex.CInput: int m_line_read>;

        if i9 >= i7 goto label5;

        r0.<JLex.CInput: int m_line_index> = 0;

        return 0;

     label5:
        r10 = r0.<JLex.CInput: java.io.BufferedReader m_input>;

        r11 = virtualinvoke r10.<java.io.BufferedReader: java.lang.String readLine()>();

        if null != r11 goto label6;

        r0.<JLex.CInput: boolean m_eof_reached> = 1;

        r0.<JLex.CInput: int m_line_index> = 0;

        return 1;

     label6:
        r2 = new java.lang.StringBuilder;

        specialinvoke r2.<java.lang.StringBuilder: void <init>()>();

        r3 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r11);

        r4 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        r5 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.String toString()>();

        r6 = virtualinvoke r5.<java.lang.String: char[] toCharArray()>();

        r0.<JLex.CInput: char[] m_line> = r6;

        r7 = r0.<JLex.CInput: char[] m_line>;

        i0 = lengthof r7;

        r0.<JLex.CInput: int m_line_read> = i0;

        i1 = r0.<JLex.CInput: int m_line_number>;

        i2 = i1 + 1;

        r0.<JLex.CInput: int m_line_number> = i2;

        i10 = 0;

     label7:
        r8 = r0.<JLex.CInput: char[] m_line>;

        c3 = r8[i10];

        z2 = staticinvoke <JLex.CUtility: boolean isspace(char)>(c3);

        if z2 == 0 goto label8;

        i10 = i10 + 1;

        i5 = r0.<JLex.CInput: int m_line_read>;

        if i10 != i5 goto label7;

        goto label8;

     label8:
        i4 = r0.<JLex.CInput: int m_line_read>;

        if i10 >= i4 goto label5;

        goto label9;

     label9:
        r0.<JLex.CInput: int m_line_index> = 0;

        return 0;
    }

    public static void <clinit>()
    {
        <JLex.CInput: boolean NOT_EOF> = 0;

        <JLex.CInput: boolean EOF> = 1;

        return;
    }
}
