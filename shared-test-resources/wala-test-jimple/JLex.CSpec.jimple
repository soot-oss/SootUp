class JLex.CSpec extends java.lang.Object
{
    java.util.Hashtable m_states;
    java.util.Hashtable m_macros;
    JLex.CNfa m_nfa_start;
    java.util.Vector m_nfa_states;
    java.util.Vector[] m_state_rules;
    int[] m_state_dtrans;
    java.util.Vector m_dfa_states;
    java.util.Hashtable m_dfa_sets;
    java.util.Vector m_accept_vector;
    int[] m_anchor_array;
    java.util.Vector m_dtrans_vector;
    int m_dtrans_ncols;
    int[] m_row_map;
    int[] m_col_map;
    static final int NUM_PSEUDO;
    int BOL;
    int EOF;
    int[] m_ccls_map;
    int m_current_token;
    char m_lexeme;
    boolean m_in_quote;
    boolean m_in_ccl;
    boolean m_verbose;
    boolean m_integer_type;
    boolean m_intwrap_type;
    boolean m_yyeof;
    boolean m_count_chars;
    boolean m_count_lines;
    boolean m_cup_compatible;
    boolean m_unix;
    boolean m_public;
    boolean m_ignorecase;
    char[] m_init_code;
    int m_init_read;
    char[] m_init_throw_code;
    int m_init_throw_read;
    char[] m_class_code;
    int m_class_read;
    char[] m_eof_code;
    int m_eof_read;
    char[] m_eof_value_code;
    int m_eof_value_read;
    char[] m_eof_throw_code;
    int m_eof_throw_read;
    char[] m_yylex_throw_code;
    int m_yylex_throw_read;
    char[] m_class_name;
    char[] m_implements_name;
    char[] m_function_name;
    char[] m_type_name;
    private JLex.CLexGen m_lexGen;
    static final int NONE;
    static final int START;
    static final int END;

    void <init>(JLex.CLexGen)
    {
        JLex.CSpec r0;
        JLex.CLexGen r1;
        char[] r2, r3, r4, r5;
        java.util.Hashtable r7, r9, r11, r13, r16;
        java.lang.String r8;
        java.lang.Integer r10;
        int i0;
        java.util.Vector r14, r15, r17;

        r0 := @this: JLex.CSpec;

        r1 := @parameter0: JLex.CLexGen;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r2 = newarray (char)[5];

        r2[0] = 89;

        r2[1] = 121;

        r2[2] = 108;

        r2[3] = 101;

        r2[4] = 120;

        r0.<JLex.CSpec: char[] m_class_name> = r2;

        r3 = newarray (char)[0];

        r0.<JLex.CSpec: char[] m_implements_name> = r3;

        r4 = newarray (char)[5];

        r4[0] = 121;

        r4[1] = 121;

        r4[2] = 108;

        r4[3] = 101;

        r4[4] = 120;

        r0.<JLex.CSpec: char[] m_function_name> = r4;

        r5 = newarray (char)[7];

        r5[0] = 89;

        r5[1] = 121;

        r5[2] = 116;

        r5[3] = 111;

        r5[4] = 107;

        r5[5] = 101;

        r5[6] = 110;

        r0.<JLex.CSpec: char[] m_type_name> = r5;

        r0.<JLex.CSpec: JLex.CLexGen m_lexGen> = r1;

        r0.<JLex.CSpec: int m_current_token> = 1;

        r0.<JLex.CSpec: char m_lexeme> = 0;

        r0.<JLex.CSpec: boolean m_in_quote> = 0;

        r0.<JLex.CSpec: boolean m_in_ccl> = 0;

        r7 = new java.util.Hashtable;

        specialinvoke r7.<java.util.Hashtable: void <init>()>();

        r0.<JLex.CSpec: java.util.Hashtable m_states> = r7;

        r9 = r0.<JLex.CSpec: java.util.Hashtable m_states>;

        r8 = new java.lang.String;

        specialinvoke r8.<java.lang.String: void <init>(java.lang.String)>("YYINITIAL");

        r10 = new java.lang.Integer;

        r11 = r0.<JLex.CSpec: java.util.Hashtable m_states>;

        i0 = virtualinvoke r11.<java.util.Hashtable: int size()>();

        specialinvoke r10.<java.lang.Integer: void <init>(int)>(i0);

        virtualinvoke r9.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r8, r10);

        r13 = new java.util.Hashtable;

        specialinvoke r13.<java.util.Hashtable: void <init>()>();

        r0.<JLex.CSpec: java.util.Hashtable m_macros> = r13;

        r0.<JLex.CSpec: boolean m_integer_type> = 0;

        r0.<JLex.CSpec: boolean m_intwrap_type> = 0;

        r0.<JLex.CSpec: boolean m_count_lines> = 0;

        r0.<JLex.CSpec: boolean m_count_chars> = 0;

        r0.<JLex.CSpec: boolean m_cup_compatible> = 0;

        r0.<JLex.CSpec: boolean m_unix> = 1;

        r0.<JLex.CSpec: boolean m_public> = 0;

        r0.<JLex.CSpec: boolean m_yyeof> = 0;

        r0.<JLex.CSpec: boolean m_ignorecase> = 0;

        r0.<JLex.CSpec: boolean m_verbose> = 1;

        r0.<JLex.CSpec: JLex.CNfa m_nfa_start> = null;

        r14 = new java.util.Vector;

        specialinvoke r14.<java.util.Vector: void <init>()>();

        r0.<JLex.CSpec: java.util.Vector m_nfa_states> = r14;

        r15 = new java.util.Vector;

        specialinvoke r15.<java.util.Vector: void <init>()>();

        r0.<JLex.CSpec: java.util.Vector m_dfa_states> = r15;

        r16 = new java.util.Hashtable;

        specialinvoke r16.<java.util.Hashtable: void <init>()>();

        r0.<JLex.CSpec: java.util.Hashtable m_dfa_sets> = r16;

        r17 = new java.util.Vector;

        specialinvoke r17.<java.util.Vector: void <init>()>();

        r0.<JLex.CSpec: java.util.Vector m_dtrans_vector> = r17;

        r0.<JLex.CSpec: int m_dtrans_ncols> = 128;

        r0.<JLex.CSpec: int[] m_row_map> = null;

        r0.<JLex.CSpec: int[] m_col_map> = null;

        r0.<JLex.CSpec: java.util.Vector m_accept_vector> = null;

        r0.<JLex.CSpec: int[] m_anchor_array> = null;

        r0.<JLex.CSpec: char[] m_init_code> = null;

        r0.<JLex.CSpec: int m_init_read> = 0;

        r0.<JLex.CSpec: char[] m_init_throw_code> = null;

        r0.<JLex.CSpec: int m_init_throw_read> = 0;

        r0.<JLex.CSpec: char[] m_yylex_throw_code> = null;

        r0.<JLex.CSpec: int m_yylex_throw_read> = 0;

        r0.<JLex.CSpec: char[] m_class_code> = null;

        r0.<JLex.CSpec: int m_class_read> = 0;

        r0.<JLex.CSpec: char[] m_eof_code> = null;

        r0.<JLex.CSpec: int m_eof_read> = 0;

        r0.<JLex.CSpec: char[] m_eof_value_code> = null;

        r0.<JLex.CSpec: int m_eof_value_read> = 0;

        r0.<JLex.CSpec: char[] m_eof_throw_code> = null;

        r0.<JLex.CSpec: int m_eof_throw_read> = 0;

        r0.<JLex.CSpec: int[] m_state_dtrans> = null;

        r0.<JLex.CSpec: java.util.Vector[] m_state_rules> = null;

        return;
    }

    public static void <clinit>()
    {
        <JLex.CSpec: int END> = 2;

        <JLex.CSpec: int START> = 1;

        <JLex.CSpec: int NONE> = 0;

        <JLex.CSpec: int NUM_PSEUDO> = 2;

        return;
    }
}
