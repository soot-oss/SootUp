class JLex.CUtility extends java.lang.Object
{
    static final boolean DEBUG;
    static final boolean SLOW_DEBUG;
    static final boolean DUMP_DEBUG;
    static final boolean DESCENT_DEBUG;
    static final boolean OLD_DEBUG;
    static final boolean OLD_DUMP_DEBUG;
    static final boolean FOODEBUG;
    static final boolean DO_DEBUG;
    static final int INT_MAX;
    static final int MAX_SEVEN_BIT;
    static final int MAX_EIGHT_BIT;
    static final int MAX_SIXTEEN_BIT;

    void <init>()
    {
        JLex.CUtility r0;

        r0 := @this: JLex.CUtility;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void enter(java.lang.String, char, int)
    {
        java.lang.String r0, r10;
        char c0;
        int i1;
        java.lang.StringBuilder r1, r3, r4, r5, r6, r7, r8, r9;
        java.io.PrintStream r2;

        r0 := @parameter0: java.lang.String;

        c0 := @parameter1: char;

        i1 := @parameter2: int;

        r2 = <java.lang.System: java.io.PrintStream out>;

        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>()>();

        r3 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Entering ");

        r4 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        r5 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [lexeme: ");

        r6 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

        r7 = virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] [token: ");

        r8 = virtualinvoke r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        r9 = virtualinvoke r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        r10 = virtualinvoke r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintStream: void println(java.lang.String)>(r10);

        return;
    }

    static void leave(java.lang.String, char, int)
    {
        java.lang.String r0, r10;
        char c0;
        int i1;
        java.lang.StringBuilder r1, r3, r4, r5, r6, r7, r8, r9;
        java.io.PrintStream r2;

        r0 := @parameter0: java.lang.String;

        c0 := @parameter1: char;

        i1 := @parameter2: int;

        r2 = <java.lang.System: java.io.PrintStream out>;

        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>()>();

        r3 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Leaving ");

        r4 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        r5 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [lexeme:");

        r6 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

        r7 = virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] [token:");

        r8 = virtualinvoke r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        r9 = virtualinvoke r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        r10 = virtualinvoke r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintStream: void println(java.lang.String)>(r10);

        return;
    }

    static void ASSERT(boolean)
    {
        boolean z0;
        java.io.PrintStream r0;
        java.lang.Error r1;

        z0 := @parameter0: boolean;

        if 0 != z0 goto label1;

        r0 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke r0.<java.io.PrintStream: void println(java.lang.String)>("Assertion Failed");

        r1 = new java.lang.Error;

        specialinvoke r1.<java.lang.Error: void <init>(java.lang.String)>("Assertion Failed.");

        throw r1;

     label1:
        return;
    }

    static char[] doubleSize(char[])
    {
        char[] r0, r1;
        int i0, i1, i2, i4;
        char c3;

        r0 := @parameter0: char[];

        i0 = lengthof r0;

        i1 = 2 * i0;

        r1 = newarray (char)[i1];

        i4 = 0;

     label1:
        i2 = lengthof r0;

        if i4 >= i2 goto label2;

        c3 = r0[i4];

        r1[i4] = c3;

        i4 = i4 + 1;

        goto label1;

     label2:
        return r1;
    }

    static byte[] doubleSize(byte[])
    {
        byte[] r0, r1;
        int i0, i1, i2, i4;
        byte b3;

        r0 := @parameter0: byte[];

        i0 = lengthof r0;

        i1 = 2 * i0;

        r1 = newarray (byte)[i1];

        i4 = 0;

     label1:
        i2 = lengthof r0;

        if i4 >= i2 goto label2;

        b3 = r0[i4];

        r1[i4] = b3;

        i4 = i4 + 1;

        goto label1;

     label2:
        return r1;
    }

    static char hex2bin(char)
    {
        char c0, c3, c6, c8;
        java.lang.StringBuilder r0, r1, r2;
        java.lang.String r3;
        int i1, i2, i4, i5, i7;

        c0 := @parameter0: char;

        if 48 > c0 goto label1;

        if 57 < c0 goto label1;

        i7 = c0 - 48;

        c8 = (char) i7;

        return c8;

     label1:
        if 97 > c0 goto label2;

        if 102 < c0 goto label2;

        i4 = c0 - 97;

        i5 = i4 + 10;

        c6 = (char) i5;

        return c6;

     label2:
        if 65 > c0 goto label3;

        if 70 < c0 goto label3;

        i1 = c0 - 65;

        i2 = i1 + 10;

        c3 = (char) i2;

        return c3;

     label3:
        r0 = new java.lang.StringBuilder;

        specialinvoke r0.<java.lang.StringBuilder: void <init>()>();

        r1 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad hexidecimal digit");

        r2 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

        r3 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <JLex.CError: void impos(java.lang.String)>(r3);

        return 0;
    }

    static boolean ishexdigit(char)
    {
        char c0;

        c0 := @parameter0: char;

        if 48 > c0 goto label1;

        if 57 >= c0 goto label3;

     label1:
        if 97 > c0 goto label2;

        if 102 >= c0 goto label3;

     label2:
        if 65 > c0 goto label4;

        if 70 < c0 goto label4;

     label3:
        return 1;

     label4:
        return 0;
    }

    static char oct2bin(char)
    {
        char c0, c2;
        java.lang.StringBuilder r0, r1, r2;
        java.lang.String r3;
        int i1;

        c0 := @parameter0: char;

        if 48 > c0 goto label1;

        if 55 < c0 goto label1;

        i1 = c0 - 48;

        c2 = (char) i1;

        return c2;

     label1:
        r0 = new java.lang.StringBuilder;

        specialinvoke r0.<java.lang.StringBuilder: void <init>()>();

        r1 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad octal digit ");

        r2 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

        r3 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <JLex.CError: void impos(java.lang.String)>(r3);

        return 0;
    }

    static boolean isoctdigit(char)
    {
        char c0;

        c0 := @parameter0: char;

        if 48 > c0 goto label1;

        if 55 < c0 goto label1;

        return 1;

     label1:
        return 0;
    }

    static boolean isspace(char)
    {
        char c0;

        c0 := @parameter0: char;

        if 8 == c0 goto label1;

        if 9 == c0 goto label1;

        if 10 == c0 goto label1;

        if 12 == c0 goto label1;

        if 13 == c0 goto label1;

        if 32 != c0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    static boolean isnewline(char)
    {
        char c0;

        c0 := @parameter0: char;

        if 10 == c0 goto label1;

        if 13 != c0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    static int bytencmp(byte[], int, byte[], int, int)
    {
        byte[] r0, r1;
        int i0, i1, i2, i3, i5, i6, i9, i10, i13, i15;
        byte b4, b7, b8, b11, b12, b14;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        r1 := @parameter2: byte[];

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        i15 = 0;

     label1:
        if i15 >= i2 goto label5;

        i3 = i0 + i15;

        b4 = r0[i3];

        if 0 != b4 goto label2;

        i13 = i1 + i15;

        b14 = r1[i13];

        if 0 != b14 goto label2;

        return 0;

     label2:
        i5 = i0 + i15;

        b8 = r0[i5];

        i6 = i1 + i15;

        b7 = r1[i6];

        if b8 >= b7 goto label3;

        return 1;

     label3:
        i9 = i0 + i15;

        b12 = r0[i9];

        i10 = i1 + i15;

        b11 = r1[i10];

        if b12 <= b11 goto label4;

        return -1;

     label4:
        i15 = i15 + 1;

        goto label1;

     label5:
        return 0;
    }

    static int charncmp(char[], int, char[], int, int)
    {
        char[] r0, r1;
        int i0, i1, i2, i3, i5, i6, i9, i10, i13, i15;
        char c4, c7, c8, c11, c12, c14;

        r0 := @parameter0: char[];

        i0 := @parameter1: int;

        r1 := @parameter2: char[];

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        i15 = 0;

     label1:
        if i15 >= i2 goto label5;

        i3 = i0 + i15;

        c4 = r0[i3];

        if 0 != c4 goto label2;

        i13 = i1 + i15;

        c14 = r1[i13];

        if 0 != c14 goto label2;

        return 0;

     label2:
        i5 = i0 + i15;

        c8 = r0[i5];

        i6 = i1 + i15;

        c7 = r1[i6];

        if c8 >= c7 goto label3;

        return 1;

     label3:
        i9 = i0 + i15;

        c12 = r0[i9];

        i10 = i1 + i15;

        c11 = r1[i10];

        if c12 <= c11 goto label4;

        return -1;

     label4:
        i15 = i15 + 1;

        goto label1;

     label5:
        return 0;
    }

    public static void <clinit>()
    {
        <JLex.CUtility: int MAX_SIXTEEN_BIT> = 65535;

        <JLex.CUtility: int MAX_EIGHT_BIT> = 255;

        <JLex.CUtility: int MAX_SEVEN_BIT> = 127;

        <JLex.CUtility: int INT_MAX> = 2147483647;

        <JLex.CUtility: boolean DO_DEBUG> = 0;

        <JLex.CUtility: boolean FOODEBUG> = 0;

        <JLex.CUtility: boolean OLD_DUMP_DEBUG> = 0;

        <JLex.CUtility: boolean OLD_DEBUG> = 0;

        <JLex.CUtility: boolean DESCENT_DEBUG> = 0;

        <JLex.CUtility: boolean DUMP_DEBUG> = 1;

        <JLex.CUtility: boolean SLOW_DEBUG> = 1;

        <JLex.CUtility: boolean DEBUG> = 1;

        return;
    }
}
