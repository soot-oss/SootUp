class JLex.CLexGen extends java.lang.Object
{
    private java.io.Reader m_instream;
    private java.io.PrintWriter m_outstream;
    private JLex.CInput m_input;
    private java.util.Hashtable m_tokens;
    private JLex.CSpec m_spec;
    private boolean m_init_flag;
    private JLex.CMakeNfa m_makeNfa;
    private JLex.CNfa2Dfa m_nfa2dfa;
    private JLex.CMinimize m_minimize;
    private JLex.CSimplifyNfa m_simplifyNfa;
    private JLex.CEmit m_emit;
    private static final boolean ERROR;
    private static final boolean NOT_ERROR;
    private static final int BUFFER_SIZE;
    static final int EOS;
    static final int ANY;
    static final int AT_BOL;
    static final int AT_EOL;
    static final int CCL_END;
    static final int CCL_START;
    static final int CLOSE_CURLY;
    static final int CLOSE_PAREN;
    static final int CLOSURE;
    static final int DASH;
    static final int END_OF_INPUT;
    static final int L;
    static final int OPEN_CURLY;
    static final int OPEN_PAREN;
    static final int OPTIONAL;
    static final int OR;
    static final int PLUS_CLOSE;
    private final int CLASS_CODE;
    private final int INIT_CODE;
    private final int EOF_CODE;
    private final int INIT_THROW_CODE;
    private final int YYLEX_THROW_CODE;
    private final int EOF_THROW_CODE;
    private final int EOF_VALUE_CODE;
    private char[] m_state_dir;
    private char[] m_char_dir;
    private char[] m_line_dir;
    private char[] m_cup_dir;
    private char[] m_class_dir;
    private char[] m_implements_dir;
    private char[] m_function_dir;
    private char[] m_type_dir;
    private char[] m_integer_dir;
    private char[] m_intwrap_dir;
    private char[] m_full_dir;
    private char[] m_unicode_dir;
    private char[] m_ignorecase_dir;
    private char[] m_notunix_dir;
    private char[] m_init_code_dir;
    private char[] m_init_code_end_dir;
    private char[] m_init_throw_code_dir;
    private char[] m_init_throw_code_end_dir;
    private char[] m_yylex_throw_code_dir;
    private char[] m_yylex_throw_code_end_dir;
    private char[] m_eof_code_dir;
    private char[] m_eof_code_end_dir;
    private char[] m_eof_value_code_dir;
    private char[] m_eof_value_code_end_dir;
    private char[] m_eof_throw_code_dir;
    private char[] m_eof_throw_code_end_dir;
    private char[] m_class_code_dir;
    private char[] m_class_code_end_dir;
    private char[] m_yyeof_dir;
    private char[] m_public_dir;
    private JLex.SparseBitSet all_states;
    private boolean m_advance_stop;

    void <init>(java.lang.String) throws java.io.FileNotFoundException, java.io.IOException
    {
        JLex.CLexGen r0;
        java.lang.String r1, r40, r112, r118;
        char[] r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31;
        java.io.FileReader r32;
        java.io.Reader r33, r43;
        java.io.PrintWriter r34, r41;
        java.io.BufferedWriter r35;
        java.io.FileWriter r36;
        java.lang.StringBuilder r37, r38, r39, r107, r109, r110, r111, r113, r115, r116, r117;
        JLex.CInput r42;
        java.util.Hashtable r44, r46, r50, r54, r58, r62, r66, r70, r74, r78, r82, r86, r90, r94, r98;
        java.lang.Character r45, r49, r53, r57, r61, r65, r69, r73, r77, r81, r85, r89, r93, r97;
        java.lang.Integer r47, r51, r55, r59, r63, r67, r71, r75, r79, r83, r87, r91, r95, r99;
        JLex.CSpec r101;
        JLex.CNfa2Dfa r102;
        JLex.CMinimize r103;
        JLex.CMakeNfa r104;
        JLex.CSimplifyNfa r105;
        JLex.CEmit r106;
        java.io.PrintStream r108, r114;

        r0 := @this: JLex.CLexGen;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<JLex.CLexGen: int CLASS_CODE> = 0;

        r0.<JLex.CLexGen: int INIT_CODE> = 1;

        r0.<JLex.CLexGen: int EOF_CODE> = 2;

        r0.<JLex.CLexGen: int INIT_THROW_CODE> = 3;

        r0.<JLex.CLexGen: int YYLEX_THROW_CODE> = 4;

        r0.<JLex.CLexGen: int EOF_THROW_CODE> = 5;

        r0.<JLex.CLexGen: int EOF_VALUE_CODE> = 6;

        r2 = newarray (char)[7];

        r2[0] = 37;

        r2[1] = 115;

        r2[2] = 116;

        r2[3] = 97;

        r2[4] = 116;

        r2[5] = 101;

        r2[6] = 0;

        r0.<JLex.CLexGen: char[] m_state_dir> = r2;

        r3 = newarray (char)[6];

        r3[0] = 37;

        r3[1] = 99;

        r3[2] = 104;

        r3[3] = 97;

        r3[4] = 114;

        r3[5] = 0;

        r0.<JLex.CLexGen: char[] m_char_dir> = r3;

        r4 = newarray (char)[6];

        r4[0] = 37;

        r4[1] = 108;

        r4[2] = 105;

        r4[3] = 110;

        r4[4] = 101;

        r4[5] = 0;

        r0.<JLex.CLexGen: char[] m_line_dir> = r4;

        r5 = newarray (char)[5];

        r5[0] = 37;

        r5[1] = 99;

        r5[2] = 117;

        r5[3] = 112;

        r5[4] = 0;

        r0.<JLex.CLexGen: char[] m_cup_dir> = r5;

        r6 = newarray (char)[7];

        r6[0] = 37;

        r6[1] = 99;

        r6[2] = 108;

        r6[3] = 97;

        r6[4] = 115;

        r6[5] = 115;

        r6[6] = 0;

        r0.<JLex.CLexGen: char[] m_class_dir> = r6;

        r7 = newarray (char)[12];

        r7[0] = 37;

        r7[1] = 105;

        r7[2] = 109;

        r7[3] = 112;

        r7[4] = 108;

        r7[5] = 101;

        r7[6] = 109;

        r7[7] = 101;

        r7[8] = 110;

        r7[9] = 116;

        r7[10] = 115;

        r7[11] = 0;

        r0.<JLex.CLexGen: char[] m_implements_dir> = r7;

        r8 = newarray (char)[10];

        r8[0] = 37;

        r8[1] = 102;

        r8[2] = 117;

        r8[3] = 110;

        r8[4] = 99;

        r8[5] = 116;

        r8[6] = 105;

        r8[7] = 111;

        r8[8] = 110;

        r8[9] = 0;

        r0.<JLex.CLexGen: char[] m_function_dir> = r8;

        r9 = newarray (char)[6];

        r9[0] = 37;

        r9[1] = 116;

        r9[2] = 121;

        r9[3] = 112;

        r9[4] = 101;

        r9[5] = 0;

        r0.<JLex.CLexGen: char[] m_type_dir> = r9;

        r10 = newarray (char)[9];

        r10[0] = 37;

        r10[1] = 105;

        r10[2] = 110;

        r10[3] = 116;

        r10[4] = 101;

        r10[5] = 103;

        r10[6] = 101;

        r10[7] = 114;

        r10[8] = 0;

        r0.<JLex.CLexGen: char[] m_integer_dir> = r10;

        r11 = newarray (char)[9];

        r11[0] = 37;

        r11[1] = 105;

        r11[2] = 110;

        r11[3] = 116;

        r11[4] = 119;

        r11[5] = 114;

        r11[6] = 97;

        r11[7] = 112;

        r11[8] = 0;

        r0.<JLex.CLexGen: char[] m_intwrap_dir> = r11;

        r12 = newarray (char)[6];

        r12[0] = 37;

        r12[1] = 102;

        r12[2] = 117;

        r12[3] = 108;

        r12[4] = 108;

        r12[5] = 0;

        r0.<JLex.CLexGen: char[] m_full_dir> = r12;

        r13 = newarray (char)[9];

        r13[0] = 37;

        r13[1] = 117;

        r13[2] = 110;

        r13[3] = 105;

        r13[4] = 99;

        r13[5] = 111;

        r13[6] = 100;

        r13[7] = 101;

        r13[8] = 0;

        r0.<JLex.CLexGen: char[] m_unicode_dir> = r13;

        r14 = newarray (char)[12];

        r14[0] = 37;

        r14[1] = 105;

        r14[2] = 103;

        r14[3] = 110;

        r14[4] = 111;

        r14[5] = 114;

        r14[6] = 101;

        r14[7] = 99;

        r14[8] = 97;

        r14[9] = 115;

        r14[10] = 101;

        r14[11] = 0;

        r0.<JLex.CLexGen: char[] m_ignorecase_dir> = r14;

        r15 = newarray (char)[9];

        r15[0] = 37;

        r15[1] = 110;

        r15[2] = 111;

        r15[3] = 116;

        r15[4] = 117;

        r15[5] = 110;

        r15[6] = 105;

        r15[7] = 120;

        r15[8] = 0;

        r0.<JLex.CLexGen: char[] m_notunix_dir> = r15;

        r16 = newarray (char)[7];

        r16[0] = 37;

        r16[1] = 105;

        r16[2] = 110;

        r16[3] = 105;

        r16[4] = 116;

        r16[5] = 123;

        r16[6] = 0;

        r0.<JLex.CLexGen: char[] m_init_code_dir> = r16;

        r17 = newarray (char)[7];

        r17[0] = 37;

        r17[1] = 105;

        r17[2] = 110;

        r17[3] = 105;

        r17[4] = 116;

        r17[5] = 125;

        r17[6] = 0;

        r0.<JLex.CLexGen: char[] m_init_code_end_dir> = r17;

        r18 = newarray (char)[12];

        r18[0] = 37;

        r18[1] = 105;

        r18[2] = 110;

        r18[3] = 105;

        r18[4] = 116;

        r18[5] = 116;

        r18[6] = 104;

        r18[7] = 114;

        r18[8] = 111;

        r18[9] = 119;

        r18[10] = 123;

        r18[11] = 0;

        r0.<JLex.CLexGen: char[] m_init_throw_code_dir> = r18;

        r19 = newarray (char)[12];

        r19[0] = 37;

        r19[1] = 105;

        r19[2] = 110;

        r19[3] = 105;

        r19[4] = 116;

        r19[5] = 116;

        r19[6] = 104;

        r19[7] = 114;

        r19[8] = 111;

        r19[9] = 119;

        r19[10] = 125;

        r19[11] = 0;

        r0.<JLex.CLexGen: char[] m_init_throw_code_end_dir> = r19;

        r20 = newarray (char)[13];

        r20[0] = 37;

        r20[1] = 121;

        r20[2] = 121;

        r20[3] = 108;

        r20[4] = 101;

        r20[5] = 120;

        r20[6] = 116;

        r20[7] = 104;

        r20[8] = 114;

        r20[9] = 111;

        r20[10] = 119;

        r20[11] = 123;

        r20[12] = 0;

        r0.<JLex.CLexGen: char[] m_yylex_throw_code_dir> = r20;

        r21 = newarray (char)[13];

        r21[0] = 37;

        r21[1] = 121;

        r21[2] = 121;

        r21[3] = 108;

        r21[4] = 101;

        r21[5] = 120;

        r21[6] = 116;

        r21[7] = 104;

        r21[8] = 114;

        r21[9] = 111;

        r21[10] = 119;

        r21[11] = 125;

        r21[12] = 0;

        r0.<JLex.CLexGen: char[] m_yylex_throw_code_end_dir> = r21;

        r22 = newarray (char)[6];

        r22[0] = 37;

        r22[1] = 101;

        r22[2] = 111;

        r22[3] = 102;

        r22[4] = 123;

        r22[5] = 0;

        r0.<JLex.CLexGen: char[] m_eof_code_dir> = r22;

        r23 = newarray (char)[6];

        r23[0] = 37;

        r23[1] = 101;

        r23[2] = 111;

        r23[3] = 102;

        r23[4] = 125;

        r23[5] = 0;

        r0.<JLex.CLexGen: char[] m_eof_code_end_dir> = r23;

        r24 = newarray (char)[9];

        r24[0] = 37;

        r24[1] = 101;

        r24[2] = 111;

        r24[3] = 102;

        r24[4] = 118;

        r24[5] = 97;

        r24[6] = 108;

        r24[7] = 123;

        r24[8] = 0;

        r0.<JLex.CLexGen: char[] m_eof_value_code_dir> = r24;

        r25 = newarray (char)[9];

        r25[0] = 37;

        r25[1] = 101;

        r25[2] = 111;

        r25[3] = 102;

        r25[4] = 118;

        r25[5] = 97;

        r25[6] = 108;

        r25[7] = 125;

        r25[8] = 0;

        r0.<JLex.CLexGen: char[] m_eof_value_code_end_dir> = r25;

        r26 = newarray (char)[11];

        r26[0] = 37;

        r26[1] = 101;

        r26[2] = 111;

        r26[3] = 102;

        r26[4] = 116;

        r26[5] = 104;

        r26[6] = 114;

        r26[7] = 111;

        r26[8] = 119;

        r26[9] = 123;

        r26[10] = 0;

        r0.<JLex.CLexGen: char[] m_eof_throw_code_dir> = r26;

        r27 = newarray (char)[11];

        r27[0] = 37;

        r27[1] = 101;

        r27[2] = 111;

        r27[3] = 102;

        r27[4] = 116;

        r27[5] = 104;

        r27[6] = 114;

        r27[7] = 111;

        r27[8] = 119;

        r27[9] = 125;

        r27[10] = 0;

        r0.<JLex.CLexGen: char[] m_eof_throw_code_end_dir> = r27;

        r28 = newarray (char)[3];

        r28[0] = 37;

        r28[1] = 123;

        r28[2] = 0;

        r0.<JLex.CLexGen: char[] m_class_code_dir> = r28;

        r29 = newarray (char)[3];

        r29[0] = 37;

        r29[1] = 125;

        r29[2] = 0;

        r0.<JLex.CLexGen: char[] m_class_code_end_dir> = r29;

        r30 = newarray (char)[7];

        r30[0] = 37;

        r30[1] = 121;

        r30[2] = 121;

        r30[3] = 101;

        r30[4] = 111;

        r30[5] = 102;

        r30[6] = 0;

        r0.<JLex.CLexGen: char[] m_yyeof_dir> = r30;

        r31 = newarray (char)[8];

        r31[0] = 37;

        r31[1] = 112;

        r31[2] = 117;

        r31[3] = 98;

        r31[4] = 108;

        r31[5] = 105;

        r31[6] = 99;

        r31[7] = 0;

        r0.<JLex.CLexGen: char[] m_public_dir> = r31;

        r0.<JLex.CLexGen: JLex.SparseBitSet all_states> = null;

        r0.<JLex.CLexGen: boolean m_advance_stop> = 0;

        r0.<JLex.CLexGen: boolean m_init_flag> = 0;

        r32 = new java.io.FileReader;

        specialinvoke r32.<java.io.FileReader: void <init>(java.lang.String)>(r1);

        r0.<JLex.CLexGen: java.io.Reader m_instream> = r32;

        r33 = r0.<JLex.CLexGen: java.io.Reader m_instream>;

        if null != r33 goto label1;

        r114 = <java.lang.System: java.io.PrintStream out>;

        r113 = new java.lang.StringBuilder;

        specialinvoke r113.<java.lang.StringBuilder: void <init>()>();

        r115 = virtualinvoke r113.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: Unable to open input file ");

        r116 = virtualinvoke r115.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        r117 = virtualinvoke r116.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        r118 = virtualinvoke r117.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r114.<java.io.PrintStream: void println(java.lang.String)>(r118);

        return;

     label1:
        r34 = new java.io.PrintWriter;

        r35 = new java.io.BufferedWriter;

        r36 = new java.io.FileWriter;

        r37 = new java.lang.StringBuilder;

        specialinvoke r37.<java.lang.StringBuilder: void <init>()>();

        r38 = virtualinvoke r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        r39 = virtualinvoke r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".java");

        r40 = virtualinvoke r39.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r36.<java.io.FileWriter: void <init>(java.lang.String)>(r40);

        specialinvoke r35.<java.io.BufferedWriter: void <init>(java.io.Writer)>(r36);

        specialinvoke r34.<java.io.PrintWriter: void <init>(java.io.Writer)>(r35);

        r0.<JLex.CLexGen: java.io.PrintWriter m_outstream> = r34;

        r41 = r0.<JLex.CLexGen: java.io.PrintWriter m_outstream>;

        if null != r41 goto label2;

        r108 = <java.lang.System: java.io.PrintStream out>;

        r107 = new java.lang.StringBuilder;

        specialinvoke r107.<java.lang.StringBuilder: void <init>()>();

        r109 = virtualinvoke r107.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: Unable to open output file ");

        r110 = virtualinvoke r109.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        r111 = virtualinvoke r110.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".java.");

        r112 = virtualinvoke r111.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r108.<java.io.PrintStream: void println(java.lang.String)>(r112);

        return;

     label2:
        r42 = new JLex.CInput;

        r43 = r0.<JLex.CLexGen: java.io.Reader m_instream>;

        specialinvoke r42.<JLex.CInput: void <init>(java.io.Reader)>(r43);

        r0.<JLex.CLexGen: JLex.CInput m_input> = r42;

        r44 = new java.util.Hashtable;

        specialinvoke r44.<java.util.Hashtable: void <init>()>();

        r0.<JLex.CLexGen: java.util.Hashtable m_tokens> = r44;

        r46 = r0.<JLex.CLexGen: java.util.Hashtable m_tokens>;

        r45 = new java.lang.Character;

        specialinvoke r45.<java.lang.Character: void <init>(char)>(36);

        r47 = new java.lang.Integer;

        specialinvoke r47.<java.lang.Integer: void <init>(int)>(4);

        virtualinvoke r46.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r45, r47);

        r50 = r0.<JLex.CLexGen: java.util.Hashtable m_tokens>;

        r49 = new java.lang.Character;

        specialinvoke r49.<java.lang.Character: void <init>(char)>(40);

        r51 = new java.lang.Integer;

        specialinvoke r51.<java.lang.Integer: void <init>(int)>(14);

        virtualinvoke r50.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r49, r51);

        r54 = r0.<JLex.CLexGen: java.util.Hashtable m_tokens>;

        r53 = new java.lang.Character;

        specialinvoke r53.<java.lang.Character: void <init>(char)>(41);

        r55 = new java.lang.Integer;

        specialinvoke r55.<java.lang.Integer: void <init>(int)>(8);

        virtualinvoke r54.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r53, r55);

        r58 = r0.<JLex.CLexGen: java.util.Hashtable m_tokens>;

        r57 = new java.lang.Character;

        specialinvoke r57.<java.lang.Character: void <init>(char)>(42);

        r59 = new java.lang.Integer;

        specialinvoke r59.<java.lang.Integer: void <init>(int)>(9);

        virtualinvoke r58.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r57, r59);

        r62 = r0.<JLex.CLexGen: java.util.Hashtable m_tokens>;

        r61 = new java.lang.Character;

        specialinvoke r61.<java.lang.Character: void <init>(char)>(43);

        r63 = new java.lang.Integer;

        specialinvoke r63.<java.lang.Integer: void <init>(int)>(17);

        virtualinvoke r62.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r61, r63);

        r66 = r0.<JLex.CLexGen: java.util.Hashtable m_tokens>;

        r65 = new java.lang.Character;

        specialinvoke r65.<java.lang.Character: void <init>(char)>(45);

        r67 = new java.lang.Integer;

        specialinvoke r67.<java.lang.Integer: void <init>(int)>(10);

        virtualinvoke r66.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r65, r67);

        r70 = r0.<JLex.CLexGen: java.util.Hashtable m_tokens>;

        r69 = new java.lang.Character;

        specialinvoke r69.<java.lang.Character: void <init>(char)>(46);

        r71 = new java.lang.Integer;

        specialinvoke r71.<java.lang.Integer: void <init>(int)>(2);

        virtualinvoke r70.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r69, r71);

        r74 = r0.<JLex.CLexGen: java.util.Hashtable m_tokens>;

        r73 = new java.lang.Character;

        specialinvoke r73.<java.lang.Character: void <init>(char)>(63);

        r75 = new java.lang.Integer;

        specialinvoke r75.<java.lang.Integer: void <init>(int)>(15);

        virtualinvoke r74.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r73, r75);

        r78 = r0.<JLex.CLexGen: java.util.Hashtable m_tokens>;

        r77 = new java.lang.Character;

        specialinvoke r77.<java.lang.Character: void <init>(char)>(91);

        r79 = new java.lang.Integer;

        specialinvoke r79.<java.lang.Integer: void <init>(int)>(6);

        virtualinvoke r78.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r77, r79);

        r82 = r0.<JLex.CLexGen: java.util.Hashtable m_tokens>;

        r81 = new java.lang.Character;

        specialinvoke r81.<java.lang.Character: void <init>(char)>(93);

        r83 = new java.lang.Integer;

        specialinvoke r83.<java.lang.Integer: void <init>(int)>(5);

        virtualinvoke r82.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r81, r83);

        r86 = r0.<JLex.CLexGen: java.util.Hashtable m_tokens>;

        r85 = new java.lang.Character;

        specialinvoke r85.<java.lang.Character: void <init>(char)>(94);

        r87 = new java.lang.Integer;

        specialinvoke r87.<java.lang.Integer: void <init>(int)>(3);

        virtualinvoke r86.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r85, r87);

        r90 = r0.<JLex.CLexGen: java.util.Hashtable m_tokens>;

        r89 = new java.lang.Character;

        specialinvoke r89.<java.lang.Character: void <init>(char)>(123);

        r91 = new java.lang.Integer;

        specialinvoke r91.<java.lang.Integer: void <init>(int)>(13);

        virtualinvoke r90.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r89, r91);

        r94 = r0.<JLex.CLexGen: java.util.Hashtable m_tokens>;

        r93 = new java.lang.Character;

        specialinvoke r93.<java.lang.Character: void <init>(char)>(124);

        r95 = new java.lang.Integer;

        specialinvoke r95.<java.lang.Integer: void <init>(int)>(16);

        virtualinvoke r94.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r93, r95);

        r98 = r0.<JLex.CLexGen: java.util.Hashtable m_tokens>;

        r97 = new java.lang.Character;

        specialinvoke r97.<java.lang.Character: void <init>(char)>(125);

        r99 = new java.lang.Integer;

        specialinvoke r99.<java.lang.Integer: void <init>(int)>(7);

        virtualinvoke r98.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r97, r99);

        r101 = new JLex.CSpec;

        specialinvoke r101.<JLex.CSpec: void <init>(JLex.CLexGen)>(r0);

        r0.<JLex.CLexGen: JLex.CSpec m_spec> = r101;

        r102 = new JLex.CNfa2Dfa;

        specialinvoke r102.<JLex.CNfa2Dfa: void <init>()>();

        r0.<JLex.CLexGen: JLex.CNfa2Dfa m_nfa2dfa> = r102;

        r103 = new JLex.CMinimize;

        specialinvoke r103.<JLex.CMinimize: void <init>()>();

        r0.<JLex.CLexGen: JLex.CMinimize m_minimize> = r103;

        r104 = new JLex.CMakeNfa;

        specialinvoke r104.<JLex.CMakeNfa: void <init>()>();

        r0.<JLex.CLexGen: JLex.CMakeNfa m_makeNfa> = r104;

        r105 = new JLex.CSimplifyNfa;

        specialinvoke r105.<JLex.CSimplifyNfa: void <init>()>();

        r0.<JLex.CLexGen: JLex.CSimplifyNfa m_simplifyNfa> = r105;

        r106 = new JLex.CEmit;

        specialinvoke r106.<JLex.CEmit: void <init>()>();

        r0.<JLex.CLexGen: JLex.CEmit m_emit> = r106;

        r0.<JLex.CLexGen: boolean m_init_flag> = 1;

        return;
    }

    void generate() throws java.io.IOException, java.io.FileNotFoundException
    {
        JLex.CLexGen r0;
        boolean z0, z1, z2, z3, z4, z5, z6, z7, z8, z9, z10, z11, z12, z13;
        java.io.PrintWriter r1, r11, r15;
        JLex.CInput r2, r6, r8, r18, r20;
        java.util.Hashtable r3;
        JLex.CSpec r4, r5, r7, r9, r10, r12, r14;
        JLex.CEmit r13;
        java.io.PrintStream r16, r17, r19, r21;
        int i0, i1;

        r0 := @this: JLex.CLexGen;

        z0 = r0.<JLex.CLexGen: boolean m_init_flag>;

        if 0 != z0 goto label01;

        staticinvoke <JLex.CError: void parse_error(int,int)>(10, 0);

     label01:
        if null == r0 goto label02;

        z9 = 1;

        goto label03;

     label02:
        z9 = 0;

     label03:
        staticinvoke <JLex.CUtility: void ASSERT(boolean)>(z9);

        r1 = r0.<JLex.CLexGen: java.io.PrintWriter m_outstream>;

        if null == r1 goto label04;

        z10 = 1;

        goto label05;

     label04:
        z10 = 0;

     label05:
        staticinvoke <JLex.CUtility: void ASSERT(boolean)>(z10);

        r2 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        if null == r2 goto label06;

        z11 = 1;

        goto label07;

     label06:
        z11 = 0;

     label07:
        staticinvoke <JLex.CUtility: void ASSERT(boolean)>(z11);

        r3 = r0.<JLex.CLexGen: java.util.Hashtable m_tokens>;

        if null == r3 goto label08;

        z12 = 1;

        goto label09;

     label08:
        z12 = 0;

     label09:
        staticinvoke <JLex.CUtility: void ASSERT(boolean)>(z12);

        r4 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        if null == r4 goto label10;

        z13 = 1;

        goto label11;

     label10:
        z13 = 0;

     label11:
        staticinvoke <JLex.CUtility: void ASSERT(boolean)>(z13);

        z1 = r0.<JLex.CLexGen: boolean m_init_flag>;

        staticinvoke <JLex.CUtility: void ASSERT(boolean)>(z1);

        r5 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        z2 = r5.<JLex.CSpec: boolean m_verbose>;

        if z2 == 0 goto label12;

        r21 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke r21.<java.io.PrintStream: void println(java.lang.String)>("Processing first section -- user code.");

     label12:
        specialinvoke r0.<JLex.CLexGen: void userCode()>();

        r6 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        z3 = r6.<JLex.CInput: boolean m_eof_reached>;

        if z3 == 0 goto label13;

        r20 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i1 = r20.<JLex.CInput: int m_line_number>;

        staticinvoke <JLex.CError: void parse_error(int,int)>(11, i1);

     label13:
        r7 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        z4 = r7.<JLex.CSpec: boolean m_verbose>;

        if z4 == 0 goto label14;

        r19 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke r19.<java.io.PrintStream: void println(java.lang.String)>("Processing second section -- JLex declarations.");

     label14:
        specialinvoke r0.<JLex.CLexGen: void userDeclare()>();

        r8 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        z5 = r8.<JLex.CInput: boolean m_eof_reached>;

        if z5 == 0 goto label15;

        r18 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i0 = r18.<JLex.CInput: int m_line_number>;

        staticinvoke <JLex.CError: void parse_error(int,int)>(11, i0);

     label15:
        r9 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        z6 = r9.<JLex.CSpec: boolean m_verbose>;

        if z6 == 0 goto label16;

        r17 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke r17.<java.io.PrintStream: void println(java.lang.String)>("Processing third section -- lexical rules.");

     label16:
        specialinvoke r0.<JLex.CLexGen: void userRules()>();

        r10 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        z7 = r10.<JLex.CSpec: boolean m_verbose>;

        if z7 == 0 goto label17;

        r16 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke r16.<java.io.PrintStream: void println(java.lang.String)>("Outputting lexical analyzer code.");

     label17:
        r13 = r0.<JLex.CLexGen: JLex.CEmit m_emit>;

        r12 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        r11 = r0.<JLex.CLexGen: java.io.PrintWriter m_outstream>;

        virtualinvoke r13.<JLex.CEmit: void emit(JLex.CSpec,java.io.PrintWriter)>(r12, r11);

        r14 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        z8 = r14.<JLex.CSpec: boolean m_verbose>;

        if z8 == 0 goto label18;

     label18:
        r15 = r0.<JLex.CLexGen: java.io.PrintWriter m_outstream>;

        virtualinvoke r15.<java.io.PrintWriter: void close()>();

        return;
    }

    private void userCode() throws java.io.IOException
    {
        JLex.CLexGen r0;
        boolean z1, z2, z3, z4, z5, z6, z7, z8;
        java.io.PrintWriter r1, r14;
        JLex.CInput r2, r5, r6, r7, r9, r11, r12, r13, r16, r18;
        java.util.Hashtable r3;
        JLex.CSpec r4;
        int i0, i3, i4;
        char[] r8, r10, r17;
        char c1, c2;
        java.lang.String r15;

        r0 := @this: JLex.CLexGen;

        z1 = r0.<JLex.CLexGen: boolean m_init_flag>;

        if 0 != z1 goto label01;

        staticinvoke <JLex.CError: void parse_error(int,int)>(10, 0);

     label01:
        if null == r0 goto label02;

        z3 = 1;

        goto label03;

     label02:
        z3 = 0;

     label03:
        staticinvoke <JLex.CUtility: void ASSERT(boolean)>(z3);

        r1 = r0.<JLex.CLexGen: java.io.PrintWriter m_outstream>;

        if null == r1 goto label04;

        z4 = 1;

        goto label05;

     label04:
        z4 = 0;

     label05:
        staticinvoke <JLex.CUtility: void ASSERT(boolean)>(z4);

        r2 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        if null == r2 goto label06;

        z5 = 1;

        goto label07;

     label06:
        z5 = 0;

     label07:
        staticinvoke <JLex.CUtility: void ASSERT(boolean)>(z5);

        r3 = r0.<JLex.CLexGen: java.util.Hashtable m_tokens>;

        if null == r3 goto label08;

        z6 = 1;

        goto label09;

     label08:
        z6 = 0;

     label09:
        staticinvoke <JLex.CUtility: void ASSERT(boolean)>(z6);

        r4 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        if null == r4 goto label10;

        z7 = 1;

        goto label11;

     label10:
        z7 = 0;

     label11:
        staticinvoke <JLex.CUtility: void ASSERT(boolean)>(z7);

        r5 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        z2 = r5.<JLex.CInput: boolean m_eof_reached>;

        if z2 == 0 goto label12;

        staticinvoke <JLex.CError: void parse_error(int,int)>(11, 0);

     label12:
        r13 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        z8 = virtualinvoke r13.<JLex.CInput: boolean getLine()>();

        if z8 == 0 goto label13;

        staticinvoke <JLex.CError: void parse_error(int,int)>(11, 0);

     label13:
        r6 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i0 = r6.<JLex.CInput: int m_line_read>;

        if 2 > i0 goto label14;

        r7 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r8 = r7.<JLex.CInput: char[] m_line>;

        c1 = r8[0];

        if 37 != c1 goto label14;

        r9 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r10 = r9.<JLex.CInput: char[] m_line>;

        c2 = r10[1];

        if 37 != c2 goto label14;

        r12 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r11 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i3 = r11.<JLex.CInput: int m_line_read>;

        r12.<JLex.CInput: int m_line_index> = i3;

        return;

     label14:
        r14 = r0.<JLex.CLexGen: java.io.PrintWriter m_outstream>;

        r15 = new java.lang.String;

        r16 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r17 = r16.<JLex.CInput: char[] m_line>;

        r18 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i4 = r18.<JLex.CInput: int m_line_read>;

        specialinvoke r15.<java.lang.String: void <init>(char[],int,int)>(r17, 0, i4);

        virtualinvoke r14.<java.io.PrintWriter: void print(java.lang.String)>(r15);

        goto label12;
    }

    private char[] getName()
    {
        JLex.CLexGen r0;
        char[] r1, r10, r13, r16, r19;
        JLex.CInput r2, r3, r4, r5, r6, r7, r8, r9, r11, r12, r14, r15, r17, r18, r20, r21, r22, r23;
        int i0, i1, i2, i3, i4, i5, i6, i8, i10, i11, i13, i15, i16, i17, i18, i19, i20, i21;
        char c7, c9, c12, c14;
        boolean z0, z1, z2;

        r0 := @this: JLex.CLexGen;

     label1:
        r2 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i1 = r2.<JLex.CInput: int m_line_index>;

        r3 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i0 = r3.<JLex.CInput: int m_line_read>;

        if i1 >= i0 goto label2;

        r17 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r19 = r17.<JLex.CInput: char[] m_line>;

        r18 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i13 = r18.<JLex.CInput: int m_line_index>;

        c14 = r19[i13];

        z2 = staticinvoke <JLex.CUtility: boolean isspace(char)>(c14);

        if 1 != z2 goto label2;

        r20 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i15 = r20.<JLex.CInput: int m_line_index>;

        i16 = i15 + 1;

        r20.<JLex.CInput: int m_line_index> = i16;

        goto label1;

     label2:
        r4 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i3 = r4.<JLex.CInput: int m_line_index>;

        r5 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i2 = r5.<JLex.CInput: int m_line_read>;

        if i3 < i2 goto label3;

        staticinvoke <JLex.CError: void parse_error(int,int)>(12, 0);

     label3:
        r6 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i17 = r6.<JLex.CInput: int m_line_index>;

     label4:
        r21 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i18 = r21.<JLex.CInput: int m_line_read>;

        if i17 >= i18 goto label5;

        r15 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r16 = r15.<JLex.CInput: char[] m_line>;

        c12 = r16[i17];

        z1 = staticinvoke <JLex.CUtility: boolean isnewline(char)>(c12);

        if 0 != z1 goto label5;

        i17 = i17 + 1;

        goto label4;

     label5:
        r7 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i4 = r7.<JLex.CInput: int m_line_index>;

        i5 = i17 - i4;

        r1 = newarray (char)[i5];

        i19 = 0;

     label6:
        r22 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i20 = r22.<JLex.CInput: int m_line_index>;

        r23 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i21 = r23.<JLex.CInput: int m_line_read>;

        if i20 >= i21 goto label7;

        r8 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r10 = r8.<JLex.CInput: char[] m_line>;

        r9 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i6 = r9.<JLex.CInput: int m_line_index>;

        c7 = r10[i6];

        z0 = staticinvoke <JLex.CUtility: boolean isnewline(char)>(c7);

        if 0 != z0 goto label7;

        r11 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r13 = r11.<JLex.CInput: char[] m_line>;

        r12 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i8 = r12.<JLex.CInput: int m_line_index>;

        c9 = r13[i8];

        r1[i19] = c9;

        i19 = i19 + 1;

        r14 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i10 = r14.<JLex.CInput: int m_line_index>;

        i11 = i10 + 1;

        r14.<JLex.CInput: int m_line_index> = i11;

        goto label6;

     label7:
        return r1;
    }

    private char[] packCode(char[], char[], char[], int, int) throws java.io.IOException
    {
        JLex.CLexGen r0;
        char[] r1, r2, r4, r8, r12, r23;
        int i0, i1, i2, i3, i4, i5, i6, i7, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, i22, i23;
        JLex.CInput r3, r5, r6, r7, r9, r10, r11, r13, r21, r22, r24, r25, r26, r27;
        char c8;
        boolean z0, z1;
        JLex.CSpec r14, r15, r16, r17, r18, r19, r20;

        r0 := @this: JLex.CLexGen;

        r1 := @parameter0: char[];

        r2 := @parameter1: char[];

        r23 := @parameter2: char[];

        i19 := @parameter3: int;

        i0 := @parameter4: int;

        if 1 == i0 goto label01;

        if 0 == i0 goto label01;

        if 2 == i0 goto label01;

        if 6 == i0 goto label01;

        if 3 == i0 goto label01;

        if 4 == i0 goto label01;

        if 5 != i0 goto label02;

     label01:
        z1 = 1;

        goto label03;

     label02:
        z1 = 0;

     label03:
        staticinvoke <JLex.CUtility: void ASSERT(boolean)>(z1);

        r3 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r4 = r3.<JLex.CInput: char[] m_line>;

        i1 = lengthof r1;

        i2 = i1 - 1;

        i3 = staticinvoke <JLex.CUtility: int charncmp(char[],int,char[],int,int)>(r4, 0, r1, 0, i2);

        if 0 == i3 goto label04;

        staticinvoke <JLex.CError: void parse_error(int,int)>(13, 0);

     label04:
        if null != r23 goto label05;

        r23 = newarray (char)[1024];

        i19 = 0;

     label05:
        i4 = lengthof r23;

        if i19 < i4 goto label06;

        r23 = staticinvoke <JLex.CUtility: char[] doubleSize(char[])>(r23);

     label06:
        r5 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i5 = lengthof r1;

        i6 = i5 - 1;

        r5.<JLex.CInput: int m_line_index> = i6;

     label07:
        r24 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i20 = r24.<JLex.CInput: int m_line_index>;

        r25 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i21 = r25.<JLex.CInput: int m_line_read>;

        if i20 < i21 goto label18;

        r10 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        z0 = virtualinvoke r10.<JLex.CInput: boolean getLine()>();

        if z0 == 0 goto label08;

        r22 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i18 = r22.<JLex.CInput: int m_line_number>;

        staticinvoke <JLex.CError: void parse_error(int,int)>(11, i18);

     label08:
        r11 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r12 = r11.<JLex.CInput: char[] m_line>;

        i12 = lengthof r2;

        i13 = i12 - 1;

        i14 = staticinvoke <JLex.CUtility: int charncmp(char[],int,char[],int,int)>(r12, 0, r2, 0, i13);

        if 0 != i14 goto label07;

        r13 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i15 = lengthof r2;

        i16 = i15 - 1;

        r13.<JLex.CInput: int m_line_index> = i16;

        tableswitch(i0)
        {
            case 0: goto label09;
            case 1: goto label10;
            case 2: goto label11;
            case 3: goto label13;
            case 4: goto label14;
            case 5: goto label15;
            case 6: goto label12;
            default: goto label16;
        };

     label09:
        r14 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        r14.<JLex.CSpec: int m_class_read> = i19;

        goto label17;

     label10:
        r20 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        r20.<JLex.CSpec: int m_init_read> = i19;

        goto label17;

     label11:
        r19 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        r19.<JLex.CSpec: int m_eof_read> = i19;

        goto label17;

     label12:
        r15 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        r15.<JLex.CSpec: int m_eof_value_read> = i19;

        goto label17;

     label13:
        r18 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        r18.<JLex.CSpec: int m_init_throw_read> = i19;

        goto label17;

     label14:
        r17 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        r17.<JLex.CSpec: int m_yylex_throw_read> = i19;

        goto label17;

     label15:
        r16 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        r16.<JLex.CSpec: int m_eof_throw_read> = i19;

        goto label17;

     label16:
        r21 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i17 = r21.<JLex.CInput: int m_line_number>;

        staticinvoke <JLex.CError: void parse_error(int,int)>(13, i17);

     label17:
        return r23;

     label18:
        r26 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i22 = r26.<JLex.CInput: int m_line_index>;

        r27 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i23 = r27.<JLex.CInput: int m_line_read>;

        if i22 >= i23 goto label07;

        r6 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r8 = r6.<JLex.CInput: char[] m_line>;

        r7 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i7 = r7.<JLex.CInput: int m_line_index>;

        c8 = r8[i7];

        r23[i19] = c8;

        i19 = i19 + 1;

        r9 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i9 = r9.<JLex.CInput: int m_line_index>;

        i10 = i9 + 1;

        r9.<JLex.CInput: int m_line_index> = i10;

        i11 = lengthof r23;

        if i19 < i11 goto label18;

        r23 = staticinvoke <JLex.CUtility: char[] doubleSize(char[])>(r23);

        goto label18;
    }

    private void userDeclare() throws java.io.IOException
    {
        JLex.CLexGen r0;
        java.io.PrintWriter r1;
        JLex.CInput r2, r5, r6, r7, r9, r10, r11, r13, r17, r25, r29, r33, r42, r44, r48, r50, r52, r56, r58, r61, r65, r67, r68, r72, r74, r76, r80, r82, r84, r88, r90, r92, r96, r100, r104, r108, r112, r116, r118, r121, r139, r142, r144, r148, r152, r154, r157, r160, r164, r168, r172, r194, r198, r202, r206, r208, r220, r224, r226, r227, r228, r230, r232, r233, r234, r235, r238, r239, r240, r241, r243, r244, r245;
        java.util.Hashtable r3;
        JLex.CSpec r4, r18, r19, r23, r34, r35, r39, r43, r51, r59, r75, r83, r91, r119, r122, r124, r125, r129, r131, r132, r136, r140, r143, r155, r158, r173, r174, r178, r180, r181, r185, r187, r188, r192, r209, r211, r214, r217, r221, r225;
        boolean z0, z1, z2, z3, z4, z5, z6;
        int i0, i2, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, i22, i23, i24, i25, i26, i27, i28, i29, i30, i31, i32, i33, i34, i35, i36, i37, i38, i39, i40, i41, i42, i43, i44, i45, i46, i47, i48, i49, i50, i51, i52, i53, i54, i55, i56, i57, i58, i59, i60, i61, i62, i63, i64, i65, i66, i67, i68, i69, i70, i71, i72, i73, i74, i75, i76, i77, i78, i79, i80, i81, i82, i83, i84, i85, i86, i87, i88, i89, i90, i91, i92, i93, i94, i95, i96, i97, i98, i99, i100, i101, i102, i103, i104, i105, i106, i107, i108, i109, i112, i113, i114, i115, i117, i118;
        char[] r8, r12, r14, r15, r16, r20, r21, r22, r24, r26, r27, r28, r30, r31, r32, r36, r37, r38, r40, r41, r45, r46, r47, r49, r53, r54, r55, r57, r60, r62, r63, r64, r66, r69, r70, r71, r73, r77, r78, r79, r81, r85, r86, r87, r89, r93, r94, r95, r97, r98, r99, r101, r102, r103, r105, r106, r107, r109, r110, r111, r113, r114, r115, r117, r120, r123, r126, r127, r128, r130, r133, r134, r135, r137, r138, r141, r145, r146, r147, r149, r150, r151, r153, r156, r159, r161, r162, r163, r165, r166, r167, r169, r170, r171, r175, r176, r177, r179, r182, r183, r184, r186, r189, r190, r191, r193, r195, r196, r197, r199, r200, r201, r203, r204, r205, r207, r212, r215, r218, r219, r222, r223, r229, r231, r236, r237, r242;
        char c1, c3, c110, c111, c116;
        java.lang.String r210, r213, r216;

        r0 := @this: JLex.CLexGen;

        if null == r0 goto label01;

        z1 = 1;

        goto label02;

     label01:
        z1 = 0;

     label02:
        staticinvoke <JLex.CUtility: void ASSERT(boolean)>(z1);

        r1 = r0.<JLex.CLexGen: java.io.PrintWriter m_outstream>;

        if null == r1 goto label03;

        z2 = 1;

        goto label04;

     label03:
        z2 = 0;

     label04:
        staticinvoke <JLex.CUtility: void ASSERT(boolean)>(z2);

        r2 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        if null == r2 goto label05;

        z3 = 1;

        goto label06;

     label05:
        z3 = 0;

     label06:
        staticinvoke <JLex.CUtility: void ASSERT(boolean)>(z3);

        r3 = r0.<JLex.CLexGen: java.util.Hashtable m_tokens>;

        if null == r3 goto label07;

        z4 = 1;

        goto label08;

     label07:
        z4 = 0;

     label08:
        staticinvoke <JLex.CUtility: void ASSERT(boolean)>(z4);

        r4 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        if null == r4 goto label09;

        z5 = 1;

        goto label10;

     label09:
        z5 = 0;

     label10:
        staticinvoke <JLex.CUtility: void ASSERT(boolean)>(z5);

        r5 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        z0 = r5.<JLex.CInput: boolean m_eof_reached>;

        if z0 == 0 goto label11;

        r243 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i117 = r243.<JLex.CInput: int m_line_number>;

        staticinvoke <JLex.CError: void parse_error(int,int)>(11, i117);

     label11:
        r244 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        z6 = virtualinvoke r244.<JLex.CInput: boolean getLine()>();

        if 0 != z6 goto label54;

        r6 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i0 = r6.<JLex.CInput: int m_line_read>;

        if 2 > i0 goto label14;

        r228 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r229 = r228.<JLex.CInput: char[] m_line>;

        c110 = r229[0];

        if 37 != c110 goto label14;

        r230 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r231 = r230.<JLex.CInput: char[] m_line>;

        c111 = r231[1];

        if 37 != c111 goto label14;

        r232 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i112 = r232.<JLex.CInput: int m_line_read>;

        i113 = i112 - 2;

        r232.<JLex.CInput: int m_line_read> = i113;

        r233 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r237 = r233.<JLex.CInput: char[] m_line>;

        r234 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r236 = r234.<JLex.CInput: char[] m_line>;

        r235 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i114 = r235.<JLex.CInput: int m_line_read>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r237, 2, r236, 0, i114);

        r238 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r238.<JLex.CInput: boolean m_pushback_line> = 1;

        r239 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i115 = r239.<JLex.CInput: int m_line_read>;

        if 0 == i115 goto label12;

        r241 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r242 = r241.<JLex.CInput: char[] m_line>;

        c116 = r242[0];

        if 10 != c116 goto label13;

     label12:
        r240 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r240.<JLex.CInput: boolean m_pushback_line> = 0;

     label13:
        return;

     label14:
        r245 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i118 = r245.<JLex.CInput: int m_line_read>;

        if 0 != i118 goto label15;

        goto label11;

     label15:
        r7 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r8 = r7.<JLex.CInput: char[] m_line>;

        c1 = r8[0];

        if 37 != c1 goto label53;

        r10 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i2 = r10.<JLex.CInput: int m_line_read>;

        if 1 < i2 goto label16;

        r227 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i109 = r227.<JLex.CInput: int m_line_number>;

        staticinvoke <JLex.CError: void parse_error(int,int)>(12, i109);

        goto label11;

     label16:
        r11 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r12 = r11.<JLex.CInput: char[] m_line>;

        c3 = r12[1];

        tableswitch(c3)
        {
            case 99: goto label19;
            case 100: goto label52;
            case 101: goto label23;
            case 102: goto label27;
            case 103: goto label52;
            case 104: goto label52;
            case 105: goto label30;
            case 106: goto label52;
            case 107: goto label52;
            case 108: goto label37;
            case 109: goto label52;
            case 110: goto label39;
            case 111: goto label52;
            case 112: goto label41;
            case 113: goto label52;
            case 114: goto label52;
            case 115: goto label43;
            case 116: goto label45;
            case 117: goto label47;
            case 118: goto label52;
            case 119: goto label52;
            case 120: goto label52;
            case 121: goto label49;
            case 122: goto label52;
            case 123: goto label17;
            default: goto label52;
        };

     label17:
        r13 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r16 = r13.<JLex.CInput: char[] m_line>;

        r15 = r0.<JLex.CLexGen: char[] m_class_code_dir>;

        r14 = r0.<JLex.CLexGen: char[] m_class_code_dir>;

        i4 = lengthof r14;

        i5 = i4 - 1;

        i6 = staticinvoke <JLex.CUtility: int charncmp(char[],int,char[],int,int)>(r16, 0, r15, 0, i5);

        if 0 != i6 goto label18;

        r23 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        r22 = r0.<JLex.CLexGen: char[] m_class_code_dir>;

        r21 = r0.<JLex.CLexGen: char[] m_class_code_end_dir>;

        r18 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        r20 = r18.<JLex.CSpec: char[] m_class_code>;

        r19 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        i8 = r19.<JLex.CSpec: int m_class_read>;

        r24 = specialinvoke r0.<JLex.CLexGen: char[] packCode(char[],char[],char[],int,int)>(r22, r21, r20, i8, 0);

        r23.<JLex.CSpec: char[] m_class_code> = r24;

        goto label11;

     label18:
        r17 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i7 = r17.<JLex.CInput: int m_line_number>;

        staticinvoke <JLex.CError: void parse_error(int,int)>(12, i7);

        goto label11;

     label19:
        r194 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r197 = r194.<JLex.CInput: char[] m_line>;

        r196 = r0.<JLex.CLexGen: char[] m_char_dir>;

        r195 = r0.<JLex.CLexGen: char[] m_char_dir>;

        i95 = lengthof r195;

        i96 = i95 - 1;

        i97 = staticinvoke <JLex.CUtility: int charncmp(char[],int,char[],int,int)>(r197, 0, r196, 0, i96);

        if 0 != i97 goto label20;

        r224 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r223 = r0.<JLex.CLexGen: char[] m_char_dir>;

        i107 = lengthof r223;

        r224.<JLex.CInput: int m_line_index> = i107;

        r225 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        r225.<JLex.CSpec: boolean m_count_chars> = 1;

        goto label11;

     label20:
        r198 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r201 = r198.<JLex.CInput: char[] m_line>;

        r200 = r0.<JLex.CLexGen: char[] m_class_dir>;

        r199 = r0.<JLex.CLexGen: char[] m_class_dir>;

        i98 = lengthof r199;

        i99 = i98 - 1;

        i100 = staticinvoke <JLex.CUtility: int charncmp(char[],int,char[],int,int)>(r201, 0, r200, 0, i99);

        if 0 != i100 goto label21;

        r220 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r219 = r0.<JLex.CLexGen: char[] m_class_dir>;

        i106 = lengthof r219;

        r220.<JLex.CInput: int m_line_index> = i106;

        r221 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        r222 = specialinvoke r0.<JLex.CLexGen: char[] getName()>();

        r221.<JLex.CSpec: char[] m_class_name> = r222;

        goto label11;

     label21:
        r202 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r205 = r202.<JLex.CInput: char[] m_line>;

        r204 = r0.<JLex.CLexGen: char[] m_cup_dir>;

        r203 = r0.<JLex.CLexGen: char[] m_cup_dir>;

        i101 = lengthof r203;

        i102 = i101 - 1;

        i103 = staticinvoke <JLex.CUtility: int charncmp(char[],int,char[],int,int)>(r205, 0, r204, 0, i102);

        if 0 != i103 goto label22;

        r208 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r207 = r0.<JLex.CLexGen: char[] m_cup_dir>;

        i105 = lengthof r207;

        r208.<JLex.CInput: int m_line_index> = i105;

        r209 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        r209.<JLex.CSpec: boolean m_cup_compatible> = 1;

        r211 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        r210 = "java_cup.runtime.Scanner";

        r212 = virtualinvoke r210.<java.lang.String: char[] toCharArray()>();

        r211.<JLex.CSpec: char[] m_implements_name> = r212;

        r214 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        r213 = "next_token";

        r215 = virtualinvoke r213.<java.lang.String: char[] toCharArray()>();

        r214.<JLex.CSpec: char[] m_function_name> = r215;

        r217 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        r216 = "java_cup.runtime.Symbol";

        r218 = virtualinvoke r216.<java.lang.String: char[] toCharArray()>();

        r217.<JLex.CSpec: char[] m_type_name> = r218;

        goto label11;

     label22:
        r206 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i104 = r206.<JLex.CInput: int m_line_number>;

        staticinvoke <JLex.CError: void parse_error(int,int)>(12, i104);

        goto label11;

     label23:
        r160 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r163 = r160.<JLex.CInput: char[] m_line>;

        r162 = r0.<JLex.CLexGen: char[] m_eof_code_dir>;

        r161 = r0.<JLex.CLexGen: char[] m_eof_code_dir>;

        i82 = lengthof r161;

        i83 = i82 - 1;

        i84 = staticinvoke <JLex.CUtility: int charncmp(char[],int,char[],int,int)>(r163, 0, r162, 0, i83);

        if 0 != i84 goto label24;

        r192 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        r191 = r0.<JLex.CLexGen: char[] m_eof_code_dir>;

        r190 = r0.<JLex.CLexGen: char[] m_eof_code_end_dir>;

        r187 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        r189 = r187.<JLex.CSpec: char[] m_eof_code>;

        r188 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        i94 = r188.<JLex.CSpec: int m_eof_read>;

        r193 = specialinvoke r0.<JLex.CLexGen: char[] packCode(char[],char[],char[],int,int)>(r191, r190, r189, i94, 2);

        r192.<JLex.CSpec: char[] m_eof_code> = r193;

        goto label11;

     label24:
        r164 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r167 = r164.<JLex.CInput: char[] m_line>;

        r166 = r0.<JLex.CLexGen: char[] m_eof_value_code_dir>;

        r165 = r0.<JLex.CLexGen: char[] m_eof_value_code_dir>;

        i85 = lengthof r165;

        i86 = i85 - 1;

        i87 = staticinvoke <JLex.CUtility: int charncmp(char[],int,char[],int,int)>(r167, 0, r166, 0, i86);

        if 0 != i87 goto label25;

        r185 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        r184 = r0.<JLex.CLexGen: char[] m_eof_value_code_dir>;

        r183 = r0.<JLex.CLexGen: char[] m_eof_value_code_end_dir>;

        r180 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        r182 = r180.<JLex.CSpec: char[] m_eof_value_code>;

        r181 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        i93 = r181.<JLex.CSpec: int m_eof_value_read>;

        r186 = specialinvoke r0.<JLex.CLexGen: char[] packCode(char[],char[],char[],int,int)>(r184, r183, r182, i93, 6);

        r185.<JLex.CSpec: char[] m_eof_value_code> = r186;

        goto label11;

     label25:
        r168 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r171 = r168.<JLex.CInput: char[] m_line>;

        r170 = r0.<JLex.CLexGen: char[] m_eof_throw_code_dir>;

        r169 = r0.<JLex.CLexGen: char[] m_eof_throw_code_dir>;

        i88 = lengthof r169;

        i89 = i88 - 1;

        i90 = staticinvoke <JLex.CUtility: int charncmp(char[],int,char[],int,int)>(r171, 0, r170, 0, i89);

        if 0 != i90 goto label26;

        r178 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        r177 = r0.<JLex.CLexGen: char[] m_eof_throw_code_dir>;

        r176 = r0.<JLex.CLexGen: char[] m_eof_throw_code_end_dir>;

        r173 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        r175 = r173.<JLex.CSpec: char[] m_eof_throw_code>;

        r174 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        i92 = r174.<JLex.CSpec: int m_eof_throw_read>;

        r179 = specialinvoke r0.<JLex.CLexGen: char[] packCode(char[],char[],char[],int,int)>(r177, r176, r175, i92, 5);

        r178.<JLex.CSpec: char[] m_eof_throw_code> = r179;

        goto label11;

     label26:
        r172 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i91 = r172.<JLex.CInput: int m_line_number>;

        staticinvoke <JLex.CError: void parse_error(int,int)>(12, i91);

        goto label11;

     label27:
        r144 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r147 = r144.<JLex.CInput: char[] m_line>;

        r146 = r0.<JLex.CLexGen: char[] m_function_dir>;

        r145 = r0.<JLex.CLexGen: char[] m_function_dir>;

        i73 = lengthof r145;

        i74 = i73 - 1;

        i75 = staticinvoke <JLex.CUtility: int charncmp(char[],int,char[],int,int)>(r147, 0, r146, 0, i74);

        if 0 != i75 goto label28;

        r157 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r156 = r0.<JLex.CLexGen: char[] m_function_dir>;

        i81 = lengthof r156;

        r157.<JLex.CInput: int m_line_index> = i81;

        r158 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        r159 = specialinvoke r0.<JLex.CLexGen: char[] getName()>();

        r158.<JLex.CSpec: char[] m_function_name> = r159;

        goto label11;

     label28:
        r148 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r151 = r148.<JLex.CInput: char[] m_line>;

        r150 = r0.<JLex.CLexGen: char[] m_full_dir>;

        r149 = r0.<JLex.CLexGen: char[] m_full_dir>;

        i76 = lengthof r149;

        i77 = i76 - 1;

        i78 = staticinvoke <JLex.CUtility: int charncmp(char[],int,char[],int,int)>(r151, 0, r150, 0, i77);

        if 0 != i78 goto label29;

        r154 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r153 = r0.<JLex.CLexGen: char[] m_full_dir>;

        i80 = lengthof r153;

        r154.<JLex.CInput: int m_line_index> = i80;

        r155 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        r155.<JLex.CSpec: int m_dtrans_ncols> = 256;

        goto label11;

     label29:
        r152 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i79 = r152.<JLex.CInput: int m_line_number>;

        staticinvoke <JLex.CError: void parse_error(int,int)>(12, i79);

        goto label11;

     label30:
        r92 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r95 = r92.<JLex.CInput: char[] m_line>;

        r94 = r0.<JLex.CLexGen: char[] m_integer_dir>;

        r93 = r0.<JLex.CLexGen: char[] m_integer_dir>;

        i48 = lengthof r93;

        i49 = i48 - 1;

        i50 = staticinvoke <JLex.CUtility: int charncmp(char[],int,char[],int,int)>(r95, 0, r94, 0, i49);

        if 0 != i50 goto label31;

        r142 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r141 = r0.<JLex.CLexGen: char[] m_integer_dir>;

        i72 = lengthof r141;

        r142.<JLex.CInput: int m_line_index> = i72;

        r143 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        r143.<JLex.CSpec: boolean m_integer_type> = 1;

        goto label11;

     label31:
        r96 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r99 = r96.<JLex.CInput: char[] m_line>;

        r98 = r0.<JLex.CLexGen: char[] m_intwrap_dir>;

        r97 = r0.<JLex.CLexGen: char[] m_intwrap_dir>;

        i51 = lengthof r97;

        i52 = i51 - 1;

        i53 = staticinvoke <JLex.CUtility: int charncmp(char[],int,char[],int,int)>(r99, 0, r98, 0, i52);

        if 0 != i53 goto label32;

        r139 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r138 = r0.<JLex.CLexGen: char[] m_integer_dir>;

        i71 = lengthof r138;

        r139.<JLex.CInput: int m_line_index> = i71;

        r140 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        r140.<JLex.CSpec: boolean m_intwrap_type> = 1;

        goto label11;

     label32:
        r100 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r103 = r100.<JLex.CInput: char[] m_line>;

        r102 = r0.<JLex.CLexGen: char[] m_init_code_dir>;

        r101 = r0.<JLex.CLexGen: char[] m_init_code_dir>;

        i54 = lengthof r101;

        i55 = i54 - 1;

        i56 = staticinvoke <JLex.CUtility: int charncmp(char[],int,char[],int,int)>(r103, 0, r102, 0, i55);

        if 0 != i56 goto label33;

        r136 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        r135 = r0.<JLex.CLexGen: char[] m_init_code_dir>;

        r134 = r0.<JLex.CLexGen: char[] m_init_code_end_dir>;

        r131 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        r133 = r131.<JLex.CSpec: char[] m_init_code>;

        r132 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        i70 = r132.<JLex.CSpec: int m_init_read>;

        r137 = specialinvoke r0.<JLex.CLexGen: char[] packCode(char[],char[],char[],int,int)>(r135, r134, r133, i70, 1);

        r136.<JLex.CSpec: char[] m_init_code> = r137;

        goto label11;

     label33:
        r104 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r107 = r104.<JLex.CInput: char[] m_line>;

        r106 = r0.<JLex.CLexGen: char[] m_init_throw_code_dir>;

        r105 = r0.<JLex.CLexGen: char[] m_init_throw_code_dir>;

        i57 = lengthof r105;

        i58 = i57 - 1;

        i59 = staticinvoke <JLex.CUtility: int charncmp(char[],int,char[],int,int)>(r107, 0, r106, 0, i58);

        if 0 != i59 goto label34;

        r129 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        r128 = r0.<JLex.CLexGen: char[] m_init_throw_code_dir>;

        r127 = r0.<JLex.CLexGen: char[] m_init_throw_code_end_dir>;

        r124 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        r126 = r124.<JLex.CSpec: char[] m_init_throw_code>;

        r125 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        i69 = r125.<JLex.CSpec: int m_init_throw_read>;

        r130 = specialinvoke r0.<JLex.CLexGen: char[] packCode(char[],char[],char[],int,int)>(r128, r127, r126, i69, 3);

        r129.<JLex.CSpec: char[] m_init_throw_code> = r130;

        goto label11;

     label34:
        r108 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r111 = r108.<JLex.CInput: char[] m_line>;

        r110 = r0.<JLex.CLexGen: char[] m_implements_dir>;

        r109 = r0.<JLex.CLexGen: char[] m_implements_dir>;

        i60 = lengthof r109;

        i61 = i60 - 1;

        i62 = staticinvoke <JLex.CUtility: int charncmp(char[],int,char[],int,int)>(r111, 0, r110, 0, i61);

        if 0 != i62 goto label35;

        r121 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r120 = r0.<JLex.CLexGen: char[] m_implements_dir>;

        i68 = lengthof r120;

        r121.<JLex.CInput: int m_line_index> = i68;

        r122 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        r123 = specialinvoke r0.<JLex.CLexGen: char[] getName()>();

        r122.<JLex.CSpec: char[] m_implements_name> = r123;

        goto label11;

     label35:
        r112 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r115 = r112.<JLex.CInput: char[] m_line>;

        r114 = r0.<JLex.CLexGen: char[] m_ignorecase_dir>;

        r113 = r0.<JLex.CLexGen: char[] m_ignorecase_dir>;

        i63 = lengthof r113;

        i64 = i63 - 1;

        i65 = staticinvoke <JLex.CUtility: int charncmp(char[],int,char[],int,int)>(r115, 0, r114, 0, i64);

        if 0 != i65 goto label36;

        r118 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r117 = r0.<JLex.CLexGen: char[] m_ignorecase_dir>;

        i67 = lengthof r117;

        r118.<JLex.CInput: int m_line_index> = i67;

        r119 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        r119.<JLex.CSpec: boolean m_ignorecase> = 1;

        goto label11;

     label36:
        r116 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i66 = r116.<JLex.CInput: int m_line_number>;

        staticinvoke <JLex.CError: void parse_error(int,int)>(12, i66);

        goto label11;

     label37:
        r84 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r87 = r84.<JLex.CInput: char[] m_line>;

        r86 = r0.<JLex.CLexGen: char[] m_line_dir>;

        r85 = r0.<JLex.CLexGen: char[] m_line_dir>;

        i43 = lengthof r85;

        i44 = i43 - 1;

        i45 = staticinvoke <JLex.CUtility: int charncmp(char[],int,char[],int,int)>(r87, 0, r86, 0, i44);

        if 0 != i45 goto label38;

        r90 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r89 = r0.<JLex.CLexGen: char[] m_line_dir>;

        i47 = lengthof r89;

        r90.<JLex.CInput: int m_line_index> = i47;

        r91 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        r91.<JLex.CSpec: boolean m_count_lines> = 1;

        goto label11;

     label38:
        r88 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i46 = r88.<JLex.CInput: int m_line_number>;

        staticinvoke <JLex.CError: void parse_error(int,int)>(12, i46);

        goto label11;

     label39:
        r76 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r79 = r76.<JLex.CInput: char[] m_line>;

        r78 = r0.<JLex.CLexGen: char[] m_notunix_dir>;

        r77 = r0.<JLex.CLexGen: char[] m_notunix_dir>;

        i38 = lengthof r77;

        i39 = i38 - 1;

        i40 = staticinvoke <JLex.CUtility: int charncmp(char[],int,char[],int,int)>(r79, 0, r78, 0, i39);

        if 0 != i40 goto label40;

        r82 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r81 = r0.<JLex.CLexGen: char[] m_notunix_dir>;

        i42 = lengthof r81;

        r82.<JLex.CInput: int m_line_index> = i42;

        r83 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        r83.<JLex.CSpec: boolean m_unix> = 0;

        goto label11;

     label40:
        r80 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i41 = r80.<JLex.CInput: int m_line_number>;

        staticinvoke <JLex.CError: void parse_error(int,int)>(12, i41);

        goto label11;

     label41:
        r68 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r71 = r68.<JLex.CInput: char[] m_line>;

        r70 = r0.<JLex.CLexGen: char[] m_public_dir>;

        r69 = r0.<JLex.CLexGen: char[] m_public_dir>;

        i33 = lengthof r69;

        i34 = i33 - 1;

        i35 = staticinvoke <JLex.CUtility: int charncmp(char[],int,char[],int,int)>(r71, 0, r70, 0, i34);

        if 0 != i35 goto label42;

        r74 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r73 = r0.<JLex.CLexGen: char[] m_public_dir>;

        i37 = lengthof r73;

        r74.<JLex.CInput: int m_line_index> = i37;

        r75 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        r75.<JLex.CSpec: boolean m_public> = 1;

        goto label11;

     label42:
        r72 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i36 = r72.<JLex.CInput: int m_line_number>;

        staticinvoke <JLex.CError: void parse_error(int,int)>(12, i36);

        goto label11;

     label43:
        r61 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r64 = r61.<JLex.CInput: char[] m_line>;

        r63 = r0.<JLex.CLexGen: char[] m_state_dir>;

        r62 = r0.<JLex.CLexGen: char[] m_state_dir>;

        i28 = lengthof r62;

        i29 = i28 - 1;

        i30 = staticinvoke <JLex.CUtility: int charncmp(char[],int,char[],int,int)>(r64, 0, r63, 0, i29);

        if 0 != i30 goto label44;

        r67 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r66 = r0.<JLex.CLexGen: char[] m_state_dir>;

        i32 = lengthof r66;

        r67.<JLex.CInput: int m_line_index> = i32;

        specialinvoke r0.<JLex.CLexGen: void saveStates()>();

        goto label11;

     label44:
        r65 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i31 = r65.<JLex.CInput: int m_line_number>;

        staticinvoke <JLex.CError: void parse_error(int,int)>(12, i31);

        goto label11;

     label45:
        r52 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r55 = r52.<JLex.CInput: char[] m_line>;

        r54 = r0.<JLex.CLexGen: char[] m_type_dir>;

        r53 = r0.<JLex.CLexGen: char[] m_type_dir>;

        i23 = lengthof r53;

        i24 = i23 - 1;

        i25 = staticinvoke <JLex.CUtility: int charncmp(char[],int,char[],int,int)>(r55, 0, r54, 0, i24);

        if 0 != i25 goto label46;

        r58 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r57 = r0.<JLex.CLexGen: char[] m_type_dir>;

        i27 = lengthof r57;

        r58.<JLex.CInput: int m_line_index> = i27;

        r59 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        r60 = specialinvoke r0.<JLex.CLexGen: char[] getName()>();

        r59.<JLex.CSpec: char[] m_type_name> = r60;

        goto label11;

     label46:
        r56 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i26 = r56.<JLex.CInput: int m_line_number>;

        staticinvoke <JLex.CError: void parse_error(int,int)>(12, i26);

        goto label11;

     label47:
        r44 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r47 = r44.<JLex.CInput: char[] m_line>;

        r46 = r0.<JLex.CLexGen: char[] m_unicode_dir>;

        r45 = r0.<JLex.CLexGen: char[] m_unicode_dir>;

        i18 = lengthof r45;

        i19 = i18 - 1;

        i20 = staticinvoke <JLex.CUtility: int charncmp(char[],int,char[],int,int)>(r47, 0, r46, 0, i19);

        if 0 != i20 goto label48;

        r50 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r49 = r0.<JLex.CLexGen: char[] m_unicode_dir>;

        i22 = lengthof r49;

        r50.<JLex.CInput: int m_line_index> = i22;

        r51 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        r51.<JLex.CSpec: int m_dtrans_ncols> = 65536;

        goto label11;

     label48:
        r48 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i21 = r48.<JLex.CInput: int m_line_number>;

        staticinvoke <JLex.CError: void parse_error(int,int)>(12, i21);

        goto label11;

     label49:
        r25 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r28 = r25.<JLex.CInput: char[] m_line>;

        r27 = r0.<JLex.CLexGen: char[] m_yyeof_dir>;

        r26 = r0.<JLex.CLexGen: char[] m_yyeof_dir>;

        i9 = lengthof r26;

        i10 = i9 - 1;

        i11 = staticinvoke <JLex.CUtility: int charncmp(char[],int,char[],int,int)>(r28, 0, r27, 0, i10);

        if 0 != i11 goto label50;

        r42 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r41 = r0.<JLex.CLexGen: char[] m_yyeof_dir>;

        i17 = lengthof r41;

        r42.<JLex.CInput: int m_line_index> = i17;

        r43 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        r43.<JLex.CSpec: boolean m_yyeof> = 1;

        goto label11;

     label50:
        r29 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r32 = r29.<JLex.CInput: char[] m_line>;

        r31 = r0.<JLex.CLexGen: char[] m_yylex_throw_code_dir>;

        r30 = r0.<JLex.CLexGen: char[] m_yylex_throw_code_dir>;

        i12 = lengthof r30;

        i13 = i12 - 1;

        i14 = staticinvoke <JLex.CUtility: int charncmp(char[],int,char[],int,int)>(r32, 0, r31, 0, i13);

        if 0 != i14 goto label51;

        r39 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        r38 = r0.<JLex.CLexGen: char[] m_yylex_throw_code_dir>;

        r37 = r0.<JLex.CLexGen: char[] m_yylex_throw_code_end_dir>;

        r34 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        r36 = r34.<JLex.CSpec: char[] m_yylex_throw_code>;

        r35 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        i16 = r35.<JLex.CSpec: int m_yylex_throw_read>;

        r40 = specialinvoke r0.<JLex.CLexGen: char[] packCode(char[],char[],char[],int,int)>(r38, r37, r36, i16, 4);

        r39.<JLex.CSpec: char[] m_yylex_throw_code> = r40;

        goto label11;

     label51:
        r33 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i15 = r33.<JLex.CInput: int m_line_number>;

        staticinvoke <JLex.CError: void parse_error(int,int)>(12, i15);

        goto label11;

     label52:
        r226 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i108 = r226.<JLex.CInput: int m_line_number>;

        staticinvoke <JLex.CError: void parse_error(int,int)>(12, i108);

        goto label11;

     label53:
        r9 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r9.<JLex.CInput: int m_line_index> = 0;

        specialinvoke r0.<JLex.CLexGen: void saveMacro()>();

        goto label11;

     label54:
        return;
    }

    private void userRules() throws java.io.IOException
    {
        JLex.CLexGen r0;
        boolean z0, z1, z2, z3, z4, z5, z6, z7, z8, z9;
        java.io.PrintWriter r1;
        JLex.CInput r2, r8;
        java.util.Hashtable r3;
        JLex.CSpec r4, r5, r6, r9, r11, r13, r14, r15, r17, r18;
        JLex.CMakeNfa r7, r10;
        JLex.CSimplifyNfa r12;
        int i0;
        JLex.CNfa2Dfa r16;
        JLex.CMinimize r19;
        java.io.PrintStream r20, r21, r22;

        r0 := @this: JLex.CLexGen;

        z0 = r0.<JLex.CLexGen: boolean m_init_flag>;

        if 0 != z0 goto label01;

        staticinvoke <JLex.CError: void parse_error(int,int)>(10, 0);

     label01:
        if null == r0 goto label02;

        z4 = 1;

        goto label03;

     label02:
        z4 = 0;

     label03:
        staticinvoke <JLex.CUtility: void ASSERT(boolean)>(z4);

        r1 = r0.<JLex.CLexGen: java.io.PrintWriter m_outstream>;

        if null == r1 goto label04;

        z5 = 1;

        goto label05;

     label04:
        z5 = 0;

     label05:
        staticinvoke <JLex.CUtility: void ASSERT(boolean)>(z5);

        r2 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        if null == r2 goto label06;

        z6 = 1;

        goto label07;

     label06:
        z6 = 0;

     label07:
        staticinvoke <JLex.CUtility: void ASSERT(boolean)>(z6);

        r3 = r0.<JLex.CLexGen: java.util.Hashtable m_tokens>;

        if null == r3 goto label08;

        z7 = 1;

        goto label09;

     label08:
        z7 = 0;

     label09:
        staticinvoke <JLex.CUtility: void ASSERT(boolean)>(z7);

        r4 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        if null == r4 goto label10;

        z8 = 1;

        goto label11;

     label10:
        z8 = 0;

     label11:
        staticinvoke <JLex.CUtility: void ASSERT(boolean)>(z8);

        r5 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        z1 = r5.<JLex.CSpec: boolean m_verbose>;

        if z1 == 0 goto label12;

        r22 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke r22.<java.io.PrintStream: void println(java.lang.String)>("Creating NFA machine representation.");

     label12:
        r7 = r0.<JLex.CLexGen: JLex.CMakeNfa m_makeNfa>;

        r6 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        virtualinvoke r7.<JLex.CMakeNfa: void allocate_BOL_EOF(JLex.CSpec)>(r6);

        r10 = r0.<JLex.CLexGen: JLex.CMakeNfa m_makeNfa>;

        r9 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        r8 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        virtualinvoke r10.<JLex.CMakeNfa: void thompson(JLex.CLexGen,JLex.CSpec,JLex.CInput)>(r0, r9, r8);

        r12 = r0.<JLex.CLexGen: JLex.CSimplifyNfa m_simplifyNfa>;

        r11 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        virtualinvoke r12.<JLex.CSimplifyNfa: void simplify(JLex.CSpec)>(r11);

        r13 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        i0 = r13.<JLex.CSpec: int m_current_token>;

        if 11 != i0 goto label13;

        z9 = 1;

        goto label14;

     label13:
        z9 = 0;

     label14:
        staticinvoke <JLex.CUtility: void ASSERT(boolean)>(z9);

        r14 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        z2 = r14.<JLex.CSpec: boolean m_verbose>;

        if z2 == 0 goto label15;

        r21 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke r21.<java.io.PrintStream: void println(java.lang.String)>("Creating DFA transition table.");

     label15:
        r16 = r0.<JLex.CLexGen: JLex.CNfa2Dfa m_nfa2dfa>;

        r15 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        virtualinvoke r16.<JLex.CNfa2Dfa: void make_dfa(JLex.CLexGen,JLex.CSpec)>(r0, r15);

        r17 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        z3 = r17.<JLex.CSpec: boolean m_verbose>;

        if z3 == 0 goto label16;

        r20 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke r20.<java.io.PrintStream: void println(java.lang.String)>("Minimizing DFA transition table.");

     label16:
        r19 = r0.<JLex.CLexGen: JLex.CMinimize m_minimize>;

        r18 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        virtualinvoke r19.<JLex.CMinimize: void min_dfa(JLex.CSpec)>(r18);

        return;
    }

    private void printccl(JLex.CSet)
    {
        JLex.CLexGen r0;
        JLex.CSet r1;
        java.io.PrintStream r2, r4, r5;
        JLex.CSpec r3;
        int i0, i1;
        boolean z0;
        java.lang.String r6;

        r0 := @this: JLex.CLexGen;

        r1 := @parameter0: JLex.CSet;

        r2 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke r2.<java.io.PrintStream: void print(java.lang.String)>(" [");

        i1 = 0;

     label1:
        r3 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        i0 = r3.<JLex.CSpec: int m_dtrans_ncols>;

        if i1 >= i0 goto label3;

        z0 = virtualinvoke r1.<JLex.CSet: boolean contains(int)>(i1);

        if z0 == 0 goto label2;

        r5 = <java.lang.System: java.io.PrintStream out>;

        r6 = specialinvoke r0.<JLex.CLexGen: java.lang.String interp_int(int)>(i1);

        virtualinvoke r5.<java.io.PrintStream: void print(java.lang.String)>(r6);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        r4 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke r4.<java.io.PrintStream: void print(char)>(93);

        return;
    }

    private java.lang.String plab(JLex.CNfa)
    {
        JLex.CLexGen r0;
        JLex.CNfa r1;
        int i0;
        JLex.CSpec r2;
        java.util.Vector r3;
        java.lang.Integer r4;
        java.lang.String r5, r6;

        r0 := @this: JLex.CLexGen;

        r1 := @parameter0: JLex.CNfa;

        if null != r1 goto label1;

        r6 = new java.lang.String;

        specialinvoke r6.<java.lang.String: void <init>(java.lang.String)>("--");

        return r6;

     label1:
        r2 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        r3 = r2.<JLex.CSpec: java.util.Vector m_nfa_states>;

        i0 = virtualinvoke r3.<java.util.Vector: int indexOf(java.lang.Object)>(r1);

        r4 = new java.lang.Integer;

        specialinvoke r4.<java.lang.Integer: void <init>(int)>(i0);

        r5 = virtualinvoke r4.<java.lang.Integer: java.lang.String toString()>();

        return r5;
    }

    private java.lang.String interp_int(int)
    {
        JLex.CLexGen r0;
        int i0;
        java.lang.String r1, r2, r3, r4, r5, r6, r8;
        java.lang.Character r7;
        char c1;

        r0 := @this: JLex.CLexGen;

        i0 := @parameter0: int;

        lookupswitch(i0)
        {
            case 8: goto label1;
            case 9: goto label2;
            case 10: goto label3;
            case 12: goto label4;
            case 13: goto label5;
            case 32: goto label6;
            default: goto label7;
        };

     label1:
        r6 = new java.lang.String;

        specialinvoke r6.<java.lang.String: void <init>(java.lang.String)>("\\b");

        return r6;

     label2:
        r5 = new java.lang.String;

        specialinvoke r5.<java.lang.String: void <init>(java.lang.String)>("\\t");

        return r5;

     label3:
        r4 = new java.lang.String;

        specialinvoke r4.<java.lang.String: void <init>(java.lang.String)>("\\n");

        return r4;

     label4:
        r3 = new java.lang.String;

        specialinvoke r3.<java.lang.String: void <init>(java.lang.String)>("\\f");

        return r3;

     label5:
        r2 = new java.lang.String;

        specialinvoke r2.<java.lang.String: void <init>(java.lang.String)>("\\r");

        return r2;

     label6:
        r1 = new java.lang.String;

        specialinvoke r1.<java.lang.String: void <init>(java.lang.String)>("\\ ");

        return r1;

     label7:
        r7 = new java.lang.Character;

        c1 = (char) i0;

        specialinvoke r7.<java.lang.Character: void <init>(char)>(c1);

        r8 = virtualinvoke r7.<java.lang.Character: java.lang.String toString()>();

        return r8;
    }

    void print_nfa()
    {
        JLex.CLexGen r0;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12;
        java.util.Enumeration r1;
        java.lang.Integer r2;
        java.lang.String r3, r19, r22, r38, r45, r48, r54, r56, r61, r63, r71, r78, r84, r86, r89, r90;
        java.io.PrintStream r4, r9, r15, r23, r27, r33, r43, r51, r58, r67, r79, r80, r82, r87, r91;
        JLex.CSpec r5, r7, r11, r24, r28, r34, r39;
        java.util.Vector r6, r26, r30, r35, r40;
        java.util.Hashtable r8, r12;
        boolean z0, z1, z2;
        java.lang.Object r10, r13, r31, r41;
        java.lang.StringBuilder r14, r16, r17, r18, r20, r21, r32, r36, r37, r42, r44, r46, r47, r50, r52, r55, r57, r59, r62, r66, r68, r69, r70, r75, r76, r77, r81, r83, r85;
        java.util.Vector[] r25, r29;
        JLex.CNfa r49, r53, r60, r88, r92;
        JLex.CSet r64;
        JLex.CAccept r65, r72, r73;
        char[] r74;

        r0 := @this: JLex.CLexGen;

        r4 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke r4.<java.io.PrintStream: void println(java.lang.String)>("--------------------- NFA -----------------------");

        r5 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        r6 = r5.<JLex.CSpec: java.util.Vector m_nfa_states>;

        i0 = virtualinvoke r6.<java.util.Vector: int size()>();

        i11 = 0;

     label01:
        if i11 >= i0 goto label13;

        r39 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        r40 = r39.<JLex.CSpec: java.util.Vector m_nfa_states>;

        r41 = virtualinvoke r40.<java.util.Vector: java.lang.Object elementAt(int)>(i11);

        r88 = (JLex.CNfa) r41;

        r43 = <java.lang.System: java.io.PrintStream out>;

        r42 = new java.lang.StringBuilder;

        specialinvoke r42.<java.lang.StringBuilder: void <init>()>();

        r44 = virtualinvoke r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Nfa state ");

        r45 = specialinvoke r0.<JLex.CLexGen: java.lang.String plab(JLex.CNfa)>(r88);

        r46 = virtualinvoke r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r45);

        r47 = virtualinvoke r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        r48 = virtualinvoke r47.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r43.<java.io.PrintStream: void print(java.lang.String)>(r48);

        r49 = r88.<JLex.CNfa: JLex.CNfa m_next>;

        if null != r49 goto label02;

        r87 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke r87.<java.io.PrintStream: void print(java.lang.String)>("(TERMINAL)");

        goto label06;

     label02:
        r51 = <java.lang.System: java.io.PrintStream out>;

        r50 = new java.lang.StringBuilder;

        specialinvoke r50.<java.lang.StringBuilder: void <init>()>();

        r52 = virtualinvoke r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("--> ");

        r53 = r88.<JLex.CNfa: JLex.CNfa m_next>;

        r54 = specialinvoke r0.<JLex.CLexGen: java.lang.String plab(JLex.CNfa)>(r53);

        r55 = virtualinvoke r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r54);

        r56 = virtualinvoke r55.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r51.<java.io.PrintStream: void print(java.lang.String)>(r56);

        r58 = <java.lang.System: java.io.PrintStream out>;

        r57 = new java.lang.StringBuilder;

        specialinvoke r57.<java.lang.StringBuilder: void <init>()>();

        r59 = virtualinvoke r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("--> ");

        r60 = r88.<JLex.CNfa: JLex.CNfa m_next2>;

        r61 = specialinvoke r0.<JLex.CLexGen: java.lang.String plab(JLex.CNfa)>(r60);

        r62 = virtualinvoke r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r61);

        r63 = virtualinvoke r62.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r58.<java.io.PrintStream: void print(java.lang.String)>(r63);

        i4 = r88.<JLex.CNfa: int m_edge>;

        lookupswitch(i4)
        {
            case -3: goto label04;
            case -1: goto label03;
            default: goto label05;
        };

     label03:
        r64 = r88.<JLex.CNfa: JLex.CSet m_set>;

        specialinvoke r0.<JLex.CLexGen: void printccl(JLex.CSet)>(r64);

        goto label06;

     label04:
        r80 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke r80.<java.io.PrintStream: void print(java.lang.String)>(" EPSILON ");

        goto label06;

     label05:
        r82 = <java.lang.System: java.io.PrintStream out>;

        r81 = new java.lang.StringBuilder;

        specialinvoke r81.<java.lang.StringBuilder: void <init>()>();

        r83 = virtualinvoke r81.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        i10 = r88.<JLex.CNfa: int m_edge>;

        r84 = specialinvoke r0.<JLex.CLexGen: java.lang.String interp_int(int)>(i10);

        r85 = virtualinvoke r83.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r84);

        r86 = virtualinvoke r85.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r82.<java.io.PrintStream: void print(java.lang.String)>(r86);

     label06:
        if 0 != i11 goto label07;

        r79 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke r79.<java.io.PrintStream: void print(java.lang.String)>(" (START STATE)");

     label07:
        r65 = r88.<JLex.CNfa: JLex.CAccept m_accept>;

        if null == r65 goto label12;

        r67 = <java.lang.System: java.io.PrintStream out>;

        r66 = new java.lang.StringBuilder;

        specialinvoke r66.<java.lang.StringBuilder: void <init>()>();

        r68 = virtualinvoke r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" accepting ");

        i5 = r88.<JLex.CNfa: int m_anchor>;

        i6 = i5 & 1;

        if 0 == i6 goto label08;

        r89 = "^";

        goto label09;

     label08:
        r89 = "";

     label09:
        r69 = virtualinvoke r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r89);

        r70 = virtualinvoke r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<");

        r71 = new java.lang.String;

        r72 = r88.<JLex.CNfa: JLex.CAccept m_accept>;

        r74 = r72.<JLex.CAccept: char[] m_action>;

        r73 = r88.<JLex.CNfa: JLex.CAccept m_accept>;

        i7 = r73.<JLex.CAccept: int m_action_read>;

        specialinvoke r71.<java.lang.String: void <init>(char[],int,int)>(r74, 0, i7);

        r75 = virtualinvoke r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r71);

        r76 = virtualinvoke r75.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

        i8 = r88.<JLex.CNfa: int m_anchor>;

        i9 = i8 & 2;

        if 0 == i9 goto label10;

        r90 = "$";

        goto label11;

     label10:
        r90 = "";

     label11:
        r77 = virtualinvoke r76.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r90);

        r78 = virtualinvoke r77.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r67.<java.io.PrintStream: void print(java.lang.String)>(r78);

     label12:
        r91 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke r91.<java.io.PrintStream: void println()>();

        i11 = i11 + 1;

        goto label01;

     label13:
        r7 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        r8 = r7.<JLex.CSpec: java.util.Hashtable m_states>;

        r1 = virtualinvoke r8.<java.util.Hashtable: java.util.Enumeration keys()>();

     label14:
        z0 = interfaceinvoke r1.<java.util.Enumeration: boolean hasMoreElements()>();

        if z0 == 0 goto label21;

        r10 = interfaceinvoke r1.<java.util.Enumeration: java.lang.Object nextElement()>();

        r3 = (java.lang.String) r10;

        r11 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        r12 = r11.<JLex.CSpec: java.util.Hashtable m_states>;

        r13 = virtualinvoke r12.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r3);

        r2 = (java.lang.Integer) r13;

        if null == r3 goto label15;

        z1 = 1;

        goto label16;

     label15:
        z1 = 0;

     label16:
        staticinvoke <JLex.CUtility: void ASSERT(boolean)>(z1);

        if null == r2 goto label17;

        z2 = 1;

        goto label18;

     label17:
        z2 = 0;

     label18:
        staticinvoke <JLex.CUtility: void ASSERT(boolean)>(z2);

        r15 = <java.lang.System: java.io.PrintStream out>;

        r14 = new java.lang.StringBuilder;

        specialinvoke r14.<java.lang.StringBuilder: void <init>()>();

        r16 = virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("State \"");

        r17 = virtualinvoke r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        r18 = virtualinvoke r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" has identifying index ");

        r19 = virtualinvoke r2.<java.lang.Integer: java.lang.String toString()>();

        r20 = virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r19);

        r21 = virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        r22 = virtualinvoke r21.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r15.<java.io.PrintStream: void println(java.lang.String)>(r22);

        r23 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke r23.<java.io.PrintStream: void print(java.lang.String)>("\tStart states of matching rules: ");

        i1 = virtualinvoke r2.<java.lang.Integer: int intValue()>();

        r24 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        r25 = r24.<JLex.CSpec: java.util.Vector[] m_state_rules>;

        r26 = r25[i1];

        i2 = virtualinvoke r26.<java.util.Vector: int size()>();

        i12 = 0;

     label19:
        if i12 >= i2 goto label20;

        r28 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        r29 = r28.<JLex.CSpec: java.util.Vector[] m_state_rules>;

        r30 = r29[i1];

        r31 = virtualinvoke r30.<java.util.Vector: java.lang.Object elementAt(int)>(i12);

        r92 = (JLex.CNfa) r31;

        r33 = <java.lang.System: java.io.PrintStream out>;

        r32 = new java.lang.StringBuilder;

        specialinvoke r32.<java.lang.StringBuilder: void <init>()>();

        r34 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        r35 = r34.<JLex.CSpec: java.util.Vector m_nfa_states>;

        i3 = virtualinvoke r35.<java.util.Vector: int indexOf(java.lang.Object)>(r92);

        r36 = virtualinvoke r32.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        r37 = virtualinvoke r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        r38 = virtualinvoke r37.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r33.<java.io.PrintStream: void print(java.lang.String)>(r38);

        i12 = i12 + 1;

        goto label19;

     label20:
        r27 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke r27.<java.io.PrintStream: void println()>();

        goto label14;

     label21:
        r9 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke r9.<java.io.PrintStream: void println(java.lang.String)>("-------------------- NFA ----------------------");

        return;
    }

    JLex.SparseBitSet getStates() throws java.io.IOException
    {
        JLex.CLexGen r0;
        int i0, i1, i2, i3, i5, i6, i7, i8, i9, i11, i12, i13, i15, i17, i18, i19, i21, i23, i24, i25, i26, i27, i28, i29, i30, i31, i32, i33, i34, i35, i36, i37, i38, i39, i40, i41, i43, i44, i45, i47, i48;
        java.lang.Integer r2;
        java.io.PrintWriter r3;
        JLex.CInput r4, r7, r8, r11, r12, r18, r20, r21, r23, r24, r25, r27, r28, r29, r36, r37, r38, r40, r41, r43, r44, r45, r46, r47, r48, r49, r50, r51, r52, r53, r54, r55, r56, r57, r58, r59, r60, r62, r64, r65, r66, r68, r69, r71;
        java.util.Hashtable r5, r16, r74;
        JLex.CSpec r6, r15, r73;
        char[] r9, r22, r26, r30, r39, r42, r61, r67, r72;
        char c4, c10, c14, c16, c20, c22, c42, c46;
        JLex.SparseBitSet r10, r13, r14, r17, r19;
        boolean z0, z1, z2, z3, z4, z5, z6, z7, z8, z9, z10;
        java.lang.StringBuilder r31, r33, r34;
        java.io.PrintStream r32;
        java.lang.String r35, r70;
        java.lang.Object r75;

        r0 := @this: JLex.CLexGen;

        if null == r0 goto label01;

        z4 = 1;

        goto label02;

     label01:
        z4 = 0;

     label02:
        staticinvoke <JLex.CUtility: void ASSERT(boolean)>(z4);

        r3 = r0.<JLex.CLexGen: java.io.PrintWriter m_outstream>;

        if null == r3 goto label03;

        z5 = 1;

        goto label04;

     label03:
        z5 = 0;

     label04:
        staticinvoke <JLex.CUtility: void ASSERT(boolean)>(z5);

        r4 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        if null == r4 goto label05;

        z6 = 1;

        goto label06;

     label05:
        z6 = 0;

     label06:
        staticinvoke <JLex.CUtility: void ASSERT(boolean)>(z6);

        r5 = r0.<JLex.CLexGen: java.util.Hashtable m_tokens>;

        if null == r5 goto label07;

        z7 = 1;

        goto label08;

     label07:
        z7 = 0;

     label08:
        staticinvoke <JLex.CUtility: void ASSERT(boolean)>(z7);

        r6 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        if null == r6 goto label09;

        z8 = 1;

        goto label10;

     label09:
        z8 = 0;

     label10:
        staticinvoke <JLex.CUtility: void ASSERT(boolean)>(z8);

     label11:
        r60 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r61 = r60.<JLex.CInput: char[] m_line>;

        r62 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i41 = r62.<JLex.CInput: int m_line_index>;

        c42 = r61[i41];

        z9 = staticinvoke <JLex.CUtility: boolean isspace(char)>(c42);

        if z9 == 0 goto label13;

        r56 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i37 = r56.<JLex.CInput: int m_line_index>;

        i38 = i37 + 1;

        r56.<JLex.CInput: int m_line_index> = i38;

     label12:
        r57 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i40 = r57.<JLex.CInput: int m_line_index>;

        r58 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i39 = r58.<JLex.CInput: int m_line_read>;

        if i40 < i39 goto label11;

        r59 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        z3 = virtualinvoke r59.<JLex.CInput: boolean getLine()>();

        if z3 == 0 goto label12;

        return null;

     label13:
        r7 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r9 = r7.<JLex.CInput: char[] m_line>;

        r8 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i3 = r8.<JLex.CInput: int m_line_index>;

        c4 = r9[i3];

        if 60 != c4 goto label25;

        r18 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i7 = r18.<JLex.CInput: int m_line_index>;

        i8 = i7 + 1;

        r18.<JLex.CInput: int m_line_index> = i8;

        r19 = new JLex.SparseBitSet;

        specialinvoke r19.<JLex.SparseBitSet: void <init>()>();

     label14:
        r64 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i43 = r64.<JLex.CInput: int m_line_index>;

        r65 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i44 = r65.<JLex.CInput: int m_line_read>;

        if i43 < i44 goto label15;

        r54 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        z2 = virtualinvoke r54.<JLex.CInput: boolean getLine()>();

        if z2 == 0 goto label14;

        r55 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i36 = r55.<JLex.CInput: int m_line_number>;

        staticinvoke <JLex.CError: void parse_error(int,int)>(11, i36);

        return r19;

     label15:
        r66 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r67 = r66.<JLex.CInput: char[] m_line>;

        r68 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i45 = r68.<JLex.CInput: int m_line_index>;

        c46 = r67[i45];

        z10 = staticinvoke <JLex.CUtility: boolean isspace(char)>(c46);

        if z10 == 0 goto label17;

        r49 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i31 = r49.<JLex.CInput: int m_line_index>;

        i32 = i31 + 1;

        r49.<JLex.CInput: int m_line_index> = i32;

     label16:
        r50 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i34 = r50.<JLex.CInput: int m_line_index>;

        r51 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i33 = r51.<JLex.CInput: int m_line_read>;

        if i34 < i33 goto label15;

        r52 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        z1 = virtualinvoke r52.<JLex.CInput: boolean getLine()>();

        if z1 == 0 goto label16;

        r53 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i35 = r53.<JLex.CInput: int m_line_number>;

        staticinvoke <JLex.CError: void parse_error(int,int)>(11, i35);

        return r19;

     label17:
        r20 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r22 = r20.<JLex.CInput: char[] m_line>;

        r21 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i9 = r21.<JLex.CInput: int m_line_index>;

        c10 = r22[i9];

        if 44 == c10 goto label18;

        goto label19;

     label18:
        r23 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i11 = r23.<JLex.CInput: int m_line_index>;

        i12 = i11 + 1;

        r23.<JLex.CInput: int m_line_index> = i12;

        goto label15;

     label19:
        r24 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r26 = r24.<JLex.CInput: char[] m_line>;

        r25 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i13 = r25.<JLex.CInput: int m_line_index>;

        c14 = r26[i13];

        if 62 != c14 goto label21;

        r46 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i27 = r46.<JLex.CInput: int m_line_index>;

        i28 = i27 + 1;

        r46.<JLex.CInput: int m_line_index> = i28;

        r47 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i30 = r47.<JLex.CInput: int m_line_index>;

        r48 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i29 = r48.<JLex.CInput: int m_line_read>;

        if i30 >= i29 goto label20;

        r0.<JLex.CLexGen: boolean m_advance_stop> = 1;

     label20:
        return r19;

     label21:
        r27 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i0 = r27.<JLex.CInput: int m_line_index>;

     label22:
        r28 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r30 = r28.<JLex.CInput: char[] m_line>;

        r29 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i15 = r29.<JLex.CInput: int m_line_index>;

        c16 = r30[i15];

        z0 = staticinvoke <JLex.CUtility: boolean isspace(char)>(c16);

        if 0 != z0 goto label23;

        r37 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r39 = r37.<JLex.CInput: char[] m_line>;

        r38 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i19 = r38.<JLex.CInput: int m_line_index>;

        c20 = r39[i19];

        if 44 == c20 goto label23;

        r40 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r42 = r40.<JLex.CInput: char[] m_line>;

        r41 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i21 = r41.<JLex.CInput: int m_line_index>;

        c22 = r42[i21];

        if 62 == c22 goto label23;

        r43 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i23 = r43.<JLex.CInput: int m_line_index>;

        i24 = i23 + 1;

        r43.<JLex.CInput: int m_line_index> = i24;

        r44 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i26 = r44.<JLex.CInput: int m_line_index>;

        r45 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i25 = r45.<JLex.CInput: int m_line_read>;

        if i26 < i25 goto label22;

        goto label23;

     label23:
        r69 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i47 = r69.<JLex.CInput: int m_line_index>;

        i1 = i47 - i0;

        r70 = new java.lang.String;

        r71 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r72 = r71.<JLex.CInput: char[] m_line>;

        specialinvoke r70.<java.lang.String: void <init>(char[],int,int)>(r72, i0, i1);

        r73 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        r74 = r73.<JLex.CSpec: java.util.Hashtable m_states>;

        r75 = virtualinvoke r74.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r70);

        r2 = (java.lang.Integer) r75;

        if null != r2 goto label24;

        r32 = <java.lang.System: java.io.PrintStream out>;

        r31 = new java.lang.StringBuilder;

        specialinvoke r31.<java.lang.StringBuilder: void <init>()>();

        r33 = virtualinvoke r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Uninitialized State Name: ");

        r34 = virtualinvoke r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r70);

        r35 = virtualinvoke r34.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r32.<java.io.PrintStream: void println(java.lang.String)>(r35);

        r36 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i18 = r36.<JLex.CInput: int m_line_number>;

        staticinvoke <JLex.CError: void parse_error(int,int)>(14, i18);

     label24:
        i17 = virtualinvoke r2.<java.lang.Integer: int intValue()>();

        virtualinvoke r19.<JLex.SparseBitSet: void set(int)>(i17);

        goto label14;

     label25:
        r10 = r0.<JLex.CLexGen: JLex.SparseBitSet all_states>;

        if null != r10 goto label27;

        r14 = new JLex.SparseBitSet;

        specialinvoke r14.<JLex.SparseBitSet: void <init>()>();

        r0.<JLex.CLexGen: JLex.SparseBitSet all_states> = r14;

        r15 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        r16 = r15.<JLex.CSpec: java.util.Hashtable m_states>;

        i2 = virtualinvoke r16.<java.util.Hashtable: int size()>();

        i48 = 0;

     label26:
        if i48 >= i2 goto label27;

        r17 = r0.<JLex.CLexGen: JLex.SparseBitSet all_states>;

        virtualinvoke r17.<JLex.SparseBitSet: void set(int)>(i48);

        i48 = i48 + 1;

        goto label26;

     label27:
        r11 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i6 = r11.<JLex.CInput: int m_line_index>;

        r12 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i5 = r12.<JLex.CInput: int m_line_read>;

        if i6 >= i5 goto label28;

        r0.<JLex.CLexGen: boolean m_advance_stop> = 1;

     label28:
        r13 = r0.<JLex.CLexGen: JLex.SparseBitSet all_states>;

        return r13;
    }

    private boolean expandMacro()
    {
        JLex.CLexGen r0;
        int i0, i1, i2, i3, i4, i6, i7, i9, i10, i11, i13, i15, i17, i18, i19, i20, i21, i22, i23, i24, i25, i26, i27;
        java.lang.String r1, r15, r34, r41;
        java.io.PrintWriter r3;
        JLex.CInput r4, r7, r8, r10, r11, r12, r13, r16, r21, r23, r24, r25, r27, r35, r36, r39, r42, r44;
        java.util.Hashtable r5, r19;
        JLex.CSpec r6, r18;
        char[] r9, r14, r17, r22, r26, r28, r43;
        char c5, c8, c12, c14, c16;
        java.lang.Object r20;
        java.lang.StringBuilder r29, r31, r32, r33, r37, r38, r40;
        java.io.PrintStream r30;
        boolean z0, z1, z2, z3, z4, z5, z6;

        r0 := @this: JLex.CLexGen;

        if null == r0 goto label01;

        z0 = 1;

        goto label02;

     label01:
        z0 = 0;

     label02:
        staticinvoke <JLex.CUtility: void ASSERT(boolean)>(z0);

        r3 = r0.<JLex.CLexGen: java.io.PrintWriter m_outstream>;

        if null == r3 goto label03;

        z1 = 1;

        goto label04;

     label03:
        z1 = 0;

     label04:
        staticinvoke <JLex.CUtility: void ASSERT(boolean)>(z1);

        r4 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        if null == r4 goto label05;

        z2 = 1;

        goto label06;

     label05:
        z2 = 0;

     label06:
        staticinvoke <JLex.CUtility: void ASSERT(boolean)>(z2);

        r5 = r0.<JLex.CLexGen: java.util.Hashtable m_tokens>;

        if null == r5 goto label07;

        z3 = 1;

        goto label08;

     label07:
        z3 = 0;

     label08:
        staticinvoke <JLex.CUtility: void ASSERT(boolean)>(z3);

        r6 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        if null == r6 goto label09;

        z4 = 1;

        goto label10;

     label09:
        z4 = 0;

     label10:
        staticinvoke <JLex.CUtility: void ASSERT(boolean)>(z4);

        r7 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r9 = r7.<JLex.CInput: char[] m_line>;

        r8 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i4 = r8.<JLex.CInput: int m_line_index>;

        c5 = r9[i4];

        if 123 == c5 goto label11;

        r42 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i21 = r42.<JLex.CInput: int m_line_number>;

        staticinvoke <JLex.CError: void parse_error(int,int)>(13, i21);

        return 0;

     label11:
        r10 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i0 = r10.<JLex.CInput: int m_line_index>;

        r11 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i6 = r11.<JLex.CInput: int m_line_index>;

        i22 = i6 + 1;

        r12 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i7 = r12.<JLex.CInput: int m_line_read>;

        if i22 < i7 goto label12;

        staticinvoke <JLex.CError: void impos(java.lang.String)>("Unfinished macro name");

        return 0;

     label12:
        i2 = i22;

     label13:
        r13 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r14 = r13.<JLex.CInput: char[] m_line>;

        c8 = r14[i22];

        if 125 == c8 goto label14;

        i22 = i22 + 1;

        r36 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i19 = r36.<JLex.CInput: int m_line_read>;

        if i22 < i19 goto label13;

        r37 = new java.lang.StringBuilder;

        specialinvoke r37.<java.lang.StringBuilder: void <init>()>();

        r38 = virtualinvoke r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unfinished macro name at line ");

        r39 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i20 = r39.<JLex.CInput: int m_line_number>;

        r40 = virtualinvoke r38.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i20);

        r41 = virtualinvoke r40.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <JLex.CError: void impos(java.lang.String)>(r41);

        return 0;

     label14:
        i3 = i22 - i2;

        i1 = i22;

        if 0 != i3 goto label15;

        staticinvoke <JLex.CError: void impos(java.lang.String)>("Nonexistent macro name");

        return 0;

     label15:
        if 0 >= i3 goto label16;

        z5 = 1;

        goto label17;

     label16:
        z5 = 0;

     label17:
        staticinvoke <JLex.CUtility: void ASSERT(boolean)>(z5);

        r15 = new java.lang.String;

        r16 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r17 = r16.<JLex.CInput: char[] m_line>;

        specialinvoke r15.<java.lang.String: void <init>(char[],int,int)>(r17, i2, i3);

        r18 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        r19 = r18.<JLex.CSpec: java.util.Hashtable m_macros>;

        r20 = virtualinvoke r19.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r15);

        r1 = (java.lang.String) r20;

        if null != r1 goto label18;

        r30 = <java.lang.System: java.io.PrintStream out>;

        r29 = new java.lang.StringBuilder;

        specialinvoke r29.<java.lang.StringBuilder: void <init>()>();

        r31 = virtualinvoke r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: Undefined macro \"");

        r32 = virtualinvoke r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r15);

        r33 = virtualinvoke r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\".");

        r34 = virtualinvoke r33.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r30.<java.io.PrintStream: void println(java.lang.String)>(r34);

        r35 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i18 = r35.<JLex.CInput: int m_line_number>;

        staticinvoke <JLex.CError: void parse_error(int,int)>(8, i18);

        return 0;

     label18:
        r21 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r22 = r21.<JLex.CInput: char[] m_line>;

        i9 = lengthof r22;

        r43 = newarray (char)[i9];

        i23 = 0;

     label19:
        if i23 >= i0 goto label22;

        r27 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r28 = r27.<JLex.CInput: char[] m_line>;

        c16 = r28[i23];

        r43[i23] = c16;

        i17 = lengthof r43;

        if i23 >= i17 goto label20;

        z6 = 1;

        goto label21;

     label20:
        z6 = 0;

     label21:
        staticinvoke <JLex.CUtility: void ASSERT(boolean)>(z6);

        i23 = i23 + 1;

        goto label19;

     label22:
        i10 = lengthof r43;

        if i23 < i10 goto label23;

        r43 = staticinvoke <JLex.CUtility: char[] doubleSize(char[])>(r43);

     label23:
        i24 = 0;

     label24:
        i25 = virtualinvoke r1.<java.lang.String: int length()>();

        if i24 >= i25 goto label26;

        c14 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i24);

        r43[i23] = c14;

        i23 = i23 + 1;

        i15 = lengthof r43;

        if i23 < i15 goto label25;

        r43 = staticinvoke <JLex.CUtility: char[] doubleSize(char[])>(r43);

     label25:
        i24 = i24 + 1;

        goto label24;

     label26:
        i11 = lengthof r43;

        if i23 < i11 goto label27;

        r43 = staticinvoke <JLex.CUtility: char[] doubleSize(char[])>(r43);

     label27:
        i26 = i1 + 1;

     label28:
        r44 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i27 = r44.<JLex.CInput: int m_line_read>;

        if i26 >= i27 goto label30;

        r25 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r26 = r25.<JLex.CInput: char[] m_line>;

        c12 = r26[i26];

        r43[i23] = c12;

        i23 = i23 + 1;

        i13 = lengthof r43;

        if i23 < i13 goto label29;

        r43 = staticinvoke <JLex.CUtility: char[] doubleSize(char[])>(r43);

     label29:
        i26 = i26 + 1;

        goto label28;

     label30:
        r23 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r23.<JLex.CInput: char[] m_line> = r43;

        r24 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r24.<JLex.CInput: int m_line_read> = i23;

        return 1;
    }

    private void saveMacro()
    {
        JLex.CLexGen r0;
        int i0, i1, i2, i3, i5, i7, i9, i10, i11, i12, i13, i14, i15, i17, i18, i19, i20, i28;
        java.io.PrintWriter r1;
        JLex.CInput r2, r5, r7, r8, r14, r18, r21, r22, r24, r25, r26, r27, r28, r29, r30, r31, r33, r34, r35, r36, r38, r40, r42, r44, r46, r48, r50;
        java.util.Hashtable r3, r11, r16;
        JLex.CSpec r4, r10, r12;
        char[] r6, r9, r15, r19, r23, r32, r37, r39, r41, r43, r45, r47, r49;
        char c4, c6, c8, c16, c21, c22, c23, c24, c25, c26, c27;
        boolean z0, z1, z2, z3, z4, z5, z6, z7, z8, z9, z10, z11, z12, z13, z14, z15, z16;
        java.lang.String r13, r17;

        r0 := @this: JLex.CLexGen;

        if null == r0 goto label01;

        z1 = 1;

        goto label02;

     label01:
        z1 = 0;

     label02:
        staticinvoke <JLex.CUtility: void ASSERT(boolean)>(z1);

        r1 = r0.<JLex.CLexGen: java.io.PrintWriter m_outstream>;

        if null == r1 goto label03;

        z2 = 1;

        goto label04;

     label03:
        z2 = 0;

     label04:
        staticinvoke <JLex.CUtility: void ASSERT(boolean)>(z2);

        r2 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        if null == r2 goto label05;

        z3 = 1;

        goto label06;

     label05:
        z3 = 0;

     label06:
        staticinvoke <JLex.CUtility: void ASSERT(boolean)>(z3);

        r3 = r0.<JLex.CLexGen: java.util.Hashtable m_tokens>;

        if null == r3 goto label07;

        z4 = 1;

        goto label08;

     label07:
        z4 = 0;

     label08:
        staticinvoke <JLex.CUtility: void ASSERT(boolean)>(z4);

        r4 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        if null == r4 goto label09;

        z5 = 1;

        goto label10;

     label09:
        z5 = 0;

     label10:
        staticinvoke <JLex.CUtility: void ASSERT(boolean)>(z5);

        i20 = 0;

     label11:
        r36 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r37 = r36.<JLex.CInput: char[] m_line>;

        c21 = r37[i20];

        z6 = staticinvoke <JLex.CUtility: boolean isspace(char)>(c21);

        if z6 == 0 goto label12;

        i20 = i20 + 1;

        r35 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i19 = r35.<JLex.CInput: int m_line_read>;

        if i20 < i19 goto label11;

        return;

     label12:
        i0 = i20;

     label13:
        r38 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r39 = r38.<JLex.CInput: char[] m_line>;

        c22 = r39[i20];

        z7 = staticinvoke <JLex.CUtility: boolean isspace(char)>(c22);

        if 0 != z7 goto label14;

        r31 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r32 = r31.<JLex.CInput: char[] m_line>;

        c16 = r32[i20];

        if 61 == c16 goto label14;

        i20 = i20 + 1;

        r33 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i17 = r33.<JLex.CInput: int m_line_read>;

        if i20 < i17 goto label13;

        r34 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i18 = r34.<JLex.CInput: int m_line_number>;

        staticinvoke <JLex.CError: void parse_error(int,int)>(15, i18);

        goto label13;

     label14:
        i1 = i20 - i0;

        if 0 != i1 goto label15;

        r30 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i15 = r30.<JLex.CInput: int m_line_number>;

        staticinvoke <JLex.CError: void parse_error(int,int)>(15, i15);

     label15:
        r40 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r41 = r40.<JLex.CInput: char[] m_line>;

        c23 = r41[i20];

        z8 = staticinvoke <JLex.CUtility: boolean isspace(char)>(c23);

        if z8 == 0 goto label16;

        i20 = i20 + 1;

        r28 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i13 = r28.<JLex.CInput: int m_line_read>;

        if i20 < i13 goto label15;

        r29 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i14 = r29.<JLex.CInput: int m_line_number>;

        staticinvoke <JLex.CError: void parse_error(int,int)>(15, i14);

        goto label15;

     label16:
        r5 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r6 = r5.<JLex.CInput: char[] m_line>;

        c4 = r6[i20];

        if 61 != c4 goto label17;

        i20 = i20 + 1;

        r26 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i11 = r26.<JLex.CInput: int m_line_read>;

        if i20 < i11 goto label18;

        r27 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i12 = r27.<JLex.CInput: int m_line_number>;

        staticinvoke <JLex.CError: void parse_error(int,int)>(15, i12);

        goto label18;

     label17:
        r7 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i5 = r7.<JLex.CInput: int m_line_number>;

        staticinvoke <JLex.CError: void parse_error(int,int)>(15, i5);

     label18:
        r42 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r43 = r42.<JLex.CInput: char[] m_line>;

        c24 = r43[i20];

        z9 = staticinvoke <JLex.CUtility: boolean isspace(char)>(c24);

        if z9 == 0 goto label19;

        i20 = i20 + 1;

        r24 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i9 = r24.<JLex.CInput: int m_line_read>;

        if i20 < i9 goto label18;

        r25 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i10 = r25.<JLex.CInput: int m_line_number>;

        staticinvoke <JLex.CError: void parse_error(int,int)>(15, i10);

        goto label18;

     label19:
        i2 = i20;

        z10 = 0;

        z11 = 0;

        z12 = 0;

     label20:
        r8 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r9 = r8.<JLex.CInput: char[] m_line>;

        c6 = r9[i20];

        z0 = staticinvoke <JLex.CUtility: boolean isspace(char)>(c6);

        if 0 == z0 goto label21;

        if 1 == z10 goto label21;

        if 1 == z11 goto label21;

        if 1 != z12 goto label29;

     label21:
        r44 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r45 = r44.<JLex.CInput: char[] m_line>;

        c25 = r45[i20];

        if 34 != c25 goto label24;

        if 0 != z12 goto label24;

        if z10 != 0 goto label22;

        z13 = 1;

        goto label23;

     label22:
        z13 = 0;

     label23:
        z10 = z13;

     label24:
        r46 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r47 = r46.<JLex.CInput: char[] m_line>;

        c26 = r47[i20];

        if 92 != c26 goto label25;

        if 0 != z12 goto label25;

        z12 = 1;

        goto label26;

     label25:
        z12 = 0;

     label26:
        if 0 != z12 goto label28;

        if 0 != z10 goto label28;

        r22 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r23 = r22.<JLex.CInput: char[] m_line>;

        c8 = r23[i20];

        if 91 != c8 goto label27;

        if 0 != z11 goto label27;

        z11 = 1;

     label27:
        r48 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r49 = r48.<JLex.CInput: char[] m_line>;

        c27 = r49[i20];

        if 93 != c27 goto label28;

        if 1 != z11 goto label28;

        z11 = 0;

     label28:
        i20 = i20 + 1;

        r50 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i28 = r50.<JLex.CInput: int m_line_read>;

        if i20 < i28 goto label20;

        goto label29;

     label29:
        i3 = i20 - i2;

        if 0 != i3 goto label30;

        r21 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i7 = r21.<JLex.CInput: int m_line_number>;

        staticinvoke <JLex.CError: void parse_error(int,int)>(15, i7);

     label30:
        if 0 >= i3 goto label31;

        z14 = 1;

        goto label32;

     label31:
        z14 = 0;

     label32:
        staticinvoke <JLex.CUtility: void ASSERT(boolean)>(z14);

        if 0 >= i1 goto label33;

        z15 = 1;

        goto label34;

     label33:
        z15 = 0;

     label34:
        staticinvoke <JLex.CUtility: void ASSERT(boolean)>(z15);

        r10 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        r11 = r10.<JLex.CSpec: java.util.Hashtable m_macros>;

        if null == r11 goto label35;

        z16 = 1;

        goto label36;

     label35:
        z16 = 0;

     label36:
        staticinvoke <JLex.CUtility: void ASSERT(boolean)>(z16);

        r12 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        r16 = r12.<JLex.CSpec: java.util.Hashtable m_macros>;

        r13 = new java.lang.String;

        r14 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r15 = r14.<JLex.CInput: char[] m_line>;

        specialinvoke r13.<java.lang.String: void <init>(char[],int,int)>(r15, i0, i1);

        r17 = new java.lang.String;

        r18 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r19 = r18.<JLex.CInput: char[] m_line>;

        specialinvoke r17.<java.lang.String: void <init>(char[],int,int)>(r19, i2, i3);

        virtualinvoke r16.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r13, r17);

        return;
    }

    private void saveStates()
    {
        JLex.CLexGen r0;
        int i0, i1, i4, i5, i6, i7, i8, i9, i10, i12, i14, i15, i16, i17, i18, i20, i21, i22, i23, i24, i25, i26, i27, i28, i29, i30, i31, i32;
        java.io.PrintWriter r1;
        JLex.CInput r2, r5, r6, r8, r10, r11, r12, r13, r14, r15, r16, r17, r19, r20, r21, r24, r25, r26, r27, r28, r30, r31, r32, r33, r34, r35, r36, r37, r38, r42, r47, r49;
        java.util.Hashtable r3, r40, r46;
        JLex.CSpec r4, r39, r45;
        boolean z0, z1, z2, z3, z4, z5, z6, z7, z8, z9, z10, z11, z12;
        char[] r7, r9, r18, r22, r29, r43, r48;
        char c2, c3, c11, c13, c19, c33;
        java.lang.String r41;
        java.lang.Integer r44;

        r0 := @this: JLex.CLexGen;

        if null == r0 goto label01;

        z3 = 1;

        goto label02;

     label01:
        z3 = 0;

     label02:
        staticinvoke <JLex.CUtility: void ASSERT(boolean)>(z3);

        r1 = r0.<JLex.CLexGen: java.io.PrintWriter m_outstream>;

        if null == r1 goto label03;

        z4 = 1;

        goto label04;

     label03:
        z4 = 0;

     label04:
        staticinvoke <JLex.CUtility: void ASSERT(boolean)>(z4);

        r2 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        if null == r2 goto label05;

        z5 = 1;

        goto label06;

     label05:
        z5 = 0;

     label06:
        staticinvoke <JLex.CUtility: void ASSERT(boolean)>(z5);

        r3 = r0.<JLex.CLexGen: java.util.Hashtable m_tokens>;

        if null == r3 goto label07;

        z6 = 1;

        goto label08;

     label07:
        z6 = 0;

     label08:
        staticinvoke <JLex.CUtility: void ASSERT(boolean)>(z6);

        r4 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        if null == r4 goto label09;

        z7 = 1;

        goto label10;

     label09:
        z7 = 0;

     label10:
        staticinvoke <JLex.CUtility: void ASSERT(boolean)>(z7);

        r5 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        z0 = r5.<JLex.CInput: boolean m_eof_reached>;

        if z0 == 0 goto label11;

        return;

     label11:
        r6 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r7 = r6.<JLex.CInput: char[] m_line>;

        c2 = r7[0];

        if 37 != c2 goto label12;

        z8 = 1;

        goto label13;

     label12:
        z8 = 0;

     label13:
        staticinvoke <JLex.CUtility: void ASSERT(boolean)>(z8);

        r8 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r9 = r8.<JLex.CInput: char[] m_line>;

        c3 = r9[1];

        if 115 != c3 goto label14;

        z9 = 1;

        goto label15;

     label14:
        z9 = 0;

     label15:
        staticinvoke <JLex.CUtility: void ASSERT(boolean)>(z9);

        r10 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i5 = r10.<JLex.CInput: int m_line_index>;

        r11 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i4 = r11.<JLex.CInput: int m_line_read>;

        if i5 > i4 goto label16;

        z10 = 1;

        goto label17;

     label16:
        z10 = 0;

     label17:
        staticinvoke <JLex.CUtility: void ASSERT(boolean)>(z10);

        r12 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i6 = r12.<JLex.CInput: int m_line_index>;

        if 0 > i6 goto label18;

        z11 = 1;

        goto label19;

     label18:
        z11 = 0;

     label19:
        staticinvoke <JLex.CUtility: void ASSERT(boolean)>(z11);

        r13 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i7 = r13.<JLex.CInput: int m_line_read>;

        if 0 > i7 goto label20;

        z12 = 1;

        goto label21;

     label20:
        z12 = 0;

     label21:
        staticinvoke <JLex.CUtility: void ASSERT(boolean)>(z12);

        r14 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i9 = r14.<JLex.CInput: int m_line_index>;

        r15 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i8 = r15.<JLex.CInput: int m_line_read>;

        if i9 < i8 goto label22;

        return;

     label22:
        r36 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i28 = r36.<JLex.CInput: int m_line_index>;

        r37 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i29 = r37.<JLex.CInput: int m_line_read>;

        if i28 >= i29 goto label27;

     label23:
        r16 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r18 = r16.<JLex.CInput: char[] m_line>;

        r17 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i10 = r17.<JLex.CInput: int m_line_index>;

        c11 = r18[i10];

        z1 = staticinvoke <JLex.CUtility: boolean isspace(char)>(c11);

        if z1 == 0 goto label24;

        r33 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i24 = r33.<JLex.CInput: int m_line_index>;

        i25 = i24 + 1;

        r33.<JLex.CInput: int m_line_index> = i25;

        r34 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i27 = r34.<JLex.CInput: int m_line_index>;

        r35 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i26 = r35.<JLex.CInput: int m_line_read>;

        if i27 < i26 goto label23;

        return;

     label24:
        r19 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i0 = r19.<JLex.CInput: int m_line_index>;

     label25:
        r20 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r22 = r20.<JLex.CInput: char[] m_line>;

        r21 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i12 = r21.<JLex.CInput: int m_line_index>;

        c13 = r22[i12];

        z2 = staticinvoke <JLex.CUtility: boolean isspace(char)>(c13);

        if 0 != z2 goto label26;

        r27 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r29 = r27.<JLex.CInput: char[] m_line>;

        r28 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i18 = r28.<JLex.CInput: int m_line_index>;

        c19 = r29[i18];

        if 44 == c19 goto label26;

        r30 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i20 = r30.<JLex.CInput: int m_line_index>;

        i21 = i20 + 1;

        r30.<JLex.CInput: int m_line_index> = i21;

        r31 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i23 = r31.<JLex.CInput: int m_line_index>;

        r32 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i22 = r32.<JLex.CInput: int m_line_read>;

        if i23 < i22 goto label25;

        goto label26;

     label26:
        r38 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i30 = r38.<JLex.CInput: int m_line_index>;

        i1 = i30 - i0;

        r39 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        r40 = r39.<JLex.CSpec: java.util.Hashtable m_states>;

        r41 = new java.lang.String;

        r42 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r43 = r42.<JLex.CInput: char[] m_line>;

        specialinvoke r41.<java.lang.String: void <init>(char[],int,int)>(r43, i0, i1);

        r44 = new java.lang.Integer;

        r45 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        r46 = r45.<JLex.CSpec: java.util.Hashtable m_states>;

        i31 = virtualinvoke r46.<java.util.Hashtable: int size()>();

        specialinvoke r44.<java.lang.Integer: void <init>(int)>(i31);

        virtualinvoke r40.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r41, r44);

        r47 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r48 = r47.<JLex.CInput: char[] m_line>;

        r49 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i32 = r49.<JLex.CInput: int m_line_index>;

        c33 = r48[i32];

        if 44 != c33 goto label22;

        r24 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i14 = r24.<JLex.CInput: int m_line_index>;

        i15 = i14 + 1;

        r24.<JLex.CInput: int m_line_index> = i15;

        r25 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i17 = r25.<JLex.CInput: int m_line_index>;

        r26 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i16 = r26.<JLex.CInput: int m_line_read>;

        if i17 < i16 goto label22;

        return;

     label27:
        return;
    }

    private char expandEscape()
    {
        JLex.CLexGen r0;
        JLex.CInput r1, r2, r3, r4, r5, r6, r8, r9, r10, r12, r13, r14, r15, r17, r18, r20, r21, r22, r23, r24, r25, r26, r27, r29, r30, r31, r33, r34, r36, r37, r39, r40, r41, r43, r44, r45, r46, r48;
        int i0, i1, i2, i3, i4, i6, i7, i8, i10, i11, i12, i13, i14, i16, i17, i21, i22, i23, i24, i25, i26, i27, i28, i29, i30, i31, i32, i33, i34, i36, i37, i39, i41, i42, i46, i47, i48, i49, i50, i51, i52, i53, i54, i57, i59, i60, i62, i66;
        char[] r7, r11, r16, r19, r28, r32, r35, r38, r42, r47;
        char c5, c9, c15, c18, c19, c20, c35, c38, c40, c43, c44, c45, c55, c56, c58, c61, c64, c65, c67;
        boolean z0, z1, z2, z3, z4, z5, z6;
        byte b63;

        r0 := @this: JLex.CLexGen;

        r1 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i1 = r1.<JLex.CInput: int m_line_index>;

        r2 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i0 = r2.<JLex.CInput: int m_line_read>;

        if i1 >= i0 goto label01;

        z3 = 1;

        goto label02;

     label01:
        z3 = 0;

     label02:
        staticinvoke <JLex.CUtility: void ASSERT(boolean)>(z3);

        r3 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i2 = r3.<JLex.CInput: int m_line_read>;

        if 0 >= i2 goto label03;

        z4 = 1;

        goto label04;

     label03:
        z4 = 0;

     label04:
        staticinvoke <JLex.CUtility: void ASSERT(boolean)>(z4);

        r4 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i3 = r4.<JLex.CInput: int m_line_index>;

        if 0 > i3 goto label05;

        z5 = 1;

        goto label06;

     label05:
        z5 = 0;

     label06:
        staticinvoke <JLex.CUtility: void ASSERT(boolean)>(z5);

        r5 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r7 = r5.<JLex.CInput: char[] m_line>;

        r6 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i4 = r6.<JLex.CInput: int m_line_index>;

        c5 = r7[i4];

        if 92 == c5 goto label07;

        r44 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i51 = r44.<JLex.CInput: int m_line_index>;

        i52 = i51 + 1;

        r44.<JLex.CInput: int m_line_index> = i52;

        r45 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r47 = r45.<JLex.CInput: char[] m_line>;

        r46 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i53 = r46.<JLex.CInput: int m_line_index>;

        i54 = i53 - 1;

        c55 = r47[i54];

        return c55;

     label07:
        z6 = 0;

        r8 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i6 = r8.<JLex.CInput: int m_line_index>;

        i7 = i6 + 1;

        r8.<JLex.CInput: int m_line_index> = i7;

        r9 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r11 = r9.<JLex.CInput: char[] m_line>;

        r10 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i8 = r10.<JLex.CInput: int m_line_index>;

        c9 = r11[i8];

        tableswitch(c9)
        {
            case 94: goto label13;
            case 95: goto label22;
            case 96: goto label22;
            case 97: goto label22;
            case 98: goto label08;
            case 99: goto label22;
            case 100: goto label22;
            case 101: goto label22;
            case 102: goto label11;
            case 103: goto label22;
            case 104: goto label22;
            case 105: goto label22;
            case 106: goto label22;
            case 107: goto label22;
            case 108: goto label22;
            case 109: goto label22;
            case 110: goto label10;
            case 111: goto label22;
            case 112: goto label22;
            case 113: goto label22;
            case 114: goto label12;
            case 115: goto label22;
            case 116: goto label09;
            case 117: goto label16;
            case 118: goto label22;
            case 119: goto label22;
            case 120: goto label17;
            default: goto label22;
        };

     label08:
        r12 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i10 = r12.<JLex.CInput: int m_line_index>;

        i11 = i10 + 1;

        r12.<JLex.CInput: int m_line_index> = i11;

        return 8;

     label09:
        r21 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i24 = r21.<JLex.CInput: int m_line_index>;

        i25 = i24 + 1;

        r21.<JLex.CInput: int m_line_index> = i25;

        return 9;

     label10:
        r23 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i28 = r23.<JLex.CInput: int m_line_index>;

        i29 = i28 + 1;

        r23.<JLex.CInput: int m_line_index> = i29;

        return 10;

     label11:
        r24 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i30 = r24.<JLex.CInput: int m_line_index>;

        i31 = i30 + 1;

        r24.<JLex.CInput: int m_line_index> = i31;

        return 12;

     label12:
        r22 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i26 = r22.<JLex.CInput: int m_line_index>;

        i27 = i26 + 1;

        r22.<JLex.CInput: int m_line_index> = i27;

        return 13;

     label13:
        r25 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i32 = r25.<JLex.CInput: int m_line_index>;

        i33 = i32 + 1;

        r25.<JLex.CInput: int m_line_index> = i33;

        r26 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r28 = r26.<JLex.CInput: char[] m_line>;

        r27 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i34 = r27.<JLex.CInput: int m_line_index>;

        c35 = r28[i34];

        c56 = staticinvoke <java.lang.Character: char toUpperCase(char)>(c35);

        if c56 < 64 goto label14;

        if c56 <= 90 goto label15;

     label14:
        r29 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i36 = r29.<JLex.CInput: int m_line_number>;

        staticinvoke <JLex.CError: void parse_error(int,int)>(20, i36);

     label15:
        i57 = c56 - 64;

        c58 = (char) i57;

        r48 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i59 = r48.<JLex.CInput: int m_line_index>;

        i60 = i59 + 1;

        r48.<JLex.CInput: int m_line_index> = i60;

        return c58;

     label16:
        z6 = 1;

     label17:
        r13 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i12 = r13.<JLex.CInput: int m_line_index>;

        i13 = i12 + 1;

        r13.<JLex.CInput: int m_line_index> = i13;

        c61 = 0;

        i62 = 0;

     label18:
        i23 = i62;

        if z6 == 0 goto label19;

        b63 = 4;

        goto label20;

     label19:
        b63 = 2;

     label20:
        if i23 >= b63 goto label21;

        r14 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r16 = r14.<JLex.CInput: char[] m_line>;

        r15 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i14 = r15.<JLex.CInput: int m_line_index>;

        c15 = r16[i14];

        z0 = staticinvoke <JLex.CUtility: boolean ishexdigit(char)>(c15);

        if z0 == 0 goto label21;

        i16 = c61 << 4;

        c64 = (char) i16;

        r17 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r19 = r17.<JLex.CInput: char[] m_line>;

        r18 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i17 = r18.<JLex.CInput: int m_line_index>;

        c18 = r19[i17];

        c19 = staticinvoke <JLex.CUtility: char hex2bin(char)>(c18);

        c20 = c64 | c19;

        c61 = (char) c20;

        r20 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i21 = r20.<JLex.CInput: int m_line_index>;

        i22 = i21 + 1;

        r20.<JLex.CInput: int m_line_index> = i22;

        i62 = i62 + 1;

        goto label18;

     label21:
        return c61;

     label22:
        r30 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r32 = r30.<JLex.CInput: char[] m_line>;

        r31 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i37 = r31.<JLex.CInput: int m_line_index>;

        c38 = r32[i37];

        z1 = staticinvoke <JLex.CUtility: boolean isoctdigit(char)>(c38);

        if 0 != z1 goto label23;

        r40 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r42 = r40.<JLex.CInput: char[] m_line>;

        r41 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i48 = r41.<JLex.CInput: int m_line_index>;

        c65 = r42[i48];

        r43 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i49 = r43.<JLex.CInput: int m_line_index>;

        i50 = i49 + 1;

        r43.<JLex.CInput: int m_line_index> = i50;

        goto label25;

     label23:
        c65 = 0;

        i66 = 0;

     label24:
        if i66 >= 3 goto label25;

        r33 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r35 = r33.<JLex.CInput: char[] m_line>;

        r34 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i39 = r34.<JLex.CInput: int m_line_index>;

        c40 = r35[i39];

        z2 = staticinvoke <JLex.CUtility: boolean isoctdigit(char)>(c40);

        if z2 == 0 goto label25;

        i41 = c65 << 3;

        c67 = (char) i41;

        r36 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r38 = r36.<JLex.CInput: char[] m_line>;

        r37 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i42 = r37.<JLex.CInput: int m_line_index>;

        c43 = r38[i42];

        c44 = staticinvoke <JLex.CUtility: char oct2bin(char)>(c43);

        c45 = c67 | c44;

        c65 = (char) c45;

        r39 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i46 = r39.<JLex.CInput: int m_line_index>;

        i47 = i46 + 1;

        r39.<JLex.CInput: int m_line_index> = i47;

        i66 = i66 + 1;

        goto label24;

     label25:
        return c65;
    }

    JLex.CAccept packAccept() throws java.io.IOException
    {
        JLex.CLexGen r0;
        java.io.PrintWriter r2;
        JLex.CInput r3, r6, r7, r9, r10, r12, r13, r15, r16, r17, r18, r19, r21, r22, r24, r26, r27, r28, r30, r31, r33, r34, r36, r37, r39, r40, r42, r43, r45, r46, r47, r48, r49, r50, r51, r52, r54, r55, r56, r58, r59, r61, r62, r63, r64;
        java.util.Hashtable r4;
        JLex.CSpec r5;
        int i0, i2, i4, i6, i7, i8, i9, i10, i12, i14, i15, i16, i17, i19, i21, i23, i25, i27, i29, i30, i31, i32, i33, i34, i35, i36, i37, i38, i39, i40, i42, i44, i45, i46, i47;
        char[] r8, r11, r14, r20, r23, r29, r32, r35, r38, r41, r44, r53, r57, r60;
        char c1, c3, c5, c11, c13, c18, c20, c22, c24, c26, c28, c41, c43;
        boolean z0, z3, z4, z5, z6, z7, z8, z9, z10, z11, z12, z13, z14, z15, z16, z17, z18, z19, z20, z21, z22, z23;
        JLex.CAccept r25;

        r0 := @this: JLex.CLexGen;

        r53 = newarray (char)[1024];

        i36 = 0;

        if null == r0 goto label01;

        z5 = 1;

        goto label02;

     label01:
        z5 = 0;

     label02:
        staticinvoke <JLex.CUtility: void ASSERT(boolean)>(z5);

        r2 = r0.<JLex.CLexGen: java.io.PrintWriter m_outstream>;

        if null == r2 goto label03;

        z6 = 1;

        goto label04;

     label03:
        z6 = 0;

     label04:
        staticinvoke <JLex.CUtility: void ASSERT(boolean)>(z6);

        r3 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        if null == r3 goto label05;

        z7 = 1;

        goto label06;

     label05:
        z7 = 0;

     label06:
        staticinvoke <JLex.CUtility: void ASSERT(boolean)>(z7);

        r4 = r0.<JLex.CLexGen: java.util.Hashtable m_tokens>;

        if null == r4 goto label07;

        z8 = 1;

        goto label08;

     label07:
        z8 = 0;

     label08:
        staticinvoke <JLex.CUtility: void ASSERT(boolean)>(z8);

        r5 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        if null == r5 goto label09;

        z9 = 1;

        goto label10;

     label09:
        z9 = 0;

     label10:
        staticinvoke <JLex.CUtility: void ASSERT(boolean)>(z9);

     label11:
        r54 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i37 = r54.<JLex.CInput: int m_line_index>;

        r55 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i38 = r55.<JLex.CInput: int m_line_read>;

        if i37 < i38 goto label12;

        r51 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        z4 = virtualinvoke r51.<JLex.CInput: boolean getLine()>();

        if z4 == 0 goto label11;

        r52 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i35 = r52.<JLex.CInput: int m_line_number>;

        staticinvoke <JLex.CError: void parse_error(int,int)>(11, i35);

        return null;

     label12:
        r6 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r8 = r6.<JLex.CInput: char[] m_line>;

        r7 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i0 = r7.<JLex.CInput: int m_line_index>;

        c1 = r8[i0];

        z0 = staticinvoke <JLex.CUtility: boolean isspace(char)>(c1);

        if z0 == 0 goto label14;

        r46 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i30 = r46.<JLex.CInput: int m_line_index>;

        i31 = i30 + 1;

        r46.<JLex.CInput: int m_line_index> = i31;

     label13:
        r47 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i33 = r47.<JLex.CInput: int m_line_index>;

        r48 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i32 = r48.<JLex.CInput: int m_line_read>;

        if i33 < i32 goto label12;

        r49 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        z3 = virtualinvoke r49.<JLex.CInput: boolean getLine()>();

        if z3 == 0 goto label13;

        r50 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i34 = r50.<JLex.CInput: int m_line_number>;

        staticinvoke <JLex.CError: void parse_error(int,int)>(11, i34);

        return null;

     label14:
        r9 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r11 = r9.<JLex.CInput: char[] m_line>;

        r10 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i2 = r10.<JLex.CInput: int m_line_index>;

        c3 = r11[i2];

        if 123 == c3 goto label15;

        r45 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i29 = r45.<JLex.CInput: int m_line_number>;

        staticinvoke <JLex.CError: void parse_error(int,int)>(17, i29);

     label15:
        i39 = 0;

        z10 = 0;

        z11 = 0;

        z12 = 0;

        z13 = 0;

        z14 = 0;

        z15 = 0;

     label16:
        r56 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r57 = r56.<JLex.CInput: char[] m_line>;

        r58 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i40 = r58.<JLex.CInput: int m_line_index>;

        c41 = r57[i40];

        r53[i36] = c41;

        if z15 != 0 goto label17;

        if z14 == 0 goto label18;

     label17:
        if z11 == 0 goto label18;

        z11 = 0;

        goto label26;

     label18:
        if z15 != 0 goto label19;

        if z14 == 0 goto label20;

     label19:
        r12 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r14 = r12.<JLex.CInput: char[] m_line>;

        r13 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i4 = r13.<JLex.CInput: int m_line_index>;

        c5 = r14[i4];

        if 92 != c5 goto label20;

        z11 = 1;

        goto label26;

     label20:
        if z15 != 0 goto label23;

        if z13 != 0 goto label23;

        if z12 != 0 goto label23;

        r42 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r44 = r42.<JLex.CInput: char[] m_line>;

        r43 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i27 = r43.<JLex.CInput: int m_line_index>;

        c28 = r44[i27];

        if 34 != c28 goto label23;

        if z14 != 0 goto label21;

        z16 = 1;

        goto label22;

     label21:
        z16 = 0;

     label22:
        z14 = z16;

        goto label26;

     label23:
        if z14 != 0 goto label26;

        if z13 != 0 goto label26;

        if z12 != 0 goto label26;

        r39 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r41 = r39.<JLex.CInput: char[] m_line>;

        r40 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i25 = r40.<JLex.CInput: int m_line_index>;

        c26 = r41[i25];

        if 39 != c26 goto label26;

        if z15 != 0 goto label24;

        z17 = 1;

        goto label25;

     label24:
        z17 = 0;

     label25:
        z15 = z17;

     label26:
        if z12 == 0 goto label30;

        if z10 == 0 goto label27;

        r36 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r38 = r36.<JLex.CInput: char[] m_line>;

        r37 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i23 = r37.<JLex.CInput: int m_line_index>;

        c24 = r38[i23];

        if 47 != c24 goto label27;

        z10 = 0;

        z12 = 0;

        goto label37;

     label27:
        r33 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r35 = r33.<JLex.CInput: char[] m_line>;

        r34 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i21 = r34.<JLex.CInput: int m_line_index>;

        c22 = r35[i21];

        if 42 != c22 goto label28;

        z18 = 1;

        goto label29;

     label28:
        z18 = 0;

     label29:
        z10 = z18;

        goto label37;

     label30:
        if z13 != 0 goto label37;

        if z15 != 0 goto label37;

        if z14 != 0 goto label37;

        if z10 == 0 goto label31;

        r30 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r32 = r30.<JLex.CInput: char[] m_line>;

        r31 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i19 = r31.<JLex.CInput: int m_line_index>;

        c20 = r32[i19];

        if 47 != c20 goto label31;

        z19 = 1;

        goto label32;

     label31:
        z19 = 0;

     label32:
        z13 = z19;

        if z10 == 0 goto label33;

        r27 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r29 = r27.<JLex.CInput: char[] m_line>;

        r28 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i17 = r28.<JLex.CInput: int m_line_index>;

        c18 = r29[i17];

        if 42 != c18 goto label33;

        z20 = 1;

        goto label34;

     label33:
        z20 = 0;

     label34:
        z12 = z20;

        r59 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r60 = r59.<JLex.CInput: char[] m_line>;

        r61 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i42 = r61.<JLex.CInput: int m_line_index>;

        c43 = r60[i42];

        if 47 != c43 goto label35;

        z21 = 1;

        goto label36;

     label35:
        z21 = 0;

     label36:
        z10 = z21;

     label37:
        if z15 != 0 goto label39;

        if z14 != 0 goto label39;

        if z12 != 0 goto label39;

        if z13 != 0 goto label39;

        r18 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r20 = r18.<JLex.CInput: char[] m_line>;

        r19 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i10 = r19.<JLex.CInput: int m_line_index>;

        c11 = r20[i10];

        if 123 != c11 goto label38;

        i39 = i39 + 1;

        goto label39;

     label38:
        r21 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r23 = r21.<JLex.CInput: char[] m_line>;

        r22 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i12 = r22.<JLex.CInput: int m_line_index>;

        c13 = r23[i12];

        if 125 != c13 goto label39;

        i39 = i39 + -1;

        if 0 != i39 goto label39;

        i44 = i36 + 1;

        r24 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i14 = r24.<JLex.CInput: int m_line_index>;

        i15 = i14 + 1;

        r24.<JLex.CInput: int m_line_index> = i15;

        goto label44;

     label39:
        i36 = i36 + 1;

        i45 = lengthof r53;

        if i36 < i45 goto label40;

        r53 = staticinvoke <JLex.CUtility: char[] doubleSize(char[])>(r53);

     label40:
        r15 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i6 = r15.<JLex.CInput: int m_line_index>;

        i7 = i6 + 1;

        r15.<JLex.CInput: int m_line_index> = i7;

     label41:
        r62 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i46 = r62.<JLex.CInput: int m_line_index>;

        r63 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i47 = r63.<JLex.CInput: int m_line_read>;

        if i46 < i47 goto label16;

        z10 = 0;

        z13 = 0;

        if z15 != 0 goto label42;

        if z14 == 0 goto label43;

     label42:
        r16 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i8 = r16.<JLex.CInput: int m_line_number>;

        staticinvoke <JLex.CError: void parse_error(int,int)>(6, i8);

        z14 = 0;

        z15 = 0;

     label43:
        r64 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        z22 = virtualinvoke r64.<JLex.CInput: boolean getLine()>();

        if z22 == 0 goto label41;

        r17 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i9 = r17.<JLex.CInput: int m_line_number>;

        staticinvoke <JLex.CError: void parse_error(int,int)>(16, i9);

        return null;

     label44:
        r25 = new JLex.CAccept;

        r26 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i16 = r26.<JLex.CInput: int m_line_number>;

        specialinvoke r25.<JLex.CAccept: void <init>(char[],int,int)>(r53, i44, i16);

        if null == r25 goto label45;

        z23 = 1;

        goto label46;

     label45:
        z23 = 0;

     label46:
        staticinvoke <JLex.CUtility: void ASSERT(boolean)>(z23);

        return r25;
    }

    int advance() throws java.io.IOException
    {
        JLex.CLexGen r0;
        java.lang.Integer r1;
        JLex.CInput r2, r5, r6, r7, r8, r9, r10, r11, r12, r14, r15, r24, r25, r26, r27, r30, r31, r33, r34, r37, r39, r40, r48, r54, r57, r58, r61, r62, r63, r67, r68, r70, r71, r75, r76, r78, r82, r83, r84, r85, r86, r90, r91, r93, r95, r97, r99, r100;
        boolean z0, z1, z2, z3, z4, z5, z6, z7, z8, z10, z11, z12, z13, z14, z15, z16;
        JLex.CSpec r3, r4, r16, r17, r18, r19, r20, r21, r22, r23, r29, r32, r36, r38, r42, r43, r44, r59, r60, r64, r65, r66, r72, r73, r74, r79, r80, r81, r87, r88, r89, r92, r96, r103, r105, r106;
        int i0, i1, i2, i3, i4, i5, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i18, i19, i20, i22, i23, i25, i27, i28, i29, i30, i31, i32, i33, i34, i35, i36, i37, i39, i40, i41, i42, i44, i45, i46, i47, i48, i49, i50, i51, i52, i53, i54, i55, i57, i59, i60, i62;
        char[] r13, r28, r35, r41, r69, r77, r94, r98;
        char c6, c17, c21, c24, c26, c38, c43, c56, c58, c61;
        java.lang.StringBuilder r45, r47, r49, r51, r53, r55;
        java.io.PrintStream r46, r52;
        java.lang.String r50, r56;
        java.util.Hashtable r101;
        java.lang.Character r102;
        java.lang.Object r104;

        r0 := @this: JLex.CLexGen;

        r2 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        z0 = r2.<JLex.CInput: boolean m_eof_reached>;

        if z0 == 0 goto label01;

        r87 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        r87.<JLex.CSpec: int m_current_token> = 11;

        r88 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        r88.<JLex.CSpec: char m_lexeme> = 0;

        r89 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        i52 = r89.<JLex.CSpec: int m_current_token>;

        return i52;

     label01:
        r3 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        i0 = r3.<JLex.CSpec: int m_current_token>;

        if 1 == i0 goto label02;

        r85 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i51 = r85.<JLex.CInput: int m_line_index>;

        r86 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i50 = r86.<JLex.CInput: int m_line_read>;

        if i51 < i50 goto label09;

     label02:
        r4 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        z1 = r4.<JLex.CSpec: boolean m_in_quote>;

        if z1 == 0 goto label03;

        r84 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i49 = r84.<JLex.CInput: int m_line_number>;

        staticinvoke <JLex.CError: void parse_error(int,int)>(16, i49);

     label03:
        z10 = r0.<JLex.CLexGen: boolean m_advance_stop>;

        if 0 == z10 goto label04;

        r82 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i48 = r82.<JLex.CInput: int m_line_index>;

        r83 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i47 = r83.<JLex.CInput: int m_line_read>;

        if i48 < i47 goto label06;

     label04:
        r5 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        z2 = virtualinvoke r5.<JLex.CInput: boolean getLine()>();

        if z2 == 0 goto label05;

        r79 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        r79.<JLex.CSpec: int m_current_token> = 11;

        r80 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        r80.<JLex.CSpec: char m_lexeme> = 0;

        r81 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        i46 = r81.<JLex.CSpec: int m_current_token>;

        return i46;

     label05:
        r6 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r6.<JLex.CInput: int m_line_index> = 0;

        goto label07;

     label06:
        r0.<JLex.CLexGen: boolean m_advance_stop> = 0;

     label07:
        r90 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i53 = r90.<JLex.CInput: int m_line_index>;

        r91 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i54 = r91.<JLex.CInput: int m_line_read>;

        if i53 >= i54 goto label08;

        r75 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r77 = r75.<JLex.CInput: char[] m_line>;

        r76 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i42 = r76.<JLex.CInput: int m_line_index>;

        c43 = r77[i42];

        z8 = staticinvoke <JLex.CUtility: boolean isspace(char)>(c43);

        if 1 != z8 goto label08;

        r78 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i44 = r78.<JLex.CInput: int m_line_index>;

        i45 = i44 + 1;

        r78.<JLex.CInput: int m_line_index> = i45;

        goto label07;

     label08:
        r7 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i2 = r7.<JLex.CInput: int m_line_index>;

        r8 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i1 = r8.<JLex.CInput: int m_line_read>;

        if i2 >= i1 goto label03;

        goto label09;

     label09:
        r9 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i4 = r9.<JLex.CInput: int m_line_index>;

        r10 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i3 = r10.<JLex.CInput: int m_line_read>;

        if i4 > i3 goto label10;

        z11 = 1;

        goto label11;

     label10:
        z11 = 0;

     label11:
        staticinvoke <JLex.CUtility: void ASSERT(boolean)>(z11);

     label12:
        r92 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        z12 = r92.<JLex.CSpec: boolean m_in_quote>;

        if 0 != z12 goto label14;

        r67 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r69 = r67.<JLex.CInput: char[] m_line>;

        r68 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i37 = r68.<JLex.CInput: int m_line_index>;

        c38 = r69[i37];

        if 123 != c38 goto label14;

        z7 = specialinvoke r0.<JLex.CLexGen: boolean expandMacro()>();

        if 0 != z7 goto label13;

        goto label17;

     label13:
        r70 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i40 = r70.<JLex.CInput: int m_line_index>;

        r71 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i39 = r71.<JLex.CInput: int m_line_read>;

        if i40 < i39 goto label12;

        r72 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        r72.<JLex.CSpec: int m_current_token> = 1;

        r73 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        r73.<JLex.CSpec: char m_lexeme> = 0;

        r74 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        i41 = r74.<JLex.CSpec: int m_current_token>;

        return i41;

     label14:
        r11 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r13 = r11.<JLex.CInput: char[] m_line>;

        r12 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i5 = r12.<JLex.CInput: int m_line_index>;

        c6 = r13[i5];

        if 34 != c6 goto label17;

        r60 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        r59 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        z6 = r59.<JLex.CSpec: boolean m_in_quote>;

        if z6 != 0 goto label15;

        z13 = 1;

        goto label16;

     label15:
        z13 = 0;

     label16:
        r60.<JLex.CSpec: boolean m_in_quote> = z13;

        r61 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i32 = r61.<JLex.CInput: int m_line_index>;

        i33 = i32 + 1;

        r61.<JLex.CInput: int m_line_index> = i33;

        r62 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i35 = r62.<JLex.CInput: int m_line_index>;

        r63 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i34 = r63.<JLex.CInput: int m_line_read>;

        if i35 < i34 goto label12;

        r64 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        r64.<JLex.CSpec: int m_current_token> = 1;

        r65 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        r65.<JLex.CSpec: char m_lexeme> = 0;

        r66 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        i36 = r66.<JLex.CSpec: int m_current_token>;

        return i36;

     label17:
        r14 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i8 = r14.<JLex.CInput: int m_line_index>;

        r15 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i7 = r15.<JLex.CInput: int m_line_read>;

        if i8 <= i7 goto label20;

        r46 = <java.lang.System: java.io.PrintStream out>;

        r45 = new java.lang.StringBuilder;

        specialinvoke r45.<java.lang.StringBuilder: void <init>()>();

        r47 = virtualinvoke r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("m_input.m_line_index = ");

        r48 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i28 = r48.<JLex.CInput: int m_line_index>;

        r49 = virtualinvoke r47.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i28);

        r50 = virtualinvoke r49.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r46.<java.io.PrintStream: void println(java.lang.String)>(r50);

        r52 = <java.lang.System: java.io.PrintStream out>;

        r51 = new java.lang.StringBuilder;

        specialinvoke r51.<java.lang.StringBuilder: void <init>()>();

        r53 = virtualinvoke r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("m_input.m_line_read = ");

        r54 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i29 = r54.<JLex.CInput: int m_line_read>;

        r55 = virtualinvoke r53.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i29);

        r56 = virtualinvoke r55.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r52.<java.io.PrintStream: void println(java.lang.String)>(r56);

        r57 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i31 = r57.<JLex.CInput: int m_line_index>;

        r58 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i30 = r58.<JLex.CInput: int m_line_read>;

        if i31 > i30 goto label18;

        z14 = 1;

        goto label19;

     label18:
        z14 = 0;

     label19:
        staticinvoke <JLex.CUtility: void ASSERT(boolean)>(z14);

     label20:
        r93 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r94 = r93.<JLex.CInput: char[] m_line>;

        r95 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i55 = r95.<JLex.CInput: int m_line_index>;

        c56 = r94[i55];

        if 92 != c56 goto label21;

        z15 = 1;

        goto label22;

     label21:
        z15 = 0;

     label22:
        r16 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        z3 = r16.<JLex.CSpec: boolean m_in_quote>;

        if 0 != z3 goto label25;

        r32 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        z4 = r32.<JLex.CSpec: boolean m_in_ccl>;

        if 0 != z4 goto label23;

        r39 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r41 = r39.<JLex.CInput: char[] m_line>;

        r40 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i25 = r40.<JLex.CInput: int m_line_index>;

        c26 = r41[i25];

        z5 = staticinvoke <JLex.CUtility: boolean isspace(char)>(c26);

        if z5 == 0 goto label23;

        r42 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        r42.<JLex.CSpec: int m_current_token> = 1;

        r43 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        r43.<JLex.CSpec: char m_lexeme> = 0;

        r44 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        i27 = r44.<JLex.CSpec: int m_current_token>;

        return i27;

     label23:
        if z15 == 0 goto label24;

        r38 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        c24 = specialinvoke r0.<JLex.CLexGen: char expandEscape()>();

        r38.<JLex.CSpec: char m_lexeme> = c24;

        goto label27;

     label24:
        r36 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        r33 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r35 = r33.<JLex.CInput: char[] m_line>;

        r34 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i20 = r34.<JLex.CInput: int m_line_index>;

        c21 = r35[i20];

        r36.<JLex.CSpec: char m_lexeme> = c21;

        r37 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i22 = r37.<JLex.CInput: int m_line_index>;

        i23 = i22 + 1;

        r37.<JLex.CInput: int m_line_index> = i23;

        goto label27;

     label25:
        if z15 == 0 goto label26;

        r24 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i12 = r24.<JLex.CInput: int m_line_index>;

        i14 = i12 + 1;

        r25 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i13 = r25.<JLex.CInput: int m_line_read>;

        if i14 >= i13 goto label26;

        r26 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r28 = r26.<JLex.CInput: char[] m_line>;

        r27 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i15 = r27.<JLex.CInput: int m_line_index>;

        i16 = i15 + 1;

        c17 = r28[i16];

        if 34 != c17 goto label26;

        r29 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        r29.<JLex.CSpec: char m_lexeme> = 34;

        r31 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r30 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i18 = r30.<JLex.CInput: int m_line_index>;

        i19 = i18 + 2;

        r31.<JLex.CInput: int m_line_index> = i19;

        goto label27;

     label26:
        r96 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        r97 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        r98 = r97.<JLex.CInput: char[] m_line>;

        r99 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i57 = r99.<JLex.CInput: int m_line_index>;

        c58 = r98[i57];

        r96.<JLex.CSpec: char m_lexeme> = c58;

        r100 = r0.<JLex.CLexGen: JLex.CInput m_input>;

        i59 = r100.<JLex.CInput: int m_line_index>;

        i60 = i59 + 1;

        r100.<JLex.CInput: int m_line_index> = i60;

     label27:
        r101 = r0.<JLex.CLexGen: java.util.Hashtable m_tokens>;

        r102 = new java.lang.Character;

        r103 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        c61 = r103.<JLex.CSpec: char m_lexeme>;

        specialinvoke r102.<java.lang.Character: void <init>(char)>(c61);

        r104 = virtualinvoke r101.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r102);

        r1 = (java.lang.Integer) r104;

        r105 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        z16 = r105.<JLex.CSpec: boolean m_in_quote>;

        if z16 != 0 goto label28;

        if 1 != z15 goto label29;

     label28:
        r17 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        r17.<JLex.CSpec: int m_current_token> = 12;

        goto label31;

     label29:
        if null != r1 goto label30;

        r23 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        r23.<JLex.CSpec: int m_current_token> = 12;

        goto label31;

     label30:
        r22 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        i11 = virtualinvoke r1.<java.lang.Integer: int intValue()>();

        r22.<JLex.CSpec: int m_current_token> = i11;

     label31:
        r106 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        i62 = r106.<JLex.CSpec: int m_current_token>;

        if 6 != i62 goto label32;

        r21 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        r21.<JLex.CSpec: boolean m_in_ccl> = 1;

     label32:
        r18 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        i9 = r18.<JLex.CSpec: int m_current_token>;

        if 5 != i9 goto label33;

        r20 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        r20.<JLex.CSpec: boolean m_in_ccl> = 0;

     label33:
        r19 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        i10 = r19.<JLex.CSpec: int m_current_token>;

        return i10;
    }

    private void details()
    {
        JLex.CLexGen r0;
        java.util.Enumeration r1, r4;
        java.lang.String r2, r3, r5, r53, r56, r68;
        java.lang.Integer r6;
        java.io.PrintStream r7, r8, r11, r12, r15, r16, r19, r20, r21, r24, r25, r26, r28, r29, r30, r31, r33, r36, r37, r38, r39, r40, r41, r42, r43, r49, r62;
        JLex.CSpec r9, r13, r17, r18, r22, r23, r27, r32, r34, r45, r58;
        java.util.Hashtable r10, r14, r46, r59;
        boolean z0, z1, z2, z3, z4, z5, z6, z7, z8, z9, z10, z11;
        java.util.Vector r35;
        java.lang.Object r44, r47, r57, r60;
        java.lang.StringBuilder r48, r50, r51, r52, r54, r55, r61, r63, r64, r65, r66, r67;

        r0 := @this: JLex.CLexGen;

        r7 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke r7.<java.io.PrintStream: void println()>();

        r8 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke r8.<java.io.PrintStream: void println(java.lang.String)>("\t** Macros **");

        r9 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        r10 = r9.<JLex.CSpec: java.util.Hashtable m_macros>;

        r1 = virtualinvoke r10.<java.util.Hashtable: java.util.Enumeration keys()>();

     label01:
        z0 = interfaceinvoke r1.<java.util.Enumeration: boolean hasMoreElements()>();

        if z0 == 0 goto label06;

        r57 = interfaceinvoke r1.<java.util.Enumeration: java.lang.Object nextElement()>();

        r2 = (java.lang.String) r57;

        r58 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        r59 = r58.<JLex.CSpec: java.util.Hashtable m_macros>;

        r60 = virtualinvoke r59.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r2);

        r3 = (java.lang.String) r60;

        if null == r2 goto label02;

        z8 = 1;

        goto label03;

     label02:
        z8 = 0;

     label03:
        staticinvoke <JLex.CUtility: void ASSERT(boolean)>(z8);

        if null == r3 goto label04;

        z9 = 1;

        goto label05;

     label04:
        z9 = 0;

     label05:
        staticinvoke <JLex.CUtility: void ASSERT(boolean)>(z9);

        r62 = <java.lang.System: java.io.PrintStream out>;

        r61 = new java.lang.StringBuilder;

        specialinvoke r61.<java.lang.StringBuilder: void <init>()>();

        r63 = virtualinvoke r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Macro name \"");

        r64 = virtualinvoke r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        r65 = virtualinvoke r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" has definition \"");

        r66 = virtualinvoke r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        r67 = virtualinvoke r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\".");

        r68 = virtualinvoke r67.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r62.<java.io.PrintStream: void println(java.lang.String)>(r68);

        goto label01;

     label06:
        r11 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke r11.<java.io.PrintStream: void println()>();

        r12 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke r12.<java.io.PrintStream: void println(java.lang.String)>("\t** States **");

        r13 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        r14 = r13.<JLex.CSpec: java.util.Hashtable m_states>;

        r4 = virtualinvoke r14.<java.util.Hashtable: java.util.Enumeration keys()>();

     label07:
        z1 = interfaceinvoke r4.<java.util.Enumeration: boolean hasMoreElements()>();

        if z1 == 0 goto label12;

        r44 = interfaceinvoke r4.<java.util.Enumeration: java.lang.Object nextElement()>();

        r5 = (java.lang.String) r44;

        r45 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        r46 = r45.<JLex.CSpec: java.util.Hashtable m_states>;

        r47 = virtualinvoke r46.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r5);

        r6 = (java.lang.Integer) r47;

        if null == r5 goto label08;

        z10 = 1;

        goto label09;

     label08:
        z10 = 0;

     label09:
        staticinvoke <JLex.CUtility: void ASSERT(boolean)>(z10);

        if null == r6 goto label10;

        z11 = 1;

        goto label11;

     label10:
        z11 = 0;

     label11:
        staticinvoke <JLex.CUtility: void ASSERT(boolean)>(z11);

        r49 = <java.lang.System: java.io.PrintStream out>;

        r48 = new java.lang.StringBuilder;

        specialinvoke r48.<java.lang.StringBuilder: void <init>()>();

        r50 = virtualinvoke r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("State \"");

        r51 = virtualinvoke r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        r52 = virtualinvoke r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" has identifying index ");

        r53 = virtualinvoke r6.<java.lang.Integer: java.lang.String toString()>();

        r54 = virtualinvoke r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r53);

        r55 = virtualinvoke r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        r56 = virtualinvoke r55.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r49.<java.io.PrintStream: void println(java.lang.String)>(r56);

        goto label07;

     label12:
        r15 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke r15.<java.io.PrintStream: void println()>();

        r16 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke r16.<java.io.PrintStream: void println(java.lang.String)>("\t** Character Counting **");

        r17 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        z2 = r17.<JLex.CSpec: boolean m_count_chars>;

        if 0 != z2 goto label13;

        r43 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke r43.<java.io.PrintStream: void println(java.lang.String)>("Character counting is off.");

        goto label14;

     label13:
        r18 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        z3 = r18.<JLex.CSpec: boolean m_count_lines>;

        staticinvoke <JLex.CUtility: void ASSERT(boolean)>(z3);

        r19 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke r19.<java.io.PrintStream: void println(java.lang.String)>("Character counting is on.");

     label14:
        r20 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke r20.<java.io.PrintStream: void println()>();

        r21 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke r21.<java.io.PrintStream: void println(java.lang.String)>("\t** Line Counting **");

        r22 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        z4 = r22.<JLex.CSpec: boolean m_count_lines>;

        if 0 != z4 goto label15;

        r42 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke r42.<java.io.PrintStream: void println(java.lang.String)>("Line counting is off.");

        goto label16;

     label15:
        r23 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        z5 = r23.<JLex.CSpec: boolean m_count_lines>;

        staticinvoke <JLex.CUtility: void ASSERT(boolean)>(z5);

        r24 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke r24.<java.io.PrintStream: void println(java.lang.String)>("Line counting is on.");

     label16:
        r25 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke r25.<java.io.PrintStream: void println()>();

        r26 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke r26.<java.io.PrintStream: void println(java.lang.String)>("\t** Operating System Specificity **");

        r27 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        z6 = r27.<JLex.CSpec: boolean m_unix>;

        if 0 != z6 goto label17;

        r40 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke r40.<java.io.PrintStream: void println(java.lang.String)>("Not generating UNIX-specific code.");

        r41 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke r41.<java.io.PrintStream: void println(java.lang.String)>("(This means that \"\\r\\n\" is a newline, rather than \"\\n\".)");

        goto label18;

     label17:
        r28 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke r28.<java.io.PrintStream: void println(java.lang.String)>("Generating UNIX-specific code.");

        r29 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke r29.<java.io.PrintStream: void println(java.lang.String)>("(This means that \"\\n\" is a newline, rather than \"\\r\\n\".)");

     label18:
        r30 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke r30.<java.io.PrintStream: void println()>();

        r31 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke r31.<java.io.PrintStream: void println(java.lang.String)>("\t** Java CUP Compatibility **");

        r32 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        z7 = r32.<JLex.CSpec: boolean m_cup_compatible>;

        if 0 != z7 goto label19;

        r38 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke r38.<java.io.PrintStream: void println(java.lang.String)>("Generating CUP compatible code.");

        r39 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke r39.<java.io.PrintStream: void println(java.lang.String)>("(Scanner implements java_cup.runtime.Scanner.)");

        goto label20;

     label19:
        r33 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke r33.<java.io.PrintStream: void println(java.lang.String)>("Not generating CUP compatible code.");

     label20:
        r34 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        r35 = r34.<JLex.CSpec: java.util.Vector m_dtrans_vector>;

        if null == r35 goto label21;

        r36 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke r36.<java.io.PrintStream: void println()>();

        r37 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke r37.<java.io.PrintStream: void println(java.lang.String)>("\t** DFA transition table **");

     label21:
        return;
    }

    void print_set(java.util.Vector)
    {
        JLex.CLexGen r0;
        java.util.Vector r1;
        int i0, i1, i2;
        JLex.CNfa r2;
        java.lang.Object r3;
        java.lang.StringBuilder r4, r6, r7;
        java.io.PrintStream r5, r9;
        java.lang.String r8;

        r0 := @this: JLex.CLexGen;

        r1 := @parameter0: java.util.Vector;

        i0 = virtualinvoke r1.<java.util.Vector: int size()>();

        if 0 != i0 goto label1;

        r9 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke r9.<java.io.PrintStream: void print(java.lang.String)>("empty ");

     label1:
        i2 = 0;

     label2:
        if i2 >= i0 goto label3;

        r3 = virtualinvoke r1.<java.util.Vector: java.lang.Object elementAt(int)>(i2);

        r2 = (JLex.CNfa) r3;

        r5 = <java.lang.System: java.io.PrintStream out>;

        r4 = new java.lang.StringBuilder;

        specialinvoke r4.<java.lang.StringBuilder: void <init>()>();

        i1 = r2.<JLex.CNfa: int m_label>;

        r6 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        r7 = virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        r8 = virtualinvoke r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r5.<java.io.PrintStream: void print(java.lang.String)>(r8);

        i2 = i2 + 1;

        goto label2;

     label3:
        return;
    }

    private void print_header()
    {
        JLex.CLexGen r0;
        java.util.Enumeration r1;
        JLex.CDTrans r2;
        java.lang.String r3, r5, r29, r33, r50, r60, r66, r78, r84, r90, r96, r106, r109, r119, r120, r121, r122, r123;
        JLex.CAccept r4, r69, r75, r79, r80;
        java.lang.Integer r6;
        java.io.PrintStream r7, r12, r13, r23, r36, r39, r41, r42, r43, r45, r52, r62, r71, r86, r92, r102, r112, r114;
        JLex.CSpec r8, r10, r14, r17, r19, r34, r54, r57, r67, r98, r110, r116, r124;
        java.util.Hashtable r9, r99;
        java.util.Vector r11, r15, r18, r20;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, i22, i23, i24, i25, i26;
        java.lang.Object r16, r21, r97, r100;
        java.lang.StringBuilder r22, r24, r25, r26, r27, r28, r31, r32, r44, r46, r48, r49, r51, r53, r56, r59, r61, r63, r64, r65, r70, r72, r73, r74, r76, r77, r82, r83, r85, r87, r88, r89, r91, r93, r94, r95, r101, r103, r104, r105, r107, r108, r113, r115, r118;
        char[] r30, r81;
        int[] r35, r37, r38, r40, r47, r55, r58, r68, r111, r117;
        boolean z0, z1, z2;

        r0 := @this: JLex.CLexGen;

        i21 = 0;

        r7 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke r7.<java.io.PrintStream: void println(java.lang.String)>("/*---------------------- DFA -----------------------");

        r8 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        r9 = r8.<JLex.CSpec: java.util.Hashtable m_states>;

        r1 = virtualinvoke r9.<java.util.Hashtable: java.util.Enumeration keys()>();

     label01:
        z0 = interfaceinvoke r1.<java.util.Enumeration: boolean hasMoreElements()>();

        if z0 == 0 goto label07;

        r97 = interfaceinvoke r1.<java.util.Enumeration: java.lang.Object nextElement()>();

        r5 = (java.lang.String) r97;

        r98 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        r99 = r98.<JLex.CSpec: java.util.Hashtable m_states>;

        r100 = virtualinvoke r99.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r5);

        r6 = (java.lang.Integer) r100;

        if null == r5 goto label02;

        z1 = 1;

        goto label03;

     label02:
        z1 = 0;

     label03:
        staticinvoke <JLex.CUtility: void ASSERT(boolean)>(z1);

        if null == r6 goto label04;

        z2 = 1;

        goto label05;

     label04:
        z2 = 0;

     label05:
        staticinvoke <JLex.CUtility: void ASSERT(boolean)>(z2);

        r102 = <java.lang.System: java.io.PrintStream out>;

        r101 = new java.lang.StringBuilder;

        specialinvoke r101.<java.lang.StringBuilder: void <init>()>();

        r103 = virtualinvoke r101.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("State \"");

        r104 = virtualinvoke r103.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        r105 = virtualinvoke r104.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" has identifying index ");

        r106 = virtualinvoke r6.<java.lang.Integer: java.lang.String toString()>();

        r107 = virtualinvoke r105.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r106);

        r108 = virtualinvoke r107.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        r109 = virtualinvoke r108.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r102.<java.io.PrintStream: void println(java.lang.String)>(r109);

        i22 = virtualinvoke r6.<java.lang.Integer: int intValue()>();

        r110 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        r111 = r110.<JLex.CSpec: int[] m_state_dtrans>;

        i19 = r111[i22];

        if -1 == i19 goto label06;

        r114 = <java.lang.System: java.io.PrintStream out>;

        r113 = new java.lang.StringBuilder;

        specialinvoke r113.<java.lang.StringBuilder: void <init>()>();

        r115 = virtualinvoke r113.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\tStart index in transition table: ");

        r116 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        r117 = r116.<JLex.CSpec: int[] m_state_dtrans>;

        i20 = r117[i22];

        r118 = virtualinvoke r115.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i20);

        r119 = virtualinvoke r118.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r114.<java.io.PrintStream: void println(java.lang.String)>(r119);

        goto label01;

     label06:
        r112 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke r112.<java.io.PrintStream: void println(java.lang.String)>("\tNo associated transition states.");

        goto label01;

     label07:
        i23 = 0;

     label08:
        r10 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        r11 = r10.<JLex.CSpec: java.util.Vector m_dtrans_vector>;

        i0 = virtualinvoke r11.<java.util.Vector: int size()>();

        if i23 >= i0 goto label26;

        r14 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        r15 = r14.<JLex.CSpec: java.util.Vector m_dtrans_vector>;

        r16 = virtualinvoke r15.<java.util.Vector: java.lang.Object elementAt(int)>(i23);

        r2 = (JLex.CDTrans) r16;

        r17 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        r18 = r17.<JLex.CSpec: java.util.Vector m_accept_vector>;

        if null != r18 goto label14;

        r67 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        r68 = r67.<JLex.CSpec: int[] m_anchor_array>;

        if null != r68 goto label14;

        r69 = r2.<JLex.CDTrans: JLex.CAccept m_accept>;

        if null != r69 goto label09;

        r92 = <java.lang.System: java.io.PrintStream out>;

        r91 = new java.lang.StringBuilder;

        specialinvoke r91.<java.lang.StringBuilder: void <init>()>();

        r93 = virtualinvoke r91.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" * State ");

        r94 = virtualinvoke r93.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i23);

        r95 = virtualinvoke r94.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [nonaccepting]");

        r96 = virtualinvoke r95.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r92.<java.io.PrintStream: void print(java.lang.String)>(r96);

        goto label20;

     label09:
        r71 = <java.lang.System: java.io.PrintStream out>;

        r70 = new java.lang.StringBuilder;

        specialinvoke r70.<java.lang.StringBuilder: void <init>()>();

        r72 = virtualinvoke r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" * State ");

        r73 = virtualinvoke r72.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i23);

        r74 = virtualinvoke r73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [accepting, line ");

        r75 = r2.<JLex.CDTrans: JLex.CAccept m_accept>;

        i12 = r75.<JLex.CAccept: int m_line_number>;

        r76 = virtualinvoke r74.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i12);

        r77 = virtualinvoke r76.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" <");

        r78 = new java.lang.String;

        r79 = r2.<JLex.CDTrans: JLex.CAccept m_accept>;

        r81 = r79.<JLex.CAccept: char[] m_action>;

        r80 = r2.<JLex.CDTrans: JLex.CAccept m_accept>;

        i13 = r80.<JLex.CAccept: int m_action_read>;

        specialinvoke r78.<java.lang.String: void <init>(char[],int,int)>(r81, 0, i13);

        r82 = virtualinvoke r77.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r78);

        r83 = virtualinvoke r82.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">]");

        r84 = virtualinvoke r83.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r71.<java.io.PrintStream: void print(java.lang.String)>(r84);

        i14 = r2.<JLex.CDTrans: int m_anchor>;

        if 0 == i14 goto label20;

        r86 = <java.lang.System: java.io.PrintStream out>;

        r85 = new java.lang.StringBuilder;

        specialinvoke r85.<java.lang.StringBuilder: void <init>()>();

        r87 = virtualinvoke r85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Anchor: ");

        i15 = r2.<JLex.CDTrans: int m_anchor>;

        i16 = i15 & 1;

        if 0 == i16 goto label10;

        r120 = "start ";

        goto label11;

     label10:
        r120 = "";

     label11:
        r88 = virtualinvoke r87.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r120);

        i17 = r2.<JLex.CDTrans: int m_anchor>;

        i18 = i17 & 2;

        if 0 == i18 goto label12;

        r121 = "end ";

        goto label13;

     label12:
        r121 = "";

     label13:
        r89 = virtualinvoke r88.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r121);

        r90 = virtualinvoke r89.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r86.<java.io.PrintStream: void print(java.lang.String)>(r90);

        goto label20;

     label14:
        r19 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        r20 = r19.<JLex.CSpec: java.util.Vector m_accept_vector>;

        r21 = virtualinvoke r20.<java.util.Vector: java.lang.Object elementAt(int)>(i23);

        r4 = (JLex.CAccept) r21;

        if null != r4 goto label15;

        r62 = <java.lang.System: java.io.PrintStream out>;

        r61 = new java.lang.StringBuilder;

        specialinvoke r61.<java.lang.StringBuilder: void <init>()>();

        r63 = virtualinvoke r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" * State ");

        r64 = virtualinvoke r63.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i23);

        r65 = virtualinvoke r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [nonaccepting]");

        r66 = virtualinvoke r65.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r62.<java.io.PrintStream: void print(java.lang.String)>(r66);

        goto label20;

     label15:
        r23 = <java.lang.System: java.io.PrintStream out>;

        r22 = new java.lang.StringBuilder;

        specialinvoke r22.<java.lang.StringBuilder: void <init>()>();

        r24 = virtualinvoke r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" * State ");

        r25 = virtualinvoke r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i23);

        r26 = virtualinvoke r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [accepting, line ");

        i1 = r4.<JLex.CAccept: int m_line_number>;

        r27 = virtualinvoke r26.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        r28 = virtualinvoke r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" <");

        r29 = new java.lang.String;

        r30 = r4.<JLex.CAccept: char[] m_action>;

        i2 = r4.<JLex.CAccept: int m_action_read>;

        specialinvoke r29.<java.lang.String: void <init>(char[],int,int)>(r30, 0, i2);

        r31 = virtualinvoke r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r29);

        r32 = virtualinvoke r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">]");

        r33 = virtualinvoke r32.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r23.<java.io.PrintStream: void print(java.lang.String)>(r33);

        r34 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        r35 = r34.<JLex.CSpec: int[] m_anchor_array>;

        i3 = r35[i23];

        if 0 == i3 goto label20;

        r52 = <java.lang.System: java.io.PrintStream out>;

        r51 = new java.lang.StringBuilder;

        specialinvoke r51.<java.lang.StringBuilder: void <init>()>();

        r53 = virtualinvoke r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Anchor: ");

        r54 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        r55 = r54.<JLex.CSpec: int[] m_anchor_array>;

        i8 = r55[i23];

        i9 = i8 & 1;

        if 0 == i9 goto label16;

        r122 = "start ";

        goto label17;

     label16:
        r122 = "";

     label17:
        r56 = virtualinvoke r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r122);

        r57 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        r58 = r57.<JLex.CSpec: int[] m_anchor_array>;

        i10 = r58[i23];

        i11 = i10 & 2;

        if 0 == i11 goto label18;

        r123 = "end ";

        goto label19;

     label18:
        r123 = "";

     label19:
        r59 = virtualinvoke r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r123);

        r60 = virtualinvoke r59.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r52.<java.io.PrintStream: void print(java.lang.String)>(r60);

     label20:
        i24 = -1;

        i25 = 0;

     label21:
        r124 = r0.<JLex.CLexGen: JLex.CSpec m_spec>;

        i26 = r124.<JLex.CSpec: int m_dtrans_ncols>;

        if i25 >= i26 goto label25;

        r37 = r2.<JLex.CDTrans: int[] m_dtrans>;

        i4 = r37[i25];

        if -1 == i4 goto label24;

        r38 = r2.<JLex.CDTrans: int[] m_dtrans>;

        i5 = r38[i25];

        if i24 == i5 goto label22;

        r43 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke r43.<java.io.PrintStream: void println()>();

        r45 = <java.lang.System: java.io.PrintStream out>;

        r44 = new java.lang.StringBuilder;

        specialinvoke r44.<java.lang.StringBuilder: void <init>()>();

        r46 = virtualinvoke r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" *    goto ");

        r47 = r2.<JLex.CDTrans: int[] m_dtrans>;

        i7 = r47[i25];

        r48 = virtualinvoke r46.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i7);

        r49 = virtualinvoke r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" on ");

        r50 = virtualinvoke r49.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r45.<java.io.PrintStream: void print(java.lang.String)>(r50);

        i21 = 0;

     label22:
        r3 = specialinvoke r0.<JLex.CLexGen: java.lang.String interp_int(int)>(i25);

        r39 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke r39.<java.io.PrintStream: void print(java.lang.String)>(r3);

        i6 = virtualinvoke r3.<java.lang.String: int length()>();

        i21 = i21 + i6;

        if 56 >= i21 goto label23;

        r41 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke r41.<java.io.PrintStream: void println()>();

        r42 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke r42.<java.io.PrintStream: void print(java.lang.String)>(" *             ");

        i21 = 0;

     label23:
        r40 = r2.<JLex.CDTrans: int[] m_dtrans>;

        i24 = r40[i25];

     label24:
        i25 = i25 + 1;

        goto label21;

     label25:
        r36 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke r36.<java.io.PrintStream: void println()>();

        i23 = i23 + 1;

        goto label08;

     label26:
        r12 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke r12.<java.io.PrintStream: void println(java.lang.String)>(" */");

        r13 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke r13.<java.io.PrintStream: void println()>();

        return;
    }

    public static void <clinit>()
    {
        <JLex.CLexGen: int PLUS_CLOSE> = 17;

        <JLex.CLexGen: int OR> = 16;

        <JLex.CLexGen: int OPTIONAL> = 15;

        <JLex.CLexGen: int OPEN_PAREN> = 14;

        <JLex.CLexGen: int OPEN_CURLY> = 13;

        <JLex.CLexGen: int L> = 12;

        <JLex.CLexGen: int END_OF_INPUT> = 11;

        <JLex.CLexGen: int DASH> = 10;

        <JLex.CLexGen: int CLOSURE> = 9;

        <JLex.CLexGen: int CLOSE_PAREN> = 8;

        <JLex.CLexGen: int CLOSE_CURLY> = 7;

        <JLex.CLexGen: int CCL_START> = 6;

        <JLex.CLexGen: int CCL_END> = 5;

        <JLex.CLexGen: int AT_EOL> = 4;

        <JLex.CLexGen: int AT_BOL> = 3;

        <JLex.CLexGen: int ANY> = 2;

        <JLex.CLexGen: int EOS> = 1;

        <JLex.CLexGen: int BUFFER_SIZE> = 1024;

        <JLex.CLexGen: boolean NOT_ERROR> = 1;

        <JLex.CLexGen: boolean ERROR> = 0;

        return;
    }
}
