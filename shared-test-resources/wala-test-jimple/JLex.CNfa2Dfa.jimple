class JLex.CNfa2Dfa extends java.lang.Object
{
    private JLex.CSpec m_spec;
    private int m_unmarked_dfa;
    private JLex.CLexGen m_lexGen;
    private static final int NOT_IN_DSTATES;

    void <init>()
    {
        JLex.CNfa2Dfa r0;

        r0 := @this: JLex.CNfa2Dfa;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        specialinvoke r0.<JLex.CNfa2Dfa: void reset()>();

        return;
    }

    private void set(JLex.CLexGen, JLex.CSpec)
    {
        JLex.CNfa2Dfa r0;
        JLex.CLexGen r1;
        JLex.CSpec r2;

        r0 := @this: JLex.CNfa2Dfa;

        r1 := @parameter0: JLex.CLexGen;

        r2 := @parameter1: JLex.CSpec;

        r0.<JLex.CNfa2Dfa: JLex.CLexGen m_lexGen> = r1;

        r0.<JLex.CNfa2Dfa: JLex.CSpec m_spec> = r2;

        r0.<JLex.CNfa2Dfa: int m_unmarked_dfa> = 0;

        return;
    }

    private void reset()
    {
        JLex.CNfa2Dfa r0;

        r0 := @this: JLex.CNfa2Dfa;

        r0.<JLex.CNfa2Dfa: JLex.CLexGen m_lexGen> = null;

        r0.<JLex.CNfa2Dfa: JLex.CSpec m_spec> = null;

        r0.<JLex.CNfa2Dfa: int m_unmarked_dfa> = 0;

        return;
    }

    void make_dfa(JLex.CLexGen, JLex.CSpec)
    {
        JLex.CNfa2Dfa r0;
        JLex.CLexGen r1;
        JLex.CSpec r2, r3;
        boolean z0;

        r0 := @this: JLex.CNfa2Dfa;

        r1 := @parameter0: JLex.CLexGen;

        r2 := @parameter1: JLex.CSpec;

        specialinvoke r0.<JLex.CNfa2Dfa: void reset()>();

        specialinvoke r0.<JLex.CNfa2Dfa: void set(JLex.CLexGen,JLex.CSpec)>(r1, r2);

        specialinvoke r0.<JLex.CNfa2Dfa: void make_dtrans()>();

        specialinvoke r0.<JLex.CNfa2Dfa: void free_nfa_states()>();

        r3 = r0.<JLex.CNfa2Dfa: JLex.CSpec m_spec>;

        z0 = r3.<JLex.CSpec: boolean m_verbose>;

        if z0 == 0 goto label1;

     label1:
        specialinvoke r0.<JLex.CNfa2Dfa: void free_dfa_states()>();

        return;
    }

    private void make_dtrans()
    {
        JLex.CNfa2Dfa r0;
        int i0, i1, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15;
        JLex.CNfa r4;
        java.io.PrintStream r5, r11, r25, r26;
        JLex.CBunch r6;
        JLex.CSpec r7, r10, r12, r20, r21, r28, r30, r32, r34, r36, r48, r50;
        java.util.Vector[] r8, r13;
        int[] r9, r23, r42;
        java.util.Vector r14, r16, r17, r19, r22, r29, r33, r35, r38, r39, r40, r41, r45, r49, r51;
        java.lang.Object r15, r46;
        JLex.SparseBitSet r18, r37, r43, r44, r47;
        JLex.CDfa r24;
        boolean z0, z1, z2, z3, z4, z5, z6;
        JLex.CDTrans r27;
        JLex.CAccept r31;

        r0 := @this: JLex.CNfa2Dfa;

        r5 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke r5.<java.io.PrintStream: void print(java.lang.String)>("Working on DFA states.");

        r6 = new JLex.CBunch;

        specialinvoke r6.<JLex.CBunch: void <init>()>();

        r0.<JLex.CNfa2Dfa: int m_unmarked_dfa> = 0;

        r7 = r0.<JLex.CNfa2Dfa: JLex.CSpec m_spec>;

        r8 = r7.<JLex.CSpec: java.util.Vector[] m_state_rules>;

        i1 = lengthof r8;

        r10 = r0.<JLex.CNfa2Dfa: JLex.CSpec m_spec>;

        r9 = newarray (int)[i1];

        r10.<JLex.CSpec: int[] m_state_dtrans> = r9;

        i10 = 0;

     label01:
        if i1 <= i10 goto label25;

        r12 = r0.<JLex.CNfa2Dfa: JLex.CSpec m_spec>;

        r13 = r12.<JLex.CSpec: java.util.Vector[] m_state_rules>;

        r14 = r13[i10];

        r15 = virtualinvoke r14.<java.util.Vector: java.lang.Object clone()>();

        r16 = (java.util.Vector) r15;

        r6.<JLex.CBunch: java.util.Vector m_nfa_set> = r16;

        r17 = r6.<JLex.CBunch: java.util.Vector m_nfa_set>;

        specialinvoke r0.<JLex.CNfa2Dfa: void sortStates(java.util.Vector)>(r17);

        r18 = new JLex.SparseBitSet;

        specialinvoke r18.<JLex.SparseBitSet: void <init>()>();

        r6.<JLex.CBunch: JLex.SparseBitSet m_nfa_bit> = r18;

        r19 = r6.<JLex.CBunch: java.util.Vector m_nfa_set>;

        i0 = virtualinvoke r19.<java.util.Vector: int size()>();

        i11 = 0;

     label02:
        if i0 <= i11 goto label03;

        r45 = r6.<JLex.CBunch: java.util.Vector m_nfa_set>;

        r46 = virtualinvoke r45.<java.util.Vector: java.lang.Object elementAt(int)>(i11);

        r4 = (JLex.CNfa) r46;

        r47 = r6.<JLex.CBunch: JLex.SparseBitSet m_nfa_bit>;

        i9 = r4.<JLex.CNfa: int m_label>;

        virtualinvoke r47.<JLex.SparseBitSet: void set(int)>(i9);

        i11 = i11 + 1;

        goto label02;

     label03:
        r6.<JLex.CBunch: JLex.CAccept m_accept> = null;

        r6.<JLex.CBunch: int m_anchor> = 0;

        r6.<JLex.CBunch: int m_accept_index> = 2147483647;

        specialinvoke r0.<JLex.CNfa2Dfa: void e_closure(JLex.CBunch)>(r6);

        specialinvoke r0.<JLex.CNfa2Dfa: int add_to_dstates(JLex.CBunch)>(r6);

        r20 = r0.<JLex.CNfa2Dfa: JLex.CSpec m_spec>;

        r23 = r20.<JLex.CSpec: int[] m_state_dtrans>;

        r21 = r0.<JLex.CNfa2Dfa: JLex.CSpec m_spec>;

        r22 = r21.<JLex.CSpec: java.util.Vector m_dtrans_vector>;

        i3 = virtualinvoke r22.<java.util.Vector: int size()>();

        r23[i10] = i3;

     label04:
        r24 = specialinvoke r0.<JLex.CNfa2Dfa: JLex.CDfa get_unmarked()>();

        if null == r24 goto label24;

        r25 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke r25.<java.io.PrintStream: void print(java.lang.String)>(".");

        r26 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke r26.<java.io.PrintStream: void flush()>();

        z0 = r24.<JLex.CDfa: boolean m_mark>;

        if 0 != z0 goto label05;

        z1 = 1;

        goto label06;

     label05:
        z1 = 0;

     label06:
        staticinvoke <JLex.CUtility: void ASSERT(boolean)>(z1);

        r24.<JLex.CDfa: boolean m_mark> = 1;

        r27 = new JLex.CDTrans;

        r28 = r0.<JLex.CNfa2Dfa: JLex.CSpec m_spec>;

        r29 = r28.<JLex.CSpec: java.util.Vector m_dtrans_vector>;

        i4 = virtualinvoke r29.<java.util.Vector: int size()>();

        r30 = r0.<JLex.CNfa2Dfa: JLex.CSpec m_spec>;

        specialinvoke r27.<JLex.CDTrans: void <init>(int,JLex.CSpec)>(i4, r30);

        r31 = r24.<JLex.CDfa: JLex.CAccept m_accept>;

        r27.<JLex.CDTrans: JLex.CAccept m_accept> = r31;

        i5 = r24.<JLex.CDfa: int m_anchor>;

        r27.<JLex.CDTrans: int m_anchor> = i5;

        i12 = 0;

     label07:
        r48 = r0.<JLex.CNfa2Dfa: JLex.CSpec m_spec>;

        i13 = r48.<JLex.CSpec: int m_dtrans_ncols>;

        if i12 >= i13 goto label21;

        if 0 > i12 goto label08;

        z2 = 1;

        goto label09;

     label08:
        z2 = 0;

     label09:
        staticinvoke <JLex.CUtility: void ASSERT(boolean)>(z2);

        r36 = r0.<JLex.CNfa2Dfa: JLex.CSpec m_spec>;

        i8 = r36.<JLex.CSpec: int m_dtrans_ncols>;

        if i8 <= i12 goto label10;

        z3 = 1;

        goto label11;

     label10:
        z3 = 0;

     label11:
        staticinvoke <JLex.CUtility: void ASSERT(boolean)>(z3);

        r38 = r24.<JLex.CDfa: java.util.Vector m_nfa_set>;

        r37 = r24.<JLex.CDfa: JLex.SparseBitSet m_nfa_bit>;

        virtualinvoke r0.<JLex.CNfa2Dfa: void move(java.util.Vector,JLex.SparseBitSet,int,JLex.CBunch)>(r38, r37, i12, r6);

        r39 = r6.<JLex.CBunch: java.util.Vector m_nfa_set>;

        if null == r39 goto label12;

        specialinvoke r0.<JLex.CNfa2Dfa: void e_closure(JLex.CBunch)>(r6);

     label12:
        r40 = r6.<JLex.CBunch: java.util.Vector m_nfa_set>;

        if null != r40 goto label13;

        r44 = r6.<JLex.CBunch: JLex.SparseBitSet m_nfa_bit>;

        if null == r44 goto label14;

     label13:
        r41 = r6.<JLex.CBunch: java.util.Vector m_nfa_set>;

        if null == r41 goto label15;

        r43 = r6.<JLex.CBunch: JLex.SparseBitSet m_nfa_bit>;

        if null == r43 goto label15;

     label14:
        z4 = 1;

        goto label16;

     label15:
        z4 = 0;

     label16:
        staticinvoke <JLex.CUtility: void ASSERT(boolean)>(z4);

        r49 = r6.<JLex.CBunch: java.util.Vector m_nfa_set>;

        if null != r49 goto label17;

        i14 = -1;

        goto label18;

     label17:
        i14 = specialinvoke r0.<JLex.CNfa2Dfa: int in_dstates(JLex.CBunch)>(r6);

        if -1 != i14 goto label18;

        i14 = specialinvoke r0.<JLex.CNfa2Dfa: int add_to_dstates(JLex.CBunch)>(r6);

     label18:
        r50 = r0.<JLex.CNfa2Dfa: JLex.CSpec m_spec>;

        r51 = r50.<JLex.CSpec: java.util.Vector m_dfa_states>;

        i15 = virtualinvoke r51.<java.util.Vector: int size()>();

        if i14 >= i15 goto label19;

        z5 = 1;

        goto label20;

     label19:
        z5 = 0;

     label20:
        staticinvoke <JLex.CUtility: void ASSERT(boolean)>(z5);

        r42 = r27.<JLex.CDTrans: int[] m_dtrans>;

        r42[i12] = i14;

        i12 = i12 + 1;

        goto label07;

     label21:
        r32 = r0.<JLex.CNfa2Dfa: JLex.CSpec m_spec>;

        r33 = r32.<JLex.CSpec: java.util.Vector m_dtrans_vector>;

        i6 = virtualinvoke r33.<java.util.Vector: int size()>();

        i7 = r24.<JLex.CDfa: int m_label>;

        if i6 != i7 goto label22;

        z6 = 1;

        goto label23;

     label22:
        z6 = 0;

     label23:
        staticinvoke <JLex.CUtility: void ASSERT(boolean)>(z6);

        r34 = r0.<JLex.CNfa2Dfa: JLex.CSpec m_spec>;

        r35 = r34.<JLex.CSpec: java.util.Vector m_dtrans_vector>;

        virtualinvoke r35.<java.util.Vector: void addElement(java.lang.Object)>(r27);

        goto label04;

     label24:
        i10 = i10 + 1;

        goto label01;

     label25:
        r11 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke r11.<java.io.PrintStream: void println()>();

        return;
    }

    private void free_dfa_states()
    {
        JLex.CNfa2Dfa r0;
        JLex.CSpec r1, r2;

        r0 := @this: JLex.CNfa2Dfa;

        r1 = r0.<JLex.CNfa2Dfa: JLex.CSpec m_spec>;

        r1.<JLex.CSpec: java.util.Vector m_dfa_states> = null;

        r2 = r0.<JLex.CNfa2Dfa: JLex.CSpec m_spec>;

        r2.<JLex.CSpec: java.util.Hashtable m_dfa_sets> = null;

        return;
    }

    private void free_nfa_states()
    {
        JLex.CNfa2Dfa r0;
        JLex.CSpec r1, r2, r3;

        r0 := @this: JLex.CNfa2Dfa;

        r1 = r0.<JLex.CNfa2Dfa: JLex.CSpec m_spec>;

        r1.<JLex.CSpec: java.util.Vector m_nfa_states> = null;

        r2 = r0.<JLex.CNfa2Dfa: JLex.CSpec m_spec>;

        r2.<JLex.CSpec: JLex.CNfa m_nfa_start> = null;

        r3 = r0.<JLex.CNfa2Dfa: JLex.CSpec m_spec>;

        r3.<JLex.CSpec: java.util.Vector[] m_state_rules> = null;

        return;
    }

    private void e_closure(JLex.CBunch)
    {
        JLex.CNfa2Dfa r0;
        JLex.CBunch r1;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16;
        java.util.Vector r3, r6, r7, r8, r13, r19, r23, r29, r34;
        JLex.SparseBitSet r4, r15, r17, r25, r27, r36;
        java.util.Stack r5;
        java.lang.Object r9, r35;
        JLex.CAccept r10, r32, r33;
        JLex.CNfa r11, r12, r14, r16, r18, r20, r22, r24, r26, r28, r30, r38, r39, r40;
        boolean z0, z1, z2, z3, z4, z5, z6, z7, z8, z9, z10, z11, z12;

        r0 := @this: JLex.CNfa2Dfa;

        r1 := @parameter0: JLex.CBunch;

        if null == r1 goto label01;

        z5 = 1;

        goto label02;

     label01:
        z5 = 0;

     label02:
        staticinvoke <JLex.CUtility: void ASSERT(boolean)>(z5);

        r3 = r1.<JLex.CBunch: java.util.Vector m_nfa_set>;

        if null == r3 goto label03;

        z6 = 1;

        goto label04;

     label03:
        z6 = 0;

     label04:
        staticinvoke <JLex.CUtility: void ASSERT(boolean)>(z6);

        r4 = r1.<JLex.CBunch: JLex.SparseBitSet m_nfa_bit>;

        if null == r4 goto label05;

        z7 = 1;

        goto label06;

     label05:
        z7 = 0;

     label06:
        staticinvoke <JLex.CUtility: void ASSERT(boolean)>(z7);

        r1.<JLex.CBunch: JLex.CAccept m_accept> = null;

        r1.<JLex.CBunch: int m_anchor> = 0;

        r1.<JLex.CBunch: int m_accept_index> = 2147483647;

        r5 = new java.util.Stack;

        specialinvoke r5.<java.util.Stack: void <init>()>();

        r6 = r1.<JLex.CBunch: java.util.Vector m_nfa_set>;

        i0 = virtualinvoke r6.<java.util.Vector: int size()>();

        i15 = 0;

     label07:
        if i15 >= i0 goto label08;

        r34 = r1.<JLex.CBunch: java.util.Vector m_nfa_set>;

        r35 = virtualinvoke r34.<java.util.Vector: java.lang.Object elementAt(int)>(i15);

        r38 = (JLex.CNfa) r35;

        r36 = r1.<JLex.CBunch: JLex.SparseBitSet m_nfa_bit>;

        i14 = r38.<JLex.CNfa: int m_label>;

        z4 = virtualinvoke r36.<JLex.SparseBitSet: boolean get(int)>(i14);

        staticinvoke <JLex.CUtility: void ASSERT(boolean)>(z4);

        virtualinvoke r5.<java.util.Stack: java.lang.Object push(java.lang.Object)>(r38);

        i15 = i15 + 1;

        goto label07;

     label08:
        z8 = virtualinvoke r5.<java.util.Stack: boolean empty()>();

        if 0 != z8 goto label20;

        r9 = virtualinvoke r5.<java.util.Stack: java.lang.Object pop()>();

        r39 = (JLex.CNfa) r9;

        r10 = r39.<JLex.CNfa: JLex.CAccept m_accept>;

        if null == r10 goto label14;

        i6 = r39.<JLex.CNfa: int m_label>;

        i5 = r1.<JLex.CBunch: int m_accept_index>;

        if i6 >= i5 goto label14;

        i7 = r39.<JLex.CNfa: int m_label>;

        r1.<JLex.CBunch: int m_accept_index> = i7;

        r32 = r39.<JLex.CNfa: JLex.CAccept m_accept>;

        r1.<JLex.CBunch: JLex.CAccept m_accept> = r32;

        i8 = r39.<JLex.CNfa: int m_anchor>;

        r1.<JLex.CBunch: int m_anchor> = i8;

        r33 = r1.<JLex.CBunch: JLex.CAccept m_accept>;

        if null == r33 goto label09;

        z9 = 1;

        goto label10;

     label09:
        z9 = 0;

     label10:
        staticinvoke <JLex.CUtility: void ASSERT(boolean)>(z9);

        i9 = r1.<JLex.CBunch: int m_anchor>;

        if 0 == i9 goto label11;

        i10 = r1.<JLex.CBunch: int m_anchor>;

        i11 = i10 & 2;

        if 0 != i11 goto label11;

        i12 = r1.<JLex.CBunch: int m_anchor>;

        i13 = i12 & 1;

        if 0 == i13 goto label12;

     label11:
        z10 = 1;

        goto label13;

     label12:
        z10 = 0;

     label13:
        staticinvoke <JLex.CUtility: void ASSERT(boolean)>(z10);

     label14:
        i16 = r39.<JLex.CNfa: int m_edge>;

        if -3 != i16 goto label08;

        r11 = r39.<JLex.CNfa: JLex.CNfa m_next>;

        if null == r11 goto label17;

        r23 = r1.<JLex.CBunch: java.util.Vector m_nfa_set>;

        r22 = r39.<JLex.CNfa: JLex.CNfa m_next>;

        z2 = virtualinvoke r23.<java.util.Vector: boolean contains(java.lang.Object)>(r22);

        if 0 != z2 goto label17;

        r25 = r1.<JLex.CBunch: JLex.SparseBitSet m_nfa_bit>;

        r24 = r39.<JLex.CNfa: JLex.CNfa m_next>;

        i3 = r24.<JLex.CNfa: int m_label>;

        z3 = virtualinvoke r25.<JLex.SparseBitSet: boolean get(int)>(i3);

        if 0 != z3 goto label15;

        z11 = 1;

        goto label16;

     label15:
        z11 = 0;

     label16:
        staticinvoke <JLex.CUtility: void ASSERT(boolean)>(z11);

        r27 = r1.<JLex.CBunch: JLex.SparseBitSet m_nfa_bit>;

        r26 = r39.<JLex.CNfa: JLex.CNfa m_next>;

        i4 = r26.<JLex.CNfa: int m_label>;

        virtualinvoke r27.<JLex.SparseBitSet: void set(int)>(i4);

        r29 = r1.<JLex.CBunch: java.util.Vector m_nfa_set>;

        r28 = r39.<JLex.CNfa: JLex.CNfa m_next>;

        virtualinvoke r29.<java.util.Vector: void addElement(java.lang.Object)>(r28);

        r30 = r39.<JLex.CNfa: JLex.CNfa m_next>;

        virtualinvoke r5.<java.util.Stack: java.lang.Object push(java.lang.Object)>(r30);

     label17:
        r40 = r39.<JLex.CNfa: JLex.CNfa m_next2>;

        if null == r40 goto label08;

        r13 = r1.<JLex.CBunch: java.util.Vector m_nfa_set>;

        r12 = r39.<JLex.CNfa: JLex.CNfa m_next2>;

        z0 = virtualinvoke r13.<java.util.Vector: boolean contains(java.lang.Object)>(r12);

        if 0 != z0 goto label08;

        r15 = r1.<JLex.CBunch: JLex.SparseBitSet m_nfa_bit>;

        r14 = r39.<JLex.CNfa: JLex.CNfa m_next2>;

        i1 = r14.<JLex.CNfa: int m_label>;

        z1 = virtualinvoke r15.<JLex.SparseBitSet: boolean get(int)>(i1);

        if 0 != z1 goto label18;

        z12 = 1;

        goto label19;

     label18:
        z12 = 0;

     label19:
        staticinvoke <JLex.CUtility: void ASSERT(boolean)>(z12);

        r17 = r1.<JLex.CBunch: JLex.SparseBitSet m_nfa_bit>;

        r16 = r39.<JLex.CNfa: JLex.CNfa m_next2>;

        i2 = r16.<JLex.CNfa: int m_label>;

        virtualinvoke r17.<JLex.SparseBitSet: void set(int)>(i2);

        r19 = r1.<JLex.CBunch: java.util.Vector m_nfa_set>;

        r18 = r39.<JLex.CNfa: JLex.CNfa m_next2>;

        virtualinvoke r19.<java.util.Vector: void addElement(java.lang.Object)>(r18);

        r20 = r39.<JLex.CNfa: JLex.CNfa m_next2>;

        virtualinvoke r5.<java.util.Stack: java.lang.Object push(java.lang.Object)>(r20);

        goto label08;

     label20:
        r7 = r1.<JLex.CBunch: java.util.Vector m_nfa_set>;

        if null == r7 goto label21;

        r8 = r1.<JLex.CBunch: java.util.Vector m_nfa_set>;

        specialinvoke r0.<JLex.CNfa2Dfa: void sortStates(java.util.Vector)>(r8);

     label21:
        return;
    }

    void move(java.util.Vector, JLex.SparseBitSet, int, JLex.CBunch)
    {
        JLex.CNfa2Dfa r0;
        java.util.Vector r1, r5, r7, r9, r11, r14;
        JLex.SparseBitSet r2, r6, r10, r12, r16;
        int i0, i1, i2, i3, i4, i5;
        JLex.CBunch r3;
        JLex.CNfa r4, r15, r17;
        java.lang.Object r8;
        JLex.CSet r13;
        boolean z0, z1, z2;

        r0 := @this: JLex.CNfa2Dfa;

        r1 := @parameter0: java.util.Vector;

        r2 := @parameter1: JLex.SparseBitSet;

        i0 := @parameter2: int;

        r3 := @parameter3: JLex.CBunch;

        r3.<JLex.CBunch: java.util.Vector m_nfa_set> = null;

        r3.<JLex.CBunch: JLex.SparseBitSet m_nfa_bit> = null;

        i1 = virtualinvoke r1.<java.util.Vector: int size()>();

        i4 = 0;

     label01:
        if i4 >= i1 goto label07;

        r8 = virtualinvoke r1.<java.util.Vector: java.lang.Object elementAt(int)>(i4);

        r4 = (JLex.CNfa) r8;

        i2 = r4.<JLex.CNfa: int m_edge>;

        if i0 == i2 goto label02;

        i3 = r4.<JLex.CNfa: int m_edge>;

        if -1 != i3 goto label06;

        r13 = r4.<JLex.CNfa: JLex.CSet m_set>;

        z0 = virtualinvoke r13.<JLex.CSet: boolean contains(int)>(i0);

        if 1 != z0 goto label06;

     label02:
        r9 = r3.<JLex.CBunch: java.util.Vector m_nfa_set>;

        if null != r9 goto label05;

        r10 = r3.<JLex.CBunch: JLex.SparseBitSet m_nfa_bit>;

        if null != r10 goto label03;

        z1 = 1;

        goto label04;

     label03:
        z1 = 0;

     label04:
        staticinvoke <JLex.CUtility: void ASSERT(boolean)>(z1);

        r11 = new java.util.Vector;

        specialinvoke r11.<java.util.Vector: void <init>()>();

        r3.<JLex.CBunch: java.util.Vector m_nfa_set> = r11;

        r12 = new JLex.SparseBitSet;

        specialinvoke r12.<JLex.SparseBitSet: void <init>()>();

        r3.<JLex.CBunch: JLex.SparseBitSet m_nfa_bit> = r12;

     label05:
        r14 = r3.<JLex.CBunch: java.util.Vector m_nfa_set>;

        r15 = r4.<JLex.CNfa: JLex.CNfa m_next>;

        virtualinvoke r14.<java.util.Vector: void addElement(java.lang.Object)>(r15);

        r16 = r3.<JLex.CBunch: JLex.SparseBitSet m_nfa_bit>;

        r17 = r4.<JLex.CNfa: JLex.CNfa m_next>;

        i5 = r17.<JLex.CNfa: int m_label>;

        virtualinvoke r16.<JLex.SparseBitSet: void set(int)>(i5);

     label06:
        i4 = i4 + 1;

        goto label01;

     label07:
        r5 = r3.<JLex.CBunch: java.util.Vector m_nfa_set>;

        if null == r5 goto label10;

        r6 = r3.<JLex.CBunch: JLex.SparseBitSet m_nfa_bit>;

        if null == r6 goto label08;

        z2 = 1;

        goto label09;

     label08:
        z2 = 0;

     label09:
        staticinvoke <JLex.CUtility: void ASSERT(boolean)>(z2);

        r7 = r3.<JLex.CBunch: java.util.Vector m_nfa_set>;

        specialinvoke r0.<JLex.CNfa2Dfa: void sortStates(java.util.Vector)>(r7);

     label10:
        return;
    }

    private void sortStates(java.util.Vector)
    {
        JLex.CNfa2Dfa r0;
        java.util.Vector r1;
        int i0, i1, i2, i3, i4, i5;
        JLex.CNfa r2, r7, r8, r9;
        java.lang.Object r3, r4, r5, r6;

        r0 := @this: JLex.CNfa2Dfa;

        r1 := @parameter0: java.util.Vector;

        i0 = virtualinvoke r1.<java.util.Vector: int size()>();

        i2 = 0;

     label1:
        if i2 >= i0 goto label5;

        r3 = virtualinvoke r1.<java.util.Vector: java.lang.Object elementAt(int)>(i2);

        r7 = (JLex.CNfa) r3;

        i3 = r7.<JLex.CNfa: int m_label>;

        i4 = i2;

        i5 = i2 + 1;

     label2:
        if i5 >= i0 goto label4;

        r6 = virtualinvoke r1.<java.util.Vector: java.lang.Object elementAt(int)>(i5);

        r8 = (JLex.CNfa) r6;

        i1 = r8.<JLex.CNfa: int m_label>;

        if i1 >= i3 goto label3;

        i4 = i5;

        i3 = i1;

     label3:
        i5 = i5 + 1;

        goto label2;

     label4:
        r4 = virtualinvoke r1.<java.util.Vector: java.lang.Object elementAt(int)>(i2);

        r2 = (JLex.CNfa) r4;

        r5 = virtualinvoke r1.<java.util.Vector: java.lang.Object elementAt(int)>(i4);

        r9 = (JLex.CNfa) r5;

        virtualinvoke r1.<java.util.Vector: void setElementAt(java.lang.Object,int)>(r9, i2);

        virtualinvoke r1.<java.util.Vector: void setElementAt(java.lang.Object,int)>(r2, i4);

        i2 = i2 + 1;

        goto label1;

     label5:
        return;
    }

    private JLex.CDfa get_unmarked()
    {
        JLex.CNfa2Dfa r0;
        int i0, i1, i2, i3, i4;
        JLex.CDfa r1;
        JLex.CSpec r2, r4, r7;
        java.util.Vector r3, r5;
        java.lang.Object r6;
        boolean z0, z1;

        r0 := @this: JLex.CNfa2Dfa;

        r2 = r0.<JLex.CNfa2Dfa: JLex.CSpec m_spec>;

        r3 = r2.<JLex.CSpec: java.util.Vector m_dfa_states>;

        i0 = virtualinvoke r3.<java.util.Vector: int size()>();

     label1:
        i1 = r0.<JLex.CNfa2Dfa: int m_unmarked_dfa>;

        if i1 >= i0 goto label4;

        r4 = r0.<JLex.CNfa2Dfa: JLex.CSpec m_spec>;

        r5 = r4.<JLex.CSpec: java.util.Vector m_dfa_states>;

        i2 = r0.<JLex.CNfa2Dfa: int m_unmarked_dfa>;

        r6 = virtualinvoke r5.<java.util.Vector: java.lang.Object elementAt(int)>(i2);

        r1 = (JLex.CDfa) r6;

        z0 = r1.<JLex.CDfa: boolean m_mark>;

        if 0 != z0 goto label3;

        r7 = r0.<JLex.CNfa2Dfa: JLex.CSpec m_spec>;

        z1 = r7.<JLex.CSpec: boolean m_verbose>;

        if z1 == 0 goto label2;

     label2:
        return r1;

     label3:
        i3 = r0.<JLex.CNfa2Dfa: int m_unmarked_dfa>;

        i4 = i3 + 1;

        r0.<JLex.CNfa2Dfa: int m_unmarked_dfa> = i4;

        goto label1;

     label4:
        return null;
    }

    private int add_to_dstates(JLex.CBunch)
    {
        JLex.CNfa2Dfa r0;
        JLex.CBunch r1;
        JLex.CDfa r2;
        java.util.Vector r3, r7, r9;
        JLex.SparseBitSet r4, r10, r12, r15;
        JLex.CAccept r5, r13;
        JLex.CSpec r6, r14;
        java.lang.Object r8, r11;
        int i0, i1, i2;
        java.util.Hashtable r16;
        boolean z0, z1, z2;

        r0 := @this: JLex.CNfa2Dfa;

        r1 := @parameter0: JLex.CBunch;

        r3 = r1.<JLex.CBunch: java.util.Vector m_nfa_set>;

        if null == r3 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        staticinvoke <JLex.CUtility: void ASSERT(boolean)>(z0);

        r4 = r1.<JLex.CBunch: JLex.SparseBitSet m_nfa_bit>;

        if null == r4 goto label3;

        z1 = 1;

        goto label4;

     label3:
        z1 = 0;

     label4:
        staticinvoke <JLex.CUtility: void ASSERT(boolean)>(z1);

        r5 = r1.<JLex.CBunch: JLex.CAccept m_accept>;

        if null != r5 goto label5;

        i2 = r1.<JLex.CBunch: int m_anchor>;

        if 0 != i2 goto label6;

     label5:
        z2 = 1;

        goto label7;

     label6:
        z2 = 0;

     label7:
        staticinvoke <JLex.CUtility: void ASSERT(boolean)>(z2);

        r6 = r0.<JLex.CNfa2Dfa: JLex.CSpec m_spec>;

        r2 = staticinvoke <JLex.CAlloc: JLex.CDfa newCDfa(JLex.CSpec)>(r6);

        r7 = r1.<JLex.CBunch: java.util.Vector m_nfa_set>;

        r8 = virtualinvoke r7.<java.util.Vector: java.lang.Object clone()>();

        r9 = (java.util.Vector) r8;

        r2.<JLex.CDfa: java.util.Vector m_nfa_set> = r9;

        r10 = r1.<JLex.CBunch: JLex.SparseBitSet m_nfa_bit>;

        r11 = virtualinvoke r10.<JLex.SparseBitSet: java.lang.Object clone()>();

        r12 = (JLex.SparseBitSet) r11;

        r2.<JLex.CDfa: JLex.SparseBitSet m_nfa_bit> = r12;

        r13 = r1.<JLex.CBunch: JLex.CAccept m_accept>;

        r2.<JLex.CDfa: JLex.CAccept m_accept> = r13;

        i0 = r1.<JLex.CBunch: int m_anchor>;

        r2.<JLex.CDfa: int m_anchor> = i0;

        r2.<JLex.CDfa: boolean m_mark> = 0;

        r14 = r0.<JLex.CNfa2Dfa: JLex.CSpec m_spec>;

        r16 = r14.<JLex.CSpec: java.util.Hashtable m_dfa_sets>;

        r15 = r2.<JLex.CDfa: JLex.SparseBitSet m_nfa_bit>;

        virtualinvoke r16.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r15, r2);

        i1 = r2.<JLex.CDfa: int m_label>;

        return i1;
    }

    private int in_dstates(JLex.CBunch)
    {
        JLex.CNfa2Dfa r0;
        JLex.CBunch r1;
        JLex.CDfa r2;
        JLex.CSpec r3;
        JLex.SparseBitSet r4;
        java.util.Hashtable r5;
        java.lang.Object r6;
        int i0;

        r0 := @this: JLex.CNfa2Dfa;

        r1 := @parameter0: JLex.CBunch;

        r3 = r0.<JLex.CNfa2Dfa: JLex.CSpec m_spec>;

        r5 = r3.<JLex.CSpec: java.util.Hashtable m_dfa_sets>;

        r4 = r1.<JLex.CBunch: JLex.SparseBitSet m_nfa_bit>;

        r6 = virtualinvoke r5.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r4);

        r2 = (JLex.CDfa) r6;

        if null == r2 goto label1;

        i0 = r2.<JLex.CDfa: int m_label>;

        return i0;

     label1:
        return -1;
    }

    public static void <clinit>()
    {
        <JLex.CNfa2Dfa: int NOT_IN_DSTATES> = -1;

        return;
    }
}
