public class de.upb.soot.concrete.operators.DoubleOps extends java.lang.Object
{

    public void <init>()
    {
        de.upb.soot.concrete.operators.DoubleOps r0;

        r0 := @this: de.upb.soot.concrete.operators.DoubleOps;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void addition()
    {
        de.upb.soot.concrete.operators.DoubleOps r0;
        double d2;
        java.io.PrintStream $r1;

        r0 := @this: de.upb.soot.concrete.operators.DoubleOps;

        d2 = 1.6777217E7 + 5.0;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(double)>(d2);

        return;
    }

    public void subtraction()
    {
        de.upb.soot.concrete.operators.DoubleOps r0;
        double d2;
        java.io.PrintStream $r1;

        r0 := @this: de.upb.soot.concrete.operators.DoubleOps;

        d2 = 5.0 - 1.6777217E7;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(double)>(d2);

        return;
    }

    public void multiplication()
    {
        de.upb.soot.concrete.operators.DoubleOps r0;
        double d2;
        java.io.PrintStream $r1;

        r0 := @this: de.upb.soot.concrete.operators.DoubleOps;

        d2 = 5.0 * 1.6777217E7;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(double)>(d2);

        return;
    }

    public void division()
    {
        de.upb.soot.concrete.operators.DoubleOps r0;
        double d2;
        java.io.PrintStream $r1;

        r0 := @this: de.upb.soot.concrete.operators.DoubleOps;

        d2 = 5.0 / 1.6777217E7;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(double)>(d2);

        return;
    }

    public void modulus()
    {
        de.upb.soot.concrete.operators.DoubleOps r0;
        double d2;
        java.io.PrintStream $r1;

        r0 := @this: de.upb.soot.concrete.operators.DoubleOps;

        d2 = 5.0 % 1.6777217E7;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(double)>(d2);

        return;
    }

    public void simpleAssignmentOperator()
    {
        de.upb.soot.concrete.operators.DoubleOps r0;
        java.io.PrintStream $r1;

        r0 := @this: de.upb.soot.concrete.operators.DoubleOps;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(double)>(1.6777217E7);

        return;
    }

    public void equals()
    {
        de.upb.soot.concrete.operators.DoubleOps r0;
        byte $b0;
        java.io.PrintStream $r1;
        boolean $z1;

        r0 := @this: de.upb.soot.concrete.operators.DoubleOps;

        $b0 = 1.6777217E7 cmpl 5.0;

        if $b0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(boolean)>($z1);

        return;
    }

    public void notEquals()
    {
        de.upb.soot.concrete.operators.DoubleOps r0;
        byte $b0;
        java.io.PrintStream $r1;
        boolean $z1;

        r0 := @this: de.upb.soot.concrete.operators.DoubleOps;

        $b0 = 1.6777217E7 cmpl 5.0;

        if $b0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(boolean)>($z1);

        return;
    }

    public void greateThan()
    {
        de.upb.soot.concrete.operators.DoubleOps r0;
        byte $b0;
        java.io.PrintStream $r1;
        boolean $z1;

        r0 := @this: de.upb.soot.concrete.operators.DoubleOps;

        $b0 = 1.6777217E7 cmpl 5.0;

        if $b0 <= 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(boolean)>($z1);

        return;
    }

    public void lessThan()
    {
        de.upb.soot.concrete.operators.DoubleOps r0;
        byte $b0;
        java.io.PrintStream $r1;
        boolean $z1;

        r0 := @this: de.upb.soot.concrete.operators.DoubleOps;

        $b0 = 1.6777217E7 cmpg 5.0;

        if $b0 >= 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(boolean)>($z1);

        return;
    }

    public void greaterOrEqualsThan()
    {
        de.upb.soot.concrete.operators.DoubleOps r0;
        byte $b0;
        java.io.PrintStream $r1;
        boolean $z1;

        r0 := @this: de.upb.soot.concrete.operators.DoubleOps;

        $b0 = 1.6777217E7 cmpl 5.0;

        if $b0 < 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(boolean)>($z1);

        return;
    }

    public void lessOrEqualsThan()
    {
        de.upb.soot.concrete.operators.DoubleOps r0;
        byte $b0;
        java.io.PrintStream $r1;
        boolean $z1;

        r0 := @this: de.upb.soot.concrete.operators.DoubleOps;

        $b0 = 1.6777217E7 cmpg 5.0;

        if $b0 > 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(boolean)>($z1);

        return;
    }
}
