public class de.upb.soot.concrete.operators.IntOps extends java.lang.Object
{

    public void <init>()
    {
        de.upb.soot.concrete.operators.IntOps r0;

        r0 := @this: de.upb.soot.concrete.operators.IntOps;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void addition()
    {
        de.upb.soot.concrete.operators.IntOps r0;
        int i2;
        java.io.PrintStream $r1;

        r0 := @this: de.upb.soot.concrete.operators.IntOps;

        i2 = 5 + 5;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(int)>(i2);

        return;
    }

    public void subtraction()
    {
        de.upb.soot.concrete.operators.IntOps r0;
        int i2;
        java.io.PrintStream $r1;

        r0 := @this: de.upb.soot.concrete.operators.IntOps;

        i2 = 5 - 5;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(int)>(i2);

        return;
    }

    public void multiplication()
    {
        de.upb.soot.concrete.operators.IntOps r0;
        int i2;
        java.io.PrintStream $r1;

        r0 := @this: de.upb.soot.concrete.operators.IntOps;

        i2 = 5 * 5;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(int)>(i2);

        return;
    }

    public void division()
    {
        de.upb.soot.concrete.operators.IntOps r0;
        int i2;
        java.io.PrintStream $r1;

        r0 := @this: de.upb.soot.concrete.operators.IntOps;

        i2 = 5 / 5;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(int)>(i2);

        return;
    }

    public void modulus()
    {
        de.upb.soot.concrete.operators.IntOps r0;
        int i2;
        java.io.PrintStream $r1;

        r0 := @this: de.upb.soot.concrete.operators.IntOps;

        i2 = 5 % 5;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(int)>(i2);

        return;
    }

    public void simpleAssignmentOperator()
    {
        de.upb.soot.concrete.operators.IntOps r0;
        java.io.PrintStream $r1;

        r0 := @this: de.upb.soot.concrete.operators.IntOps;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(int)>(5);

        return;
    }

    public void bitwiseAnd()
    {
        de.upb.soot.concrete.operators.IntOps r0;
        byte b2;
        java.io.PrintStream $r1;

        r0 := @this: de.upb.soot.concrete.operators.IntOps;

        b2 = 5 & 5;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(int)>(b2);

        return;
    }

    public void bitwiseOr()
    {
        de.upb.soot.concrete.operators.IntOps r0;
        byte b2;
        java.io.PrintStream $r1;

        r0 := @this: de.upb.soot.concrete.operators.IntOps;

        b2 = 5 | 5;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(int)>(b2);

        return;
    }

    public void bitwiseXor()
    {
        de.upb.soot.concrete.operators.IntOps r0;
        byte b2;
        java.io.PrintStream $r1;

        r0 := @this: de.upb.soot.concrete.operators.IntOps;

        b2 = 5 ^ 5;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(int)>(b2);

        return;
    }

    public void bitwiseCompliment()
    {
        de.upb.soot.concrete.operators.IntOps r0;
        byte b1;
        java.io.PrintStream $r1;

        r0 := @this: de.upb.soot.concrete.operators.IntOps;

        b1 = 5 ^ -1;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(int)>(b1);

        return;
    }

    public void bitwiseLeftShift()
    {
        de.upb.soot.concrete.operators.IntOps r0;
        int i1;
        java.io.PrintStream $r1;

        r0 := @this: de.upb.soot.concrete.operators.IntOps;

        i1 = 5 << 2;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(int)>(i1);

        return;
    }

    public void bitwiseRightShift()
    {
        de.upb.soot.concrete.operators.IntOps r0;
        byte b1;
        java.io.PrintStream $r1;

        r0 := @this: de.upb.soot.concrete.operators.IntOps;

        b1 = 5 >> 2;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(int)>(b1);

        return;
    }

    public void bitwiseRightShiftZerofill()
    {
        de.upb.soot.concrete.operators.IntOps r0;
        byte b1;
        java.io.PrintStream $r1;

        r0 := @this: de.upb.soot.concrete.operators.IntOps;

        b1 = 5 >>> 2;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(int)>(b1);

        return;
    }

    public void equals()
    {
        de.upb.soot.concrete.operators.IntOps r0;
        java.io.PrintStream $r1;
        boolean $z1;

        r0 := @this: de.upb.soot.concrete.operators.IntOps;

        $z1 = 1;

        goto label1;

     label1:
        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(boolean)>($z1);

        return;
    }

    public void notEquals()
    {
        de.upb.soot.concrete.operators.IntOps r0;
        java.io.PrintStream $r1;
        boolean $z1;

        r0 := @this: de.upb.soot.concrete.operators.IntOps;

        goto label1;

     label1:
        $z1 = 0;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(boolean)>($z1);

        return;
    }

    public void greateThan()
    {
        de.upb.soot.concrete.operators.IntOps r0;
        java.io.PrintStream $r1;
        boolean $z1;

        r0 := @this: de.upb.soot.concrete.operators.IntOps;

        goto label1;

     label1:
        $z1 = 0;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(boolean)>($z1);

        return;
    }

    public void lessThan()
    {
        de.upb.soot.concrete.operators.IntOps r0;
        java.io.PrintStream $r1;
        boolean $z1;

        r0 := @this: de.upb.soot.concrete.operators.IntOps;

        goto label1;

     label1:
        $z1 = 0;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(boolean)>($z1);

        return;
    }

    public void greaterOrEqualsThan()
    {
        de.upb.soot.concrete.operators.IntOps r0;
        java.io.PrintStream $r1;
        boolean $z1;

        r0 := @this: de.upb.soot.concrete.operators.IntOps;

        $z1 = 1;

        goto label1;

     label1:
        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(boolean)>($z1);

        return;
    }

    public void lessOrEqualsThan()
    {
        de.upb.soot.concrete.operators.IntOps r0;
        java.io.PrintStream $r1;
        boolean $z1;

        r0 := @this: de.upb.soot.concrete.operators.IntOps;

        $z1 = 1;

        goto label1;

     label1:
        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(boolean)>($z1);

        return;
    }
}
