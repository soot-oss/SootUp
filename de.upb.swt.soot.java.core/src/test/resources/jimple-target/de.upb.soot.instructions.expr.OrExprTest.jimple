public class de.upb.soot.instructions.expr.OrExprTest extends java.lang.Object
{

    public void <init>()
    {
        de.upb.soot.instructions.expr.OrExprTest r0;

        r0 := @this: de.upb.soot.instructions.expr.OrExprTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void logicalOR(boolean, boolean)
    {
        de.upb.soot.instructions.expr.OrExprTest r0;
        boolean z0, z1, $z3;
        java.io.PrintStream $r1;

        r0 := @this: de.upb.soot.instructions.expr.OrExprTest;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        if z0 != 0 goto label1;

        if z1 == 0 goto label2;

     label1:
        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(boolean)>($z3);

        return;
    }

    public void bitwiseOR(int, int)
    {
        de.upb.soot.instructions.expr.OrExprTest r0;
        int i0, i1, i2;
        java.io.PrintStream $r1;

        r0 := @this: de.upb.soot.instructions.expr.OrExprTest;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 = i0 | i1;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(int)>(i2);

        return;
    }

    public void bitwiseORAssignment(int, int)
    {
        de.upb.soot.instructions.expr.OrExprTest r0;
        int i0, i1, i2;
        java.io.PrintStream $r1;

        r0 := @this: de.upb.soot.instructions.expr.OrExprTest;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 = i1 | i0;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(int)>(i2);

        return;
    }
}
