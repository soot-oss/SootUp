public class de.upb.sootup.concrete.operators.FloatOps extends java.lang.Object
{

    public void <init>()
    {
        de.upb.sootup.concrete.operators.FloatOps r0;

        r0 := @this: de.upb.sootup.concrete.operators.FloatOps;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void addition()
    {
        de.upb.sootup.concrete.operators.FloatOps r0;
        float f2;
        java.io.PrintStream r1;

        r0 := @this: de.upb.sootup.concrete.operators.FloatOps;

        f2 = 5.5F + 5.0F;

        r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke r1.<java.io.PrintStream: void println(float)>(f2);

        return;
    }

    public void subtraction()
    {
        de.upb.sootup.concrete.operators.FloatOps r0;
        float f2;
        java.io.PrintStream r1;

        r0 := @this: de.upb.sootup.concrete.operators.FloatOps;

        f2 = 5.0F - 5.5F;

        r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke r1.<java.io.PrintStream: void println(float)>(f2);

        return;
    }

    public void multiplication()
    {
        de.upb.sootup.concrete.operators.FloatOps r0;
        float f2;
        java.io.PrintStream r1;

        r0 := @this: de.upb.sootup.concrete.operators.FloatOps;

        f2 = 5.0F * 5.5F;

        r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke r1.<java.io.PrintStream: void println(float)>(f2);

        return;
    }

    public void division()
    {
        de.upb.sootup.concrete.operators.FloatOps r0;
        float f2;
        java.io.PrintStream r1;

        r0 := @this: de.upb.sootup.concrete.operators.FloatOps;

        f2 = 5.0F / 5.5F;

        r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke r1.<java.io.PrintStream: void println(float)>(f2);

        return;
    }

    public void modulus()
    {
        de.upb.sootup.concrete.operators.FloatOps r0;
        float f2;
        java.io.PrintStream r1;

        r0 := @this: de.upb.sootup.concrete.operators.FloatOps;

        f2 = 5.0F % 5.5F;

        r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke r1.<java.io.PrintStream: void println(float)>(f2);

        return;
    }

    public void simpleAssignmentOperator()
    {
        de.upb.sootup.concrete.operators.FloatOps r0;
        java.io.PrintStream r1;

        r0 := @this: de.upb.sootup.concrete.operators.FloatOps;

        r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke r1.<java.io.PrintStream: void println(float)>(5.5F);

        return;
    }

    public void equals()
    {
        de.upb.sootup.concrete.operators.FloatOps r0;
        byte b0;
        java.io.PrintStream r1;
        boolean z1;

        r0 := @this: de.upb.sootup.concrete.operators.FloatOps;

        b0 = 5.5F cmpl 5.0F;

        if b0 != 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke r1.<java.io.PrintStream: void println(boolean)>(z1);

        return;
    }

    public void notEquals()
    {
        de.upb.sootup.concrete.operators.FloatOps r0;
        byte b0;
        java.io.PrintStream r1;
        boolean z1;

        r0 := @this: de.upb.sootup.concrete.operators.FloatOps;

        b0 = 5.5F cmpl 5.0F;

        if b0 == 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke r1.<java.io.PrintStream: void println(boolean)>(z1);

        return;
    }

    public void greateThan()
    {
        de.upb.sootup.concrete.operators.FloatOps r0;
        byte b0;
        java.io.PrintStream r1;
        boolean z1;

        r0 := @this: de.upb.sootup.concrete.operators.FloatOps;

        b0 = 5.5F cmpl 5.0F;

        if b0 <= 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke r1.<java.io.PrintStream: void println(boolean)>(z1);

        return;
    }

    public void lessThan()
    {
        de.upb.sootup.concrete.operators.FloatOps r0;
        byte b0;
        java.io.PrintStream r1;
        boolean z1;

        r0 := @this: de.upb.sootup.concrete.operators.FloatOps;

        b0 = 5.5F cmpg 5.0F;

        if b0 >= 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke r1.<java.io.PrintStream: void println(boolean)>(z1);

        return;
    }

    public void greaterOrEqualsThan()
    {
        de.upb.sootup.concrete.operators.FloatOps r0;
        byte b0;
        java.io.PrintStream r1;
        boolean z1;

        r0 := @this: de.upb.sootup.concrete.operators.FloatOps;

        b0 = 5.5F cmpl 5.0F;

        if b0 < 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke r1.<java.io.PrintStream: void println(boolean)>(z1);

        return;
    }

    public void lessOrEqualsThan()
    {
        de.upb.sootup.concrete.operators.FloatOps r0;
        byte b0;
        java.io.PrintStream r1;
        boolean z1;

        r0 := @this: de.upb.sootup.concrete.operators.FloatOps;

        b0 = 5.5F cmpg 5.0F;

        if b0 > 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke r1.<java.io.PrintStream: void println(boolean)>(z1);

        return;
    }
}
